{
"title":"Well-Typed.Com: Performance improvements for HLS",
"textBody":"&lt;blockquote&gt; &lt;strong&gt;TL;DR:&lt;/strong&gt; Upcoming HLS releases will be substantially faster and more responsive for large codebases using Template Haskell, thanks to work by Well-Typed on behalf of Mercury. &lt;/blockquote&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/haskell/haskell-language-server&quot;&gt;Haskell Language Server&lt;/a&gt; (HLS) is a key part of the IDE experience for Haskell. Well-Typed are actively exploring ways to maintain and improve HLS, in particular making it robust and performant on large projects.&lt;/p&gt; &lt;p&gt;Recently, &lt;a href=&quot;https://mercury.com/&quot;&gt;Mercury&lt;/a&gt; asked us to deal with performance problems in HLS that were preventing their developers from using it effectively. In particular, for large projects using Template Haskell, HLS would take a long time to start up, and would spend far too much time recompiling after each edit to a file. This made it difficult to use interactively with such projects.&lt;/p&gt; &lt;p&gt;This post describes the progress we have made in improving performance in GHC and HLS for projects using Template Haskell. The work has been primarily completed by &lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin Duggal&lt;/a&gt; with help from &lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matthew Pickering&lt;/a&gt;. It involves three key changes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Speeding up recompilation by reducing how often GHC and HLS need to recompile modules after their dependencies are changed.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Reducing start-up times by serializing Core code to interface files.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Taking advantage of the serialized Core to generate bytecode only when really needed.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We will discuss each of these in turn, followed by benchmarks illustrating the impact of the changes.&lt;/p&gt;  &lt;h3 id=&quot;speeding-up-recompilation-given-template-haskell&quot;&gt;Speeding up recompilation given Template Haskell&lt;/h3&gt; &lt;p&gt;For interactive development with HLS, a project is fully checked once on startup. Subsequently, when the developer edits a file, that module and any modules that depend on it may then need to be re-checked. In the absence of Template Haskell, HLS can type-check a project and then stop without actually doing code generation, thereby avoiding lots of computation. However, when Template Haskell is used, functions used in TH splices need to be compiled to bytecode or object code in order to run the splices and continue type-checking.&lt;/p&gt; &lt;p&gt;GHC implements a “recompilation check” that decides whether a given module needs to be recompiled when one of its dependencies has changed. For example, if the only function that has changed is never used in the module, there is no need to recompile. This can save substantial amounts of work.&lt;/p&gt; &lt;p&gt;However, in GHC 9.2 and previous versions, where a module enables Template Haskell, that module will be recompiled whenever any of its dependencies are modified at all. The key requirement is that if the definition of any identifier used in a splice is modified, then we need to recompile. By eagerly recompiling if anything changes at all, GHC will always catch the case when something used in a splice is changed, but it’s not a very precise solution, and leads to many unnecessary recompiles.&lt;/p&gt; &lt;p&gt;The crux of the improved recompilation performance is to recompile only if a module which defines a symbol used in a splice is changed, rather than any module at all. We have implemented this scheme in both GHC and HLS:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/haskell/haskell-language-server/pull/2316&quot;&gt;HLS patch&lt;/a&gt; will be available in the next HLS release, and will apply when using HLS with any supported GHC version.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7353&quot;&gt;GHC patch&lt;/a&gt; will be part of the GHC 9.4 release, and will apply when compiling outside of HLS with GHC or GHCi.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;fine-grained-recompilation-avoidance-in-hls&quot;&gt;Fine-grained recompilation avoidance in HLS&lt;/h4&gt; &lt;p&gt;HLS uses its own build system, &lt;a href=&quot;https://hackage.haskell.org/package/hls-graph&quot;&gt;&lt;code&gt;hls-graph&lt;/code&gt;&lt;/a&gt;, based on Shake but adapted to suit the needs of HLS (e.g. storing everything graph in memory rather than on disk, and minimizing rebuilds). The build system defines rules that specify when changes to one build product may affect another. However, these rules are necessarily somewhat coarser-grained than the fine-grained recompilation avoidance check implemented by GHC.&lt;/p&gt; &lt;p&gt;Previously, the build system could reuse old build products only if the rule wasn’t triggered at all, or if old build products were already available on disk. This meant that even if GHC’s fine-grained recompilation avoidance check knew that recompilation was not required, HLS would still have to recompile in order to have the build products around for subsequently running splices.&lt;/p&gt; &lt;p&gt;Thus another crucial improvement to speed up recompilation is to allow the build rules to have access to the value computed on a previous run. Then when a rule is rebuilt, it can first invoke GHC’s fine-grained recompilation check, and if that indicates no recompilation is necessary, immediately return the previous value.&lt;/p&gt; &lt;h3 id=&quot;speeding-up-start-up-with-serialized-core&quot;&gt;Speeding up start-up with serialized Core&lt;/h3&gt; &lt;p&gt;We have discussed recompilation performance during editing, but what about when HLS starts up?&lt;/p&gt; &lt;p&gt;If the project been compiled previously, then in the absence of Template Haskell, HLS will load interface (&lt;code&gt;.hi&lt;/code&gt;) files from disk in order to recreate the internal state without much additional work.&lt;/p&gt; &lt;p&gt;However, for modules which use Template Haskell, the compiled bytecode or object code is needed to run splices, in addition to the contents of the interface files. Prior to our work, HLS could not make use of existing compiled code, so it had to recompile everything from scratch, leading to long start-up times every time the project was opened.&lt;/p&gt; &lt;p&gt;How can we avoid this? It turns out to be difficult to use either bytecode&lt;a class=&quot;footnote-ref&quot; href=&quot;https://well-typed.com/blog/rss2.xml#fn1&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; or object code&lt;a class=&quot;footnote-ref&quot; href=&quot;https://well-typed.com/blog/rss2.xml#fn2&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; in this context, so we chose a third option: after compiling modules, serialize the Core to disk as part of a “fat interface file,” and use this to generate bytecode for the modules we need on startup. Core is GHC’s intermediate language, so generating bytecode from Core is not a particularly expensive operation. Moreover, the machinery needed to serialize Core already exists in GHC, because GHC serializes some Core for unfoldings into interface files. Thus it was easy to add fat interface file support into HLS while maintaining support for all the GHC versions it currently compiles with.&lt;/p&gt; &lt;p&gt;This significantly reduces start-up times on codebases that use a lot of Template Haskell (provided the code has been compiled once before). This change has draft implementations &lt;a href=&quot;https://github.com/haskell/haskell-language-server/pull/2813&quot;&gt;in progress for HLS&lt;/a&gt;, and &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7502&quot;&gt;in GHC itself&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&quot;generating-bytecode-on-demand&quot;&gt;Generating bytecode on demand&lt;/h3&gt; &lt;p&gt;Usually, before typechecking a module with TH and running its splices, HLS has to populate the environment it passes to GHC with the compiled bytecode or object code for all the modules that &lt;em&gt;may&lt;/em&gt; be used in a splice (i.e. all the imports of the module).&lt;/p&gt; &lt;p&gt;However, by installing a GHC hook, we can intercept splices just before they are compiled and run, and inspect them to discover precisely which modules are actually used in a particular splice. Once we have the set of modules that a splice actually depends on, we can populate the GHC environment by compiling the bytecode of exactly that set of modules and no more. The set of modules used in TH splices is usually much smaller than the total set of imports, so this avoids having to compile many modules to bytecode.&lt;/p&gt; &lt;p&gt;This optimisation is only made possible with the ability to serialize Core, as we can generate bytecode on demand using the Core file we have written out. Without the serialized Core, we would have to keep the intermediate typechecked or Core ASTs of all modules in memory, which is not feasible due to the heap bloat this would cause. HLS has invariants that try really hard to ensure that intermediate ASTs are only kept in memory for files that the user has opened in their editor, as doing so for every single file in the project is infeasible for projects that span over a few dozen modules.&lt;/p&gt; &lt;p&gt;We have a work-in-progress implementation of this change in HLS, but a few issues remain to be ironed out before it is ready to be reviewed and merged. Doing this in GHC would be more difficult; a possible alternative would be to allow the user to control which identifiers can be used in splices via &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/pull/412&quot;&gt;Explicit Splice Imports&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h3&gt; &lt;p&gt;We conducted some benchmarks on a large commercial Haskell repository, which consists of around 2000 modules and approximately 200,000 lines of code. These benchmarks used the existing HLS benchmarking infrastructure to start HLS, edit files and perform HLS requests (e.g. to look up a definition or get information about a source code location).&lt;/p&gt; &lt;p&gt;The HLS versions being compared are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;HLS prior to these changes (&lt;code&gt;baseline&lt;/code&gt;),&lt;/li&gt; &lt;li&gt;the new recompilation avoidance scheme (&lt;code&gt;avoid-recompile&lt;/code&gt;),&lt;/li&gt; &lt;li&gt;the strategy to serialize Core along with the new recompilation avoidance scheme (&lt;code&gt;serialize-core&lt;/code&gt;), and&lt;/li&gt; &lt;li&gt;the optimisation to &lt;code&gt;serialize-core&lt;/code&gt; to allow us to generate bytecode only on demand (&lt;code&gt;on-demand-bytecode&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All benchmarks are conducted with a warm cache (i.e. the project has been compiled at least once in the past, so its &lt;code&gt;.hi&lt;/code&gt; files are present on disk).&lt;/p&gt; &lt;h4 id=&quot;set-1-comparison-against-baseline&quot;&gt;Set 1: Comparison against baseline&lt;/h4&gt; &lt;p&gt;This benchmark consists of edits to 3 files, followed by a “get definition” request in each of the files, repeated 20 times. The 3 files chosen consisted of one file relatively deep in the module hierarchy, one in the upper two-thirds, and another one near the very top. These were chosen as to provide a realistic accounting of the kinds of edits users might perform in an actual IDE session, taking into account a diverse set of files from across the entire module hierarchy.&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr class=&quot;header&quot;&gt; &lt;th&gt;version&lt;/th&gt; &lt;th&gt;baseline&lt;/th&gt; &lt;th&gt;avoid-recompile&lt;/th&gt; &lt;th&gt;serialize-core&lt;/th&gt; &lt;th&gt;on-demand-bytecode&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;time waiting for responses&lt;/td&gt; &lt;td&gt;448.5s&lt;/td&gt; &lt;td&gt;423.8s&lt;/td&gt; &lt;td&gt;80.1s&lt;/td&gt; &lt;td&gt;36.2s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;time after responding&lt;/td&gt; &lt;td&gt;10852.4s&lt;/td&gt; &lt;td&gt;503.3s&lt;/td&gt; &lt;td&gt;315.0s&lt;/td&gt; &lt;td&gt;98.3s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;total time&lt;/td&gt; &lt;td&gt;11300.9s&lt;/td&gt; &lt;td&gt;927.3s&lt;/td&gt; &lt;td&gt;395.2s&lt;/td&gt; &lt;td&gt;134.4s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;initial load time&lt;/td&gt; &lt;td&gt;447.6&lt;/td&gt; &lt;td&gt;429.2s&lt;/td&gt; &lt;td&gt;84.8s&lt;/td&gt; &lt;td&gt;46.9s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;average time per response&lt;/td&gt; &lt;td&gt;0.019s&lt;/td&gt; &lt;td&gt;0.010s&lt;/td&gt; &lt;td&gt;0.011s&lt;/td&gt; &lt;td&gt;0.008s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;GHC rebuilds&lt;/td&gt; &lt;td&gt;21680&lt;/td&gt; &lt;td&gt;2238&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;max residency&lt;/td&gt; &lt;td&gt;7093MiB&lt;/td&gt; &lt;td&gt;4903MiB&lt;/td&gt; &lt;td&gt;3937MiB&lt;/td&gt; &lt;td&gt;3078MiB&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;bytes allocated&lt;/td&gt; &lt;td&gt;3817GiB&lt;/td&gt; &lt;td&gt;676GiB&lt;/td&gt; &lt;td&gt;533GiB&lt;/td&gt; &lt;td&gt;254GiB&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The time measurements are wall-clock times:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;“time waiting for responses” is the sum of the times between requests being issued and the user seeing responses to their requests (including the initial load in order to respond to the first request).&lt;/li&gt; &lt;li&gt;“time after responding” is the sum of the time spent after responses have been returned but HLS is still busy (e.g. recompiling after an edit).&lt;/li&gt; &lt;li&gt;“total time” is the time taken to run the entire benchmark.&lt;/li&gt; &lt;li&gt;“initial load time” is the time taken for HLS to load the project and come back to idle.&lt;/li&gt; &lt;li&gt;“average time per response” is the average amount of time HLS took to respond to a request (not counting the initial load).&lt;/li&gt; &lt;li&gt;“GHC rebuilds” counts the total number of times HLS called into the GHC API to rebuild a module.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The total time and number of GHC rebuilds for &lt;code&gt;baseline&lt;/code&gt; is vastly higher than the others, because without the recompilation changes we are essentially compiling the entire project on every edit to the file deep in the module hierarchy, while &lt;code&gt;avoid-recompile&lt;/code&gt; or &lt;code&gt;serialize-core&lt;/code&gt; do a comparatively minimal amount of recompilation work on every edit. The actual factor of improvement is not very meaningful (it could be made arbitrarily high by increasing the number of iterations). However, it does show a very significant improvement to the user experience of the IDE: getting up to date information, warnings and errors much faster compared to the status quo.&lt;/p&gt; &lt;p&gt;Between &lt;code&gt;avoid-recompile&lt;/code&gt; and &lt;code&gt;serialize-core&lt;/code&gt; the total time decreases further, because on a fresh start, the files can be loaded directly from disk rather than recompiling. Looking at the “GHC rebuilds” column, &lt;code&gt;avoid-recompile&lt;/code&gt; needs to rebuild every file once at startup, and then do a minimal amount of recompilation on edits. &lt;code&gt;serialize-core&lt;/code&gt; and &lt;code&gt;on-demand-bytecode&lt;/code&gt; have to do some much smaller amount of recompilation on startup due to editing a file deep in the hierarchy, and do the same amount of recompilation due to edits as &lt;code&gt;avoid-recompile&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;With &lt;code&gt;on-demand-bytecode&lt;/code&gt;, we see another dramatic improvement to initial load times as we we can avoid compiling many files to bytecode. We also see a dramatic improvement in the total time as we avoid all this work even on recompiles.&lt;/p&gt; &lt;p&gt;Looking at a graph of heap usage against time shows the dramatic impact of the changes:&lt;/p&gt; &lt;figure&gt; &lt;img alt=&quot;“getDefinition after edit” - live bytes over time&quot; src=&quot;https://well-typed.com/blog/aux/images/hls-perf/mercury_get_definition.svg&quot; /&gt;&lt;figcaption&gt;“getDefinition after edit” - live bytes over time&lt;/figcaption&gt; &lt;/figure&gt; &lt;h4 id=&quot;set-2-impact-of-serializing-core-and-generating-bytecode-on-demand&quot;&gt;Set 2: Impact of serializing Core and generating bytecode on demand&lt;/h4&gt; &lt;p&gt;This set of varied benchmarks compares just the &lt;code&gt;avoid-recompile&lt;/code&gt;, &lt;code&gt;serialize-core&lt;/code&gt; and &lt;code&gt;on-demand-bytecode&lt;/code&gt; changes, since they are all substantially better than &lt;code&gt;baseline&lt;/code&gt;. These benchmarks consisted of 50 repetitions each.&lt;/p&gt; &lt;p&gt;This time, only the two files near the top were edited as part of the benchmark, because the third file is relatively deep in the module hierarchy, and editing it invalidates a large amount of build products we have on disk, somewhat damping the effect of faster startups due to serialized Core.&lt;/p&gt; &lt;p&gt;Full results are given in the &lt;a href=&quot;https://well-typed.com/blog/rss2.xml#appendix-benchmark-results&quot;&gt;Appendix&lt;/a&gt; below. The heap usage vs time graph for some of these benchmarks is also included, for example here is the graph for the first benchmark in this set:&lt;/p&gt; &lt;figure&gt; &lt;img alt=&quot;“hover after edit” - live bytes over time&quot; src=&quot;https://well-typed.com/blog/aux/images/hls-perf/mercury_hover.svg&quot; /&gt;&lt;figcaption&gt;“hover after edit” - live bytes over time&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;The initial upward sloping segment shows us the initial load, and the flat, spiky segment is the section where we are editing, performing requests and recompiling. The vertical lines show the times at which the initial load is complete. It is clear that the initial load times are vastly improved with the &lt;code&gt;serialize-core&lt;/code&gt; changes, going from consistently over 300s to under 100s, and further improved by the &lt;code&gt;on-demand-bytecode&lt;/code&gt; changes, further reducing to around 60s.&lt;/p&gt; &lt;p&gt;Of course, in practice, the impact of these improvements differs quite heavily depending on usage. If the first thing done by the user is to open and edit something deep in the module hierarchy upon which a lot of things depend, the improvements can be quite minimal. If on the other hand something at the top of the module hierarchy is opened first, startup times would be greatly improved because we wouldn’t need to recompile anything below it.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We are grateful to Mercury for funding this work, as it will benefit the whole Haskell community. We have already made significant progress improving the performance of HLS, and are continuing to identify further opportunities for performance improvements.&lt;/p&gt; &lt;p&gt;Well-Typed are actively looking for funding to continue maintaining and enhancing HLS and GHC. If your company relies on GHC or HLS, and you could support this work, or would like help improving the developer experience for your Haskell engineers, please get in touch with us via &lt;a href=&quot;mailto:info@well-typed.com&quot;&gt;info@well-typed.com&lt;/a&gt;!&lt;/p&gt; &lt;hr style=&quot;margin-top: 5em;&quot; /&gt; &lt;h2 id=&quot;appendix-benchmark-results&quot;&gt;Appendix: benchmark results&lt;/h2&gt; &lt;h5 id=&quot;hover-after-edit&quot;&gt;Hover after edit&lt;/h5&gt; &lt;table&gt; &lt;thead&gt; &lt;tr class=&quot;header&quot;&gt; &lt;th&gt;version&lt;/th&gt; &lt;th&gt;avoid-recompile&lt;/th&gt; &lt;th&gt;serialize-core&lt;/th&gt; &lt;th&gt;on-demand-bytecode&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;time waiting for responses&lt;/td&gt; &lt;td&gt;324.6s&lt;/td&gt; &lt;td&gt;94.3s&lt;/td&gt; &lt;td&gt;48.4s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;time after responding&lt;/td&gt; &lt;td&gt;295.0s&lt;/td&gt; &lt;td&gt;336.2s&lt;/td&gt; &lt;td&gt;102.5s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;total time&lt;/td&gt; &lt;td&gt;619.5s&lt;/td&gt; &lt;td&gt;430.5s&lt;/td&gt; &lt;td&gt;151.0s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;initial load time&lt;/td&gt; &lt;td&gt;324.2s&lt;/td&gt; &lt;td&gt;98.5s&lt;/td&gt; &lt;td&gt;52.2s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;average time per response&lt;/td&gt; &lt;td&gt;0.005s&lt;/td&gt; &lt;td&gt;0.005s&lt;/td&gt; &lt;td&gt;0.006s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;GHC rebuilds&lt;/td&gt; &lt;td&gt;1861&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;max residency&lt;/td&gt; &lt;td&gt;4697MiB&lt;/td&gt; &lt;td&gt;3777MiB&lt;/td&gt; &lt;td&gt;2787MiB&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;bytes allocated&lt;/td&gt; &lt;td&gt;595GiB&lt;/td&gt; &lt;td&gt;533GiB&lt;/td&gt; &lt;td&gt;178GiB&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;figure&gt; &lt;img alt=&quot;“hover after edit” - live bytes over time&quot; src=&quot;https://well-typed.com/blog/aux/images/hls-perf/mercury_hover.svg&quot; /&gt;&lt;figcaption&gt;“hover after edit” - live bytes over time&lt;/figcaption&gt; &lt;/figure&gt; &lt;h5 id=&quot;getdefinition-after-edit&quot;&gt;getDefinition after edit&lt;/h5&gt; &lt;table&gt; &lt;thead&gt; &lt;tr class=&quot;header&quot;&gt; &lt;th&gt;version&lt;/th&gt; &lt;th&gt;avoid-recompile&lt;/th&gt; &lt;th&gt;serialize-core&lt;/th&gt; &lt;th&gt;on-demand-bytecode&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;time waiting for responses&lt;/td&gt; &lt;td&gt;456.0s&lt;/td&gt; &lt;td&gt;92.9s&lt;/td&gt; &lt;td&gt;93.1s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;time after responding&lt;/td&gt; &lt;td&gt;387.8s&lt;/td&gt; &lt;td&gt;315.3s&lt;/td&gt; &lt;td&gt;60.4s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;total time&lt;/td&gt; &lt;td&gt;843.8s&lt;/td&gt; &lt;td&gt;408.1s&lt;/td&gt; &lt;td&gt;153.5s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;initial load time&lt;/td&gt; &lt;td&gt;450.2s&lt;/td&gt; &lt;td&gt;89.5s&lt;/td&gt; &lt;td&gt;63.2s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;average time per response&lt;/td&gt; &lt;td&gt;0.05s&lt;/td&gt; &lt;td&gt;0.04s&lt;/td&gt; &lt;td&gt;0.04s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;GHC rebuilds&lt;/td&gt; &lt;td&gt;1861&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;max residency&lt;/td&gt; &lt;td&gt;4728MiB&lt;/td&gt; &lt;td&gt;3762MiB&lt;/td&gt; &lt;td&gt;2887MiB&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;bytes allocated&lt;/td&gt; &lt;td&gt;589GiB&lt;/td&gt; &lt;td&gt;385GiB&lt;/td&gt; &lt;td&gt;178GiB&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;figure&gt; &lt;img alt=&quot;“getDefinition after edit” - live bytes over time&quot; src=&quot;https://well-typed.com/blog/aux/images/hls-perf/mercury_get_definition2.svg&quot; /&gt;&lt;figcaption&gt;“getDefinition after edit” - live bytes over time&lt;/figcaption&gt; &lt;/figure&gt; &lt;h5 id=&quot;completions-after-edit&quot;&gt;Completions after edit&lt;/h5&gt; &lt;table&gt; &lt;thead&gt; &lt;tr class=&quot;header&quot;&gt; &lt;th&gt;version&lt;/th&gt; &lt;th&gt;avoid-recompile&lt;/th&gt; &lt;th&gt;serialize-core&lt;/th&gt; &lt;th&gt;on-demand-bytecode&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;time waiting for responses&lt;/td&gt; &lt;td&gt;785.2s&lt;/td&gt; &lt;td&gt;440.5s&lt;/td&gt; &lt;td&gt;145.3s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;time after responding&lt;/td&gt; &lt;td&gt;247.7s&lt;/td&gt; &lt;td&gt;233.3s&lt;/td&gt; &lt;td&gt;24.2s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;total time&lt;/td&gt; &lt;td&gt;1032.9s&lt;/td&gt; &lt;td&gt;673.8s&lt;/td&gt; &lt;td&gt;169.5s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;initial load time&lt;/td&gt; &lt;td&gt;443.9s&lt;/td&gt; &lt;td&gt;92.0s&lt;/td&gt; &lt;td&gt;62.0s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;average time per response&lt;/td&gt; &lt;td&gt;1.25s&lt;/td&gt; &lt;td&gt;1.24s&lt;/td&gt; &lt;td&gt;0.94s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;GHC rebuilds&lt;/td&gt; &lt;td&gt;1861&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;max residency&lt;/td&gt; &lt;td&gt;4982MiB&lt;/td&gt; &lt;td&gt;4012MiB&lt;/td&gt; &lt;td&gt;3008MiB&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;bytes allocated&lt;/td&gt; &lt;td&gt;816GiB&lt;/td&gt; &lt;td&gt;598GiB&lt;/td&gt; &lt;td&gt;198iB&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;figure&gt; &lt;img alt=&quot;“completions after edit” - live bytes over time&quot; src=&quot;https://well-typed.com/blog/aux/images/hls-perf/mercury_completions.svg&quot; /&gt;&lt;figcaption&gt;“completions after edit” - live bytes over time&lt;/figcaption&gt; &lt;/figure&gt; &lt;h5 id=&quot;code-actions-after-edit&quot;&gt;Code actions after edit&lt;/h5&gt; &lt;table&gt; &lt;thead&gt; &lt;tr class=&quot;header&quot;&gt; &lt;th&gt;version&lt;/th&gt; &lt;th&gt;avoid-recompile&lt;/th&gt; &lt;th&gt;serialize-core&lt;/th&gt; &lt;th&gt;on-demand-bytecode&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;time waiting for responses&lt;/td&gt; &lt;td&gt;479.8s&lt;/td&gt; &lt;td&gt;426.1s&lt;/td&gt; &lt;td&gt;139.3s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;time after responding&lt;/td&gt; &lt;td&gt;317.8s&lt;/td&gt; &lt;td&gt;72.3s&lt;/td&gt; &lt;td&gt;0.017s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;total time&lt;/td&gt; &lt;td&gt;794.6s&lt;/td&gt; &lt;td&gt;494.4s&lt;/td&gt; &lt;td&gt;139.3s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;initial load time&lt;/td&gt; &lt;td&gt;314.9s&lt;/td&gt; &lt;td&gt;72.9s&lt;/td&gt; &lt;td&gt;60.7s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;average time per response&lt;/td&gt; &lt;td&gt;4.05s&lt;/td&gt; &lt;td&gt;4.34s&lt;/td&gt; &lt;td&gt;0.80s&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;GHC rebuilds&lt;/td&gt; &lt;td&gt;1861&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;td&gt;339&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;max residency&lt;/td&gt; &lt;td&gt;4990MiB&lt;/td&gt; &lt;td&gt;3983MiB&lt;/td&gt; &lt;td&gt;2981MiB&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;bytes allocated&lt;/td&gt; &lt;td&gt;685GiB&lt;/td&gt; &lt;td&gt;468GiB&lt;/td&gt; &lt;td&gt;241GiB&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;figure&gt; &lt;img alt=&quot;“code actions after edit” - live bytes over time&quot; src=&quot;https://well-typed.com/blog/aux/images/hls-perf/mercury_code_actions.svg&quot; /&gt;&lt;figcaption&gt;“code actions after edit” - live bytes over time&lt;/figcaption&gt; &lt;/figure&gt; &lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt; &lt;section class=&quot;footnotes&quot;&gt; &lt;hr /&gt; &lt;ol&gt; &lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Directly serializing bytecode is difficult to implement because the bytecode format hasn’t been very stable across the GHC versions HLS supports, and isn’t designed for easy serialization as it contains many references to things that exist only in memory.&lt;a class=&quot;footnote-back&quot; href=&quot;https://well-typed.com/blog/rss2.xml#fnref1&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;Unlike bytecode, object code already comes with a serializable format, but has several other drawbacks:&lt;/p&gt; &lt;ol type=&quot;1&quot;&gt; &lt;li&gt;Dynamically loaded code is difficult to unload and practically impossible on some platforms. This can make a big difference with interactive use, as memory usage can grow linearly with edits (older object code is never truly unloaded, newer code just shadows the old code). In addition to this, bugs with code unloading on some GHC versions also posed issues.&lt;/li&gt; &lt;li&gt;Generating and emitting native code is usually much slower than bytecode, and even though the emitted code may be faster, the cost of the former usually dominates the latter when it comes to the small, usually quite simple types of programs that are executed due to Template Haskell splices&lt;/li&gt; &lt;li&gt;Linking object code can also be quite expensive.&lt;/li&gt; &lt;/ol&gt; &lt;a class=&quot;footnote-back&quot; href=&quot;https://well-typed.com/blog/rss2.xml#fnref2&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt;",
"source":"Planet Haskell",
"PubDate":"2022-04-01T00:00:00Z",
"URL":" https://well-typed.com/blog/2022/04/hls-performance "
}
,
{
"title":"Michael Snoyman: April Fools Canceled",
"textBody":"&lt;p&gt;Due to totally foreseen conditions, April Fools' Day has been canceled this year. Pic unrelated.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;img alt=&quot;Double Cherry&quot; src=&quot;https://www.snoyman.com/static/images/double-cherry.jpeg&quot; style=&quot;border-radius: 10px;&quot; title=&quot;Double Cherry&quot; /&gt; &lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-04-01T00:00:00Z",
"URL":" https://www.snoyman.com/blog/2022/04/april-fools-canceled/ "
}
,
{
"title":"Monday Morning Haskell: Spring Sale ends in 4 Days!",
"textBody":"&lt;p&gt;On Monday we'll start April off with a fresh topic, but I wanted to take one more opportunity to remind you of the special Spring Sale going on right now with our courses at &lt;a href=&quot;https://academy.mondaymorninghaskell.com/courses&quot;&gt;Monday Morning Haskell Academy&lt;/a&gt;! Here's what's new this time around:&lt;/p&gt; &lt;p&gt;You can now get the &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/effects-bundle&quot;&gt;Effects Bundle&lt;/a&gt;, which includes &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/making-sense-of-monads&quot;&gt;Making Sense of Monads&lt;/a&gt; as well as &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/effectful-haskell&quot;&gt;Effectful Haskell&lt;/a&gt;! These courses will help you build a solid understanding of the critical concept of monads and how to use them in your programs. Between the two courses there's over 3.5 hours of video content, two mini-projects, and a full project where you'll deploy some Haskell server code to Heroku!&lt;/p&gt; &lt;p&gt;If you're super interested in using Haskell for machine learning, you can also enroll in our &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/haskell-course&quot;&gt;Haskell Brain course&lt;/a&gt; . This course is newly reopened, so if you missed out in the winter sale, you can sign up now! It will teach you the basics of using Tensorflow with Haskell as well as some other useful libraries.&lt;/p&gt; &lt;p&gt;Best of all you can get a further 20% discount on &lt;strong&gt;all of our courses&lt;/strong&gt; if your &lt;a href=&quot;https://www.mmhaskell.com/subscribe&quot;&gt;subscribe&lt;/a&gt; to our newsletter! You'll get a discount code in your inbox that you can use on any of our courses.&lt;/p&gt; &lt;h2 id=&quot;but-which-course-should-i-take-&quot;&gt;But Which Course Should I Take?&lt;/h2&gt; &lt;p&gt;Our course offerings have grown over the years so it might be a little overwhelming to figure out which one is right for you. Here are a few statements that might describe where you are in your Haskell journey, and which course you should look at!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;I've never written a line of Haskell before and I want to try it out!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You should take &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/haskell-from-scratch&quot;&gt;Haskell From Scratch&lt;/a&gt;! This 7-module course will walk you through all the most basic elements of Haskell's syntax and teach you some basic problem solving skills.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;I understand the basics but I want a deeper understanding of important concepts.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/effects-bundle&quot;&gt;Effects Bundle&lt;/a&gt; is the way to go here. You'll learn about monads from the ground up in &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/making-sense-of-monads&quot;&gt;Making Sense of Monads&lt;/a&gt; and then you'll learn different ways to organize your monads in &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/effectful-haskell&quot;&gt;Effectful Haskell&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;I want to try writing a real-world application using Haskell.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Take a look at &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/practical-haskell&quot;&gt;Practical Haskell&lt;/a&gt;! You'll learn the basics of building a web server, interacting with a database, and even adding a frontend with Elm!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;I want to write a machine learning program in Haskell.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/haskell-brain&quot;&gt;Haskell Brain&lt;/a&gt; is your bet!&lt;/p&gt; &lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt; &lt;p&gt;Last of all, here are some frequently asked questions you might have!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Do I have to wait to access any course content?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Nope! Our courses are all self-paced, and you'll have access to all content immediately!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;How long will I have access to the course content?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;There's no expiration! You get &lt;strong&gt;lifetime&lt;/strong&gt; access to the content!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Can I get a discount?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In addition to the 20% discount you can get from &lt;a href=&quot;https://www.mmhaskell.com/subscribe&quot;&gt;subscribing to our newsletter&lt;/a&gt;, discounts are available for university students! We also recognize that the prices may be steep for people from countries with unfavorable exchange rates against the US Dollar and can provide an extra discount for these situations. Email me at &lt;a href=&quot;mailto:james@mondaymorninghaskell.me&quot;&gt;james@mondaymorninghaskell.me&lt;/a&gt; for details on these special cases!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Will I be able to get a refund?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yes! We provide full refunds with no questions asked within 30 days of purchase.&lt;/p&gt; &lt;p&gt;The Spring Sale ends on Monday, April 4th, so don't miss out! &lt;a href=&quot;https://www.mmhaskell.com/subscribe&quot;&gt;Subscribe&lt;/a&gt;, get the discount code, and head over to our &lt;a href=&quot;https://academy.mondaymorninghaskell.com/courses&quot;&gt;courses page&lt;/a&gt;!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-31T14:30:00Z",
"URL":" https://mmhaskell.com/blog/2022/3/31/spring-sale-ends-in-4-days "
}
,
{
"title":"Tweag I/O: How I stopped worrying and learned to run wasm and native hybrid code",
"textBody":"&lt;p&gt;As a part of our ongoing efforts to add WebAssembly support for GHC, we needed to run the GHC test suite and look for interesting errors to fix. This blog post introduces a trick I discovered, that allows running the unmodified GHC test suite while treating WebAssembly modules like native executables transparently. The trick may come in handy if one needs to run a combination of host/guest hybrid code in their codebase.&lt;/p&gt; &lt;h2 id=&quot;a-webassembly-module-as-an-executable&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#a-webassembly-module-as-an-executable&quot;&gt;&lt;/a&gt;A WebAssembly module as an executable&lt;/h2&gt; &lt;p&gt;Let’s first clarify why we can treat a WebAssembly module as an executable file.&lt;/p&gt; &lt;p&gt;Despite the “Web” prefix in its name, the WebAssembly core &lt;a href=&quot;https://webassembly.github.io/spec/core/&quot;&gt;specification&lt;/a&gt; isn’t related to browsers at all; it merely defines a bytecode format that describes some computation. The only state that wasm code may query or modify are the linear memory and globals.&lt;/p&gt; &lt;p&gt;Pure WebAssembly is already useful as a numerical computation kernel. To go beyond this use case, WebAssembly needs access to side effects: check the system clock, write to the console, fire missiles or whatever. These side effects can be specified as WebAssembly imports, which reside in the same namespace of ordinary WebAssembly functions, conform to the same typing rules, but are backed by host functions under the hood. This is a core design principle of WebAssembly: security through capabilities.&lt;/p&gt; &lt;p&gt;What imports should a WebAssembly module contain? This is a matter of ABI(Application Binary Interface) design, and is closely related to the embedders and specific use cases. Outside of the core specification, there is a standard called &lt;a href=&quot;https://github.com/WebAssembly/WASI/blob/main/phases/snapshot/docs.md&quot;&gt;WASI&lt;/a&gt;(WebAssembly System Interface) that specifies the imports to access the “real world” like file system, sockets, clocks, etc.&lt;/p&gt; &lt;p&gt;If the toolchain emits WebAssembly modules that only use WASI imports, then these modules can be executed by any wasm engine that conforms to the WASI spec. In addition to those imports, WASI has an &lt;a href=&quot;https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md&quot;&gt;Application ABI&lt;/a&gt; that defines a “command module” containing a main entry function. This is the kind of WebAssembly “executable” we’re talking about: a module that is invoked once and runs to finish, while having access to the console, file system and any other resources that are explicitly provided by the engine.&lt;/p&gt; &lt;h2 id=&quot;ghc-test-suite-and-cross-compilation&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#ghc-test-suite-and-cross-compilation&quot;&gt;&lt;/a&gt;GHC test suite and cross compilation&lt;/h2&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ /opt/wasi-sdk/bin/clang hello.c -o hello.wasm $ wasmtime run hello.wasm Hello world!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Here, we’ve compiled a C program to a self-contained wasm module using &lt;a href=&quot;https://github.com/WebAssembly/wasi-sdk&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;wasi-sdk&lt;/code&gt;&lt;/a&gt;, and ran it using &lt;a href=&quot;https://wasmtime.dev/&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt;&lt;/a&gt;. Our work-in-progress &lt;code class=&quot;language-text&quot;&gt;wasm32-wasi-ghc&lt;/code&gt; is based on &lt;code class=&quot;language-text&quot;&gt;wasi-sdk&lt;/code&gt;, and can already emit wasm modules that run fine on &lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Naturally, we want to run the entire GHC &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/tree/master/testsuite&quot;&gt;test suite&lt;/a&gt; in a similar manner: first compile a test case to a &lt;code class=&quot;language-text&quot;&gt;wasm&lt;/code&gt; module, then use &lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt; to run it, finally compare the wasm standard output/error against expected files. Now we got a problem: the GHC test suite doesn’t know anything about cross compilation or emulators! It assumes GHC will always emit a native executable that can be spawned as a child process.&lt;/p&gt; &lt;p&gt;Refactoring that Haskell/Python/Makefile chimera codebase and adding support for guest code emulators is definitely a huge amount of &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3652&quot;&gt;work&lt;/a&gt;! In the future we may revisit this rabbit hole, but now we just want to run the whole thing without too much effort.&lt;/p&gt; &lt;p&gt;Does there exist such a shortcut?&lt;/p&gt; &lt;h2 id=&quot;potential-solutions&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#potential-solutions&quot;&gt;&lt;/a&gt;Potential solutions&lt;/h2&gt; &lt;p&gt;If the test suite driver expects GHC to emit a native executable, then just do it! We may take the wasm linker’s output module as a starting point, and find a way to generate a native executable that embeds the wasm module and performs wasm execution.&lt;/p&gt; &lt;p&gt;We quickly ruled out this first potential solution for a few reasons:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;No easy way to extract wasm from the finally generated native executable! We can still run wasm by running that executable, but we may also want to check the wasm disassemble results, or try different wasm engines.&lt;/li&gt; &lt;li&gt;It’s rather complex, requires hacking the linking step, and likely slows it down.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There is some good news! Linux kernel has a feature called &lt;a href=&quot;https://en.wikipedia.org/wiki/Binfmt_misc&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt;&lt;/a&gt; which allows us to use file extensions or magic numbers to identify guest executables, then pass them to user-specified emulators. This allows “mixed-mode” program execution, where host executables may run guest executables as child processes transparently.&lt;/p&gt; &lt;p&gt;Is &lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt; the perfect solution we’re looking for? Unfortunately not:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Registering an emulator via &lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt; requires modifying &lt;code class=&quot;language-text&quot;&gt;/proc/sys/fs/binfmt_misc&lt;/code&gt;, a system-global state. It doesn’t work if we don’t have &lt;code class=&quot;language-text&quot;&gt;root&lt;/code&gt; privilege.&lt;/li&gt; &lt;li&gt;System-wide designation of emulators may be undesirable. For instance, we may want to kick off two GHC test suite runs at once, using either &lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;wasmer&lt;/code&gt; as emulator, and compare the results. This can’t be achieved via &lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Ultimately, we’re seeking a solution that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Doesn’t require any hacking in the GHC linking logic or the GHC test suite driver&lt;/li&gt; &lt;li&gt;Doesn’t need &lt;code class=&quot;language-text&quot;&gt;root&lt;/code&gt; privilege, works in a sandboxed nix build&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;proot-to-the-rescue&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#proot-to-the-rescue&quot;&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt; to the rescue&lt;/h2&gt; &lt;p&gt;Yes, &lt;a href=&quot;https://proot-me.github.io/&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt;&lt;/a&gt; can do that! A lot of people have used it to simulate &lt;code class=&quot;language-text&quot;&gt;chroot&lt;/code&gt; in userspace, but it also implements a lesser-used functionality: simulate &lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt; in userspace.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt; uses &lt;a href=&quot;https://man7.org/linux/man-pages/man2/ptrace.2.html&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ptrace&lt;/code&gt;&lt;/a&gt; to intercept system calls of the first process and all its children. To create a child process from another executable, one of the &lt;code class=&quot;language-text&quot;&gt;exec&lt;/code&gt; system calls needs to be invoked, at which point &lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt; will intercept it, check whether it’s a host executable, and if not, use an emulator specified via &lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt; command line argument &lt;code class=&quot;language-text&quot;&gt;-q&lt;/code&gt; to run it.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt; expects the emulator to be a &lt;a href=&quot;https://www.qemu.org/docs/master/user/main.html&quot;&gt;QEMU user mode&lt;/a&gt; emulator, and it passes some QEMU-specific flags which won’t make sense to &lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt;. We can workaround this by writing a C wrapper:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;wasmtime_argv_init&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;       &lt;span class=&quot;token string&quot;&gt;&quot;wasmtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;token string&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; wasmtime_argv_init_length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wasmtime_argv_init&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// args before argv[5] are qemu-specific bits&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// arg[5] is &quot;executable name&quot; which is wasm filename&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;wasmtime_argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;wasmtime_argv_init_length &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; argc &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; wasmtime_argv_init_length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     wasmtime_argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wasmtime_argv_init&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     wasmtime_argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;wasmtime_argv_init_length &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;execvp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;wasmtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; wasmtime_argv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ cc qemu-system-wasm32.c -o qemu-system-wasm32 $ proot -q ./qemu-system-wasm32 $ ./hello.wasm Hello world!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;qemu-system-wasm32&lt;/code&gt; wrapper discards QEMU-specific flags, construct a proper argument list, then invokes &lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt; for actual execution. It works with &lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt; for this simple example. The real &lt;code class=&quot;language-text&quot;&gt;qemu-system-wasm32&lt;/code&gt; wrapper used in our tests is slightly more complex, since it needs to add other &lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt; arguments that set up filesystem mappings and environment variables.&lt;/p&gt; &lt;p&gt;Once we have compiled our &lt;code class=&quot;language-text&quot;&gt;qemu-system-wasm32&lt;/code&gt; wrapper, we just need to start running &lt;code class=&quot;language-text&quot;&gt;proot -q qemu-system-wasm32 hadrian test ...&lt;/code&gt;, then leave our chairs for a coffee break. The GHC test suite will call GHC to emit many wasm modules, and those modules will be transparently run by &lt;code class=&quot;language-text&quot;&gt;wasmtime&lt;/code&gt;, without needing to hack the test suite driver!&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Running a hybrid of host/guest programs transparently is definitely possible, and can even be done without relying on &lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt;, as described in this post. However, &lt;code class=&quot;language-text&quot;&gt;proot&lt;/code&gt; has its own caveats:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;It assumes there is only a single guest platform, so we can’t pass multiple emulators to run executables of different platforms. Ideally, the &lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt; configuration format can be reused here.&lt;/li&gt; &lt;li&gt;It assumes the emulator executable is itself a proper ELF executable, and not a shebang-based script. This made us mess with strings in C, which is not a pleasant experience.&lt;/li&gt; &lt;li&gt;It assumes the emulator is a QEMU user mode emulator, which complicates our wrapper logic a bit.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If we want to spend some more time for improvement, we can roll a similar &lt;code class=&quot;language-text&quot;&gt;binfmt_misc&lt;/code&gt; userspace emulation tool that’s also based on &lt;code class=&quot;language-text&quot;&gt;ptrace&lt;/code&gt;, but addresses the pain points above. To spend even more time, we should still teach the GHC test suite about cross compilation and emulators. However, getting here is enough for us to look for interesting errors in the test suite runs, and we hope our trick can somehow be useful to you if you face a similar challenge :)&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-31T00:00:00Z",
"URL":" https://tweag.io/blog/2022-03-31-running-wasm-native-hybrid-code/ "
}
,
{
"title":"Philip Wadler: Programming language to the stars",
"textBody":"&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3RzPGhpGK776LoMlE6Y0yz7t0RmeOvd3KK08NCQevwCszB6O4BDVnglIsTdXQz9y2_ZVcUP2REoSk3-gqurb7H7A6tFwKTZoRfCtRn6qnhvSpNmb34UFHzhdqqLNioLxqJcYzAV4BkZeyU2EaScKeaZrHCbT4QXv0uNkUJUbD9Y4DeiXSYA/s3062/Screenshot%202022-03-30%20at%2017.31.44.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;294&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3RzPGhpGK776LoMlE6Y0yz7t0RmeOvd3KK08NCQevwCszB6O4BDVnglIsTdXQz9y2_ZVcUP2REoSk3-gqurb7H7A6tFwKTZoRfCtRn6qnhvSpNmb34UFHzhdqqLNioLxqJcYzAV4BkZeyU2EaScKeaZrHCbT4QXv0uNkUJUbD9Y4DeiXSYA/w640-h294/Screenshot%202022-03-30%20at%2017.31.44.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;TIL that my students can choose among about forty different firms interested in hiring Haskell programmers. Among them is &lt;a href=&quot;https://www.costarastrology.com/why-haskell/&quot;&gt;Co-Star&lt;/a&gt;, a firm that provides horoscopes to millions of users, which has put up a page detailing why they choose Haskell over other languages. Thanks to Alex Wasey and Dylan Thinnes for the pointer. &lt;p&gt;&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-30T16:40:25Z",
"URL":" https://wadler.blogspot.com/2022/03/programming-language-to-stars.html "
}
,
{
"title":"Gabriel Gonzalez: Modeling PlusCal in Haskell using Cartesian products of NFAs",
"textBody":"Modeling PlusCal in Haskell using Cartesian products of NFAs    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/PlusCal&quot;&gt;PlusCal&lt;/a&gt; is a formal specification language created to model concurrent systems, and recently I became obsessed with implementing PlusCal as an embedded domain-specific language (eDSL) in Haskell. In other words, I want to model PlusCal processes as Haskell subroutines and also implement the model checker in Haskell.&lt;/p&gt;&lt;p&gt;I’m not done implementing this PlusCal eDSL, but I’m writing this to share what I learned in the course of doing so. Specifically, what I learned was:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You can model individual PlusCal processes as non-deterministic finite-state automata (NFAs)&lt;/p&gt;&lt;p&gt;I believe this is well-understood by users of PlusCal, but I’m mentioning this for people who are new to PlusCal.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You can model concurrent processes in PlusCal by computing the Cartesian product of their NFAs&lt;/p&gt;&lt;p&gt;I’m not sure if this is widely understood or not.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Haskell’s &lt;code&gt;Applicative&lt;/code&gt; abstraction can compute Cartesian products of NFAs&lt;/p&gt;&lt;p&gt;This is the novel insight that this post contributes.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are two reasons why I’m keen on modeling PlusCal using Cartesian products of NFAs:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;We can use this trick to combine any number of PlusCal processes into a composite process&lt;/p&gt;&lt;p&gt;The behavior of this composite process is indistinguishable from the original collection of processes.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;This approach simplifies the implementation of the model checker&lt;/p&gt;&lt;p&gt;The model checker now only needs to accept a single process as its input. To model check more than one process you compose them into a single process and model check the composite process.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also, it’s a theoretically elegant solution, and that’s good enough for me.&lt;/p&gt;&lt;h4 id=&quot;scope&quot;&gt;Scope&lt;/h4&gt;&lt;p&gt;Like I mentioned before, I have not fully implemented all of PlusCal, but here are the features I will explain how to implement in this post:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Concurrent processes&lt;/p&gt;&lt;p&gt;Concurrent processes in PlusCal are essentially NFAs where PlusCal labels correspond to NFA states and state transitions represent atomic process changes.&lt;/p&gt;&lt;p&gt;To be pedantic, a PlusCal process is an NFA where the transitions are not labeled (or, equivalently, there is only one input symbol).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Labels&lt;/p&gt;&lt;p&gt;These are breakpoints within a PlusCal process where the process may be interrupted by another process. All other actions are uninterruptible, so anything that happens between two successive labels is atomic in PlusCal.&lt;/p&gt;&lt;p&gt;Note that a label in PlusCal is not the same as a label in traditional NFA terminology. PlusCal labels correspond to NFA states.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;either&lt;/code&gt; keyword&lt;/p&gt;&lt;p&gt;PlusCal lets a process non-deterministically branch using the &lt;code&gt;either&lt;/code&gt; keyword with one nested subroutine per branch. The model checker explores and verify all possible branches.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;with&lt;/code&gt; keyword&lt;/p&gt;&lt;p&gt;A process can non-deterministically choose from zero or more values. Just like with &lt;code&gt;either&lt;/code&gt; the model checker explores and verifies all possible choices.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;await&lt;/code&gt; keyword&lt;/p&gt;&lt;p&gt;A process can wait until a condition is satisfied before proceeding using the &lt;code&gt;await&lt;/code&gt; keyword.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;while&lt;/code&gt; keyword&lt;/p&gt;&lt;p&gt;A process can run in a loop until a condition is satisfied&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;skip&lt;/code&gt; keyword&lt;/p&gt;&lt;p&gt;A process can &lt;code&gt;skip&lt;/code&gt;, which does nothing.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I am not (yet) explaining how to implement the following parts of &lt;code&gt;PlusCal&lt;/code&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Global or process-local state&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Temporal expressions&lt;/p&gt;&lt;p&gt;Note that there is a Haskell package named &lt;a href=&quot;https://github.com/awakesecurity/spectacle&quot;&gt;&lt;code&gt;spectacle&lt;/code&gt;&lt;/a&gt; for temporal logic in Haskell that a coworker of mine published, which I might be able to use for this purpose, but I haven’t attempted to incorporate that, yet.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; keyword&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; keyword&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;goto&lt;/code&gt; keyword&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The model checker&lt;/p&gt;&lt;p&gt;We need to be able to model temporal expressions in order to implement the model checker and I haven’t yet incorporated temporal expressions into my implementation.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I believe the implementation I describe in this post can be extended with those missing features (with the exception of &lt;code&gt;goto&lt;/code&gt;) and I’ve already privately implemented some of them. However, I omit them because they would interfere with the subject of this post.&lt;/p&gt;&lt;p&gt;Also, some PlusCal features we’ll get for free by virtue of embedding PlusCal in Haskell:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;(Non-temporal) Expressions&lt;/p&gt;&lt;p&gt;We get all of TLA+’s non-temporal functionality (e.g. scalars, functions, composite data structures) for free from the Haskell language and its standard library. Plus we also access new functionality (such as algebraic data types) via Haskell.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Procedures (including the &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; keyword)&lt;/p&gt;&lt;p&gt;We won’t need to explicitly implement support for these keywords. We can already define and invoke procedures in Haskell using &lt;code&gt;do&lt;/code&gt; notation, which we can overload to work with PlusCal processes.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Modules&lt;/p&gt;&lt;p&gt;We can model PlusCal modules using a combination of Haskell modules and Haskell functions.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;user-experience&quot;&gt;User experience&lt;/h4&gt;&lt;p&gt;The best way to illustrate what I have in mind is through some sample working Haskell code.&lt;/p&gt;&lt;p&gt;First, I’d like to be able to translate a PlusCal process like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;begin&lt;br /&gt;A:&lt;br /&gt;  skip;&lt;br /&gt;B:&lt;br /&gt;  either&lt;br /&gt;    C:&lt;br /&gt;      skip;&lt;br /&gt;  or&lt;br /&gt;    skip;&lt;br /&gt;  end either;&lt;br /&gt;D:&lt;br /&gt;  skip;&lt;br /&gt;end process&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… into a Haskell process like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;strings ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;strings &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        [ yield &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , skip&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The type of our &lt;code&gt;strings&lt;/code&gt; process is &lt;code&gt;Coroutine String&lt;/code&gt;, meaning that it is a &lt;code&gt;Coroutine&lt;/code&gt; whose labels are &lt;code&gt;String&lt;/code&gt;s. The reason we specify the type of the labels is because the Haskell eDSL permits labels of any type and these labels might not necessarily be strings.&lt;/p&gt;&lt;p&gt;For example, suppose PlusCal permitted integers for labels, like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;begin&lt;br /&gt;0:&lt;br /&gt;  with x \in { 1, 2, 3 } do&lt;br /&gt;    await (x % 2 = 0);&lt;br /&gt;    x: (* Suppose we can even create dynamic labels from values in scope *)&lt;br /&gt;      skip;&lt;br /&gt;end process&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, the equivalent Haskell process would be:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;ints ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ints &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; with [ &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    await (&lt;span class=&quot;fu&quot;&gt;even&lt;/span&gt; x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I mentioned in the introduction that we will be able to combine processes into a composite process, which looks like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;pairs ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;pairs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    string &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; strings&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    int    &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; ints&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (string, int)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Haskell code evaluates those three processes to canonical normal forms representing the evolution of labels for each process.&lt;/p&gt;&lt;p&gt;For example, the canonical normal form for the &lt;code&gt;strings&lt;/code&gt; process is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; [] ] , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; [] ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… representing the following NFA with these labels and transitions:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A → B → D&lt;br /&gt;     ↘ ↗&lt;br /&gt;      C&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In other words, this normal form data structure uses lists to model non-determinism (one list element per valid transition) and nesting to model sequential transitions.&lt;/p&gt;&lt;p&gt;Similarly, the canonical normal form for the &lt;code&gt;ints&lt;/code&gt; process is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; [] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… representing the following NFA with these labels and transitions:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;0&lt;br /&gt;↓&lt;br /&gt;2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, the canonical normal form for the composite &lt;code&gt;pairs&lt;/code&gt; process is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) []&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) []&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is the Cartesian product of the two smaller NFAs:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(A,0) → (B,0)   →   (D,0)&lt;br /&gt;             ↘     ↗&lt;br /&gt;              (C,0)    &lt;br /&gt;  ↓       ↓     ↓     ↓&lt;br /&gt;              (C,2)&lt;br /&gt;             ↗     ↘&lt;br /&gt;(A,2) → (B,2)   →   (D,2)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… and if we convert the Haskell composite process to the equivalent PlusCal process we would get:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;begin&lt;br /&gt;  (A,0):&lt;br /&gt;    skip;&lt;br /&gt;  either&lt;br /&gt;    (B,0):&lt;br /&gt;      either&lt;br /&gt;        (C,0):&lt;br /&gt;          either&lt;br /&gt;            (D,0):&lt;br /&gt;              skip;&lt;br /&gt;            (D,2):&lt;br /&gt;              skip;&lt;br /&gt;          or&lt;br /&gt;            (C,2):&lt;br /&gt;              skip;&lt;br /&gt;            (D,2):&lt;br /&gt;              skip;&lt;br /&gt;          end either;&lt;br /&gt;      or&lt;br /&gt;        (D,0):&lt;br /&gt;          skip;&lt;br /&gt;        (D,2):&lt;br /&gt;          skip;&lt;br /&gt;      end either;&lt;br /&gt;  or&lt;br /&gt;    (A,2):&lt;br /&gt;      skip;&lt;br /&gt;    (B,2):&lt;br /&gt;      skip;&lt;br /&gt;    either&lt;br /&gt;      (C,2):&lt;br /&gt;        skip;&lt;br /&gt;      (D,2):&lt;br /&gt;        skip;&lt;br /&gt;    or&lt;br /&gt;      (D,2):&lt;br /&gt;        skip;&lt;br /&gt;    end either;&lt;br /&gt;  end either;&lt;br /&gt;end process&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This composite process is indistinguishable from the two input processes, meaning that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;This composite process is interruptible whenever one of the two original input processes is interruptible&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;This composite process performs an atomic state transition whenever one of the two input processes performs a state transition&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The current label of the composite process is a function of the current label of the two original input processes&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;the-process-type&quot;&gt;The &lt;code&gt;Process&lt;/code&gt; type&lt;/h4&gt;&lt;p&gt;Now I’ll explain how to implement this subset of PlusCal as an eDSL in Haskell.&lt;/p&gt;&lt;p&gt;First, we begin from the following two mutually-recursive types which represent NFAs where there are zero more labeled states but the transitions are unlabeled:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Step&lt;/span&gt; label result]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Step&lt;/span&gt; label result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result) &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Process&lt;/code&gt; type handles the non-deterministic transitions for our NFA: a &lt;code&gt;Process&lt;/code&gt; stores zero or more valid state transitions (represented as a list of valid next &lt;code&gt;Step&lt;/code&gt;s).&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Step&lt;/code&gt; type handles the labeled states for our NFA: a &lt;code&gt;Step&lt;/code&gt; can either &lt;code&gt;Yield&lt;/code&gt; or be &lt;code&gt;Done&lt;/code&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A step that &lt;code&gt;Yield&lt;/code&gt;s includes the label for the current state and the remainder of the &lt;code&gt;Process&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A step that is &lt;code&gt;Done&lt;/code&gt; includes a &lt;code&gt;result&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This &lt;code&gt;result&lt;/code&gt; is used to thread data bound by one step to subsequent steps. For example, this is how our previous example was able to pass the &lt;code&gt;x&lt;/code&gt; bound by &lt;code&gt;with&lt;/code&gt; to the subsequent &lt;code&gt;yield&lt;/code&gt; command:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ints &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; with [ &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    …&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We’ll add support for rendering the data structures for debugging purposes:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DerivingStrategies         #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE UndecidableInstances       #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;GHC.Exts&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsList&lt;/span&gt;(..))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Step&lt;/span&gt; label result]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsList&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Step&lt;/span&gt; label result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result) &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I make use of a small trick here where I derive &lt;code&gt;IsList&lt;/code&gt; for the &lt;code&gt;Process&lt;/code&gt; type This lets can omit the &lt;code&gt;Choice&lt;/code&gt; constructor when creating or rendering values of type &lt;code&gt;Process&lt;/code&gt;. That simplifies Haskell code like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; []) ])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; [])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            ])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     ])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… to this more ergonomic syntax if we enable the &lt;code&gt;OverloadedLists&lt;/code&gt; extension:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; [] ] , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; [] ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;do-notation&quot;&gt;&lt;code&gt;do&lt;/code&gt; notation&lt;/h4&gt;&lt;p&gt;However, we don’t expect users to author these data structures by hand. Instead, we can use Haskell’s support for overloading &lt;code&gt;do&lt;/code&gt; notation so that users can author &lt;code&gt;Process&lt;/code&gt; values using subroutine-like syntax. In order to do this we need to implement the &lt;code&gt;Monad&lt;/code&gt; class for &lt;code&gt;Process&lt;/code&gt;, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE BlockArguments #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Monad&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ps &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        p &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; ps&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; p &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label rest &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label (rest &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; possibilities &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                possibilities&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;ap&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;liftM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and we also need to provide the following utility function:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;yield ::&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;yield label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ())]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Equipped with that &lt;code&gt;Monad&lt;/code&gt; instance we can now author code like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and that superficially imperative code actually evaluates to a pure data structure:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb21-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; () ] ] ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason that works is because any type that implements &lt;code&gt;Monad&lt;/code&gt; can be sequenced using &lt;code&gt;do&lt;/code&gt; notation, because &lt;code&gt;do&lt;/code&gt; notation is syntactic sugar for the &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; operator we defined in our &lt;code&gt;Monad&lt;/code&gt; instance. To learn more, read:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/do_notation&quot;&gt;Haskell wikibook - &lt;code&gt;do&lt;/code&gt; notation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We can also now implement &lt;code&gt;skip&lt;/code&gt;, which is just a synonym for &lt;code&gt;pure ()&lt;/code&gt; (i.e. “do nothing”):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb22-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;skip ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb22-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb22-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;skip &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike PlusCal, we don’t need to use &lt;code&gt;skip&lt;/code&gt; most of the time. In particular, we don’t need to add a skip in between two labels if nothing happens. For example, suppose we try to translate this PlusCal code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;1:&lt;br /&gt;  skip;&lt;br /&gt;2:&lt;br /&gt;  skip;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… to Haskell:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb24&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb24-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb24-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb24-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb24-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb24-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb24-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb24-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb24-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    skip&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb24-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb24-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb24-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb24-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    skip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don’t actually need those &lt;code&gt;skip&lt;/code&gt;s. The following code without &lt;code&gt;skip&lt;/code&gt;s is the exact same &lt;code&gt;Process&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb25&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb25-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb25-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb25-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb25-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb25-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb25-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb25-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb25-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both ways of writing the &lt;code&gt;Process&lt;/code&gt; produce the same result, which is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb26&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb26-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb26-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; () ] ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we can implement the &lt;code&gt;while&lt;/code&gt; keyword as an ordinary Haskell function:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb27&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb27-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb27-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;while ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label () &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb27-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb27-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;while condition body &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb27-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb27-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    bool &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; condition&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb27-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb27-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;when bool &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb27-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb27-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        body&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb27-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb27-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        while condition body&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, there’s nothing really PlusCal-specific about this utility; this functionality already exists as &lt;code&gt;Control.Monad.Loops.whileM_&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&quot;alternation&quot;&gt;Alternation&lt;/h4&gt;&lt;p&gt;So far we can only sequence commands, but we’d also like to be able to branch non-deterministically. Fortunately, Haskell has a standard API for doing that, too, which is the &lt;code&gt;Alternative&lt;/code&gt; class. We can implement &lt;code&gt;Alternative&lt;/code&gt; for our &lt;code&gt;Process&lt;/code&gt; type like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb28&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb28-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb28-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Applicative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Alternative&lt;/span&gt;(..))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb28-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb28-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb28-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb28-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Alternative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb28-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb28-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    empty &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb28-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb28-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb28-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb28-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; stepsL &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; stepsR &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (stepsL &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; stepsR)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’ll also define &lt;code&gt;end&lt;/code&gt; to be a synonym for &lt;code&gt;empty&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb29&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb29-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb29-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;end ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb29-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb29-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;end &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; empty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, if you &lt;code&gt;end&lt;/code&gt; a &lt;code&gt;Process&lt;/code&gt; there are no more valid transitions.&lt;/p&gt;&lt;p&gt;When we implement this &lt;code&gt;Alternative&lt;/code&gt; instance we can make use of several general-purpose utilities that work for any type that implements &lt;code&gt;Alternative&lt;/code&gt;. One such utility is &lt;a href=&quot;https://hackage.haskell.org/package/base-4.16.1.0/docs/Data-Foldable.html#v:asum&quot;&gt;&lt;code&gt;Data.Foldable.asum&lt;/code&gt;&lt;/a&gt;, which behaves exactly the same as PlusCal’s &lt;code&gt;either&lt;/code&gt; keyword:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb30&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb30-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb30-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Prelude&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;hiding&lt;/span&gt; (either)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb30-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb30-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb30-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb30-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Foldable&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb30-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb30-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb30-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb30-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb30-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb30-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;asum&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could also write the implementation of &lt;code&gt;either&lt;/code&gt; by hand if we wanted to, which would be:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb31&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb31-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb31-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt; (process &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; processes) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; process &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt; processes&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb31-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb31-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt;            []         &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; empty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is exact same behavior as using &lt;code&gt;asum&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In other words, given a list of &lt;code&gt;Process&lt;/code&gt;es, we can try all of them in parallel using &lt;code&gt;either&lt;/code&gt;. All that &lt;code&gt;either&lt;/code&gt; does is concatenate the lists of valid &lt;code&gt;Step&lt;/code&gt;s for each of the input &lt;code&gt;Process&lt;/code&gt;es.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://hackage.haskell.org/package/base-4.16.1.0/docs/Control-Monad.html#v:guard&quot;&gt;&lt;code&gt;Control.Monad.guard&lt;/code&gt;&lt;/a&gt; is another utility we get for free by virtue of implementing &lt;code&gt;Alternative&lt;/code&gt; and &lt;code&gt;guard&lt;/code&gt; behaves in the exact same way as PlusCal’s &lt;code&gt;await&lt;/code&gt; keyword:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb32&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb32-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb32-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;await ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb32-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb32-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;await &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;guard&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could also write the implementation of &lt;code&gt;await&lt;/code&gt; by hand if we wanted to, which would be:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb33&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb33-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb33-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;await &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; skip&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb33-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb33-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;await &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is the same behavior as using &lt;code&gt;guard&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Finally, we can implement &lt;code&gt;with&lt;/code&gt; in terms of &lt;code&gt;either&lt;/code&gt;, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb34&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb34-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb34-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;with ::&lt;/span&gt; [result] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb34-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb34-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;with results &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; results)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, you can implement &lt;code&gt;with&lt;/code&gt; as if it were an &lt;code&gt;either&lt;/code&gt; statement with one branch per value that you want to bind. However, you have to promote each value to a trivial &lt;code&gt;Process&lt;/code&gt; (using &lt;code&gt;pure&lt;/code&gt;) in order to combine them using &lt;code&gt;either&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&quot;cartesian-product-of-nfas&quot;&gt;Cartesian product of NFAs&lt;/h4&gt;&lt;p&gt;In the introduction I noted that we can model multiple processes in PlusCal by computing the Cartesian product of their NFAs. This section explains that in more detail, first as prose and then followed by Haskell code.&lt;/p&gt;&lt;p&gt;Informally, the Cartesian product of zero or more “input” NFAs creates a composite “output” NFA where:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The set of possible states for the output NFA is the Cartesian product of the set of possible states for each input NFA&lt;/p&gt;&lt;p&gt;In other words, if we have two input NFAs and the first NFA permits the following states:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb35&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb35-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb35-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ &lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and the second NFA permits the following states:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb36&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb36-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb36-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then the Cartesian product of those two sets of states is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb37&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb37-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb37-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ (&lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is our composite set of possible states.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The starting state for our output NFA is the Cartesian product of the starting states for each input NFA&lt;/p&gt;&lt;p&gt;In other words, if our first NFA has a starting state of:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb38&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb38-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb38-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and our second has a starting state of:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb39&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb39-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb39-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then the Cartesian product of those two starting states is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb40&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb40-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb40-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is our composite starting state.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The set of valid transitions for any output state is the union of the set of valid transitions for the input sub-states&lt;/p&gt;&lt;p&gt;In other words, if the state &lt;code&gt;A&lt;/code&gt; can transition to either state &lt;code&gt;B&lt;/code&gt; or &lt;code&gt;C&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb41&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb41-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb41-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ &lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and the state &lt;code&gt;0&lt;/code&gt; can transition to only state &lt;code&gt;2&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb42&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb42-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb42-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then the state &lt;code&gt;(A,0)&lt;/code&gt; can transition to any of these states:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb43&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb43-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb43-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ (&lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and this is because:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If state &lt;code&gt;A&lt;/code&gt; transitions to state &lt;code&gt;B&lt;/code&gt;, then our composite state &lt;code&gt;(A,0)&lt;/code&gt; transitions to state &lt;code&gt;(B,0)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If state &lt;code&gt;A&lt;/code&gt; transitions to state &lt;code&gt;C&lt;/code&gt;, then our composite state &lt;code&gt;(B,0)&lt;/code&gt; transitions to state &lt;code&gt;(C,0)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If state &lt;code&gt;0&lt;/code&gt; transitions to state &lt;code&gt;2&lt;/code&gt;, then our composite state &lt;code&gt;(A,0)&lt;/code&gt; transitions to state &lt;code&gt;(A,2)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;applicative-as-cartesian-product&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt; as Cartesian product&lt;/h4&gt;&lt;p&gt;Haskell’s standard library defines the following &lt;a href=&quot;https://hackage.haskell.org/package/base-4.16.1.0/docs/Control-Applicative.html&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt; class&lt;/a&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb44&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb44-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb44-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb44-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb44-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    pure ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb44-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb44-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb44-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb44-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    (&amp;lt;*&amp;gt;) ::&lt;/span&gt; f (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;…and you can think of Haskell’s &lt;code&gt;Applicative&lt;/code&gt; class as (essentially) an interface for arbitrary N-ary Cartesian products, meaning that any type that implements an &lt;code&gt;Applicative&lt;/code&gt; instance gets the following family of functions for free:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb45&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb45-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- The 0-ary Cartesian product&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;join0 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;join0 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- The unary Cartesian product&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;join1 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;join1 as &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; as&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- The binary Cartesian product&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;join2 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f (a, b)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;join2 as bs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (,) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; as &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; bs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- The trinary Cartesian product&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;join3 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f c &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f (a, b, c)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;join3 as bs cs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (,,) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; as &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; bs &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; cs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb45-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb45-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and so on. I deliberately implemented some of those functions in a weird way to illustrate the overall pattern.&lt;/p&gt;&lt;p&gt;This means that if we implement &lt;code&gt;Applicative&lt;/code&gt; for our NFA type then we can use that interface to create arbitrary N-ary Cartesian products of NFAs.&lt;/p&gt;&lt;h4 id=&quot;the-coroutine-type&quot;&gt;The &lt;code&gt;Coroutine&lt;/code&gt; type&lt;/h4&gt;&lt;p&gt;The &lt;code&gt;Process&lt;/code&gt; type does implement an &lt;code&gt;Applicative&lt;/code&gt; instance, but this is a different (more boring) Cartesian product and not the one we’re interested in. In fact, the &lt;code&gt;Process&lt;/code&gt; type &lt;em&gt;cannot&lt;/em&gt; implement the instance we’re interested in (the Cartesian product of NFAs), because our &lt;code&gt;Process&lt;/code&gt; type is not a complete NFA: our &lt;code&gt;Process&lt;/code&gt; type is missing a starting state.&lt;/p&gt;&lt;p&gt;This is what the following &lt;code&gt;Coroutine&lt;/code&gt; type fixes by extending our &lt;code&gt;Process&lt;/code&gt; type with an extra field for the starting state:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb46&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb46-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb46-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Void&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb46-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb46-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb46-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb46-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb46-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb46-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also constrain the &lt;code&gt;Process&lt;/code&gt; inside of a &lt;code&gt;Coroutine&lt;/code&gt; to return &lt;code&gt;Void&lt;/code&gt; (the impossible/uninhabited type). Any &lt;code&gt;Process&lt;/code&gt; that ends with no valid transitions will satisfy this type, such as a process that concludes with an &lt;code&gt;end&lt;/code&gt; or &lt;code&gt;empty&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb47&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb47-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb47-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb47-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb47-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb47-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb47-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb47-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb47-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb47-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb47-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we add in the starting state we can implement &lt;code&gt;Applicative&lt;/code&gt; for our &lt;code&gt;Coroutine&lt;/code&gt; type, which is essentially the same thing as implementing the Cartesian product of NFAs:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb48&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb48-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- The empty (0-ary) Cartesian product has only a single valid state, which&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- is also the starting state, and no possible transitions.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- The (sort of) binary Cartesian product …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;-- … of a first NFA …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        f&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0F (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; fs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;-- … and a second NFA …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0X (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; xs)) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- … has a starting state which is (sort of) the product of the&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- first and second starting states&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (label0F label0X)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- … and the set of valid transitions is the union of valid&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- transitions for the first and second NFAs&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptF fs &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- If the first NFA transitions, then we don't disturb the state&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- of the second NFA&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptF (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptF (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelF restF) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelF restF &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- If the second NFA transitions, then we don't disturb the state&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;-- of the first NFA&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-31&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-31&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb48-32&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb48-32&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I use “sort of” in the comments to indicate that &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; is not actually the binary Cartesian product, but it’s spiritually similar enough.&lt;/p&gt;&lt;p&gt;Moreover, we can reassure ourselves that this &lt;code&gt;Applicative&lt;/code&gt; instance is well-behaved because this instance satisfies &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Applicative_functors#Applicative_functor_laws&quot;&gt;the &lt;code&gt;Applicative&lt;/code&gt; laws&lt;/a&gt;. See &lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#appendix-d---proof-of-the-applicative-laws&quot;&gt;Appendix D&lt;/a&gt; for the proof of all four laws for the above instance.&lt;/p&gt;&lt;h3 id=&quot;applicativedo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Haskell is not the only language that defines an &lt;code&gt;Applicative&lt;/code&gt; abstraction. For example, the &lt;code&gt;Cats&lt;/code&gt; package in the Scala ecosystem also defines &lt;a href=&quot;https://typelevel.org/cats/typeclasses/applicative.html&quot;&gt;an &lt;code&gt;Applicative&lt;/code&gt; abstraction&lt;/a&gt;, too.&lt;/p&gt;&lt;p&gt;However, the Haskell ecosystem has one edge over other languages (including Scala), which is language support for types that only implement &lt;code&gt;Applicative&lt;/code&gt; and not &lt;code&gt;Monad&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Specifically, Haskell has an &lt;a href=&quot;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/applicative_do.html&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt; extension&lt;/a&gt;, which we can use to combine values for any &lt;code&gt;Applicative&lt;/code&gt; type using &lt;code&gt;do&lt;/code&gt; notation. In fact, this is why the original example using &lt;code&gt;pairs&lt;/code&gt; worked, because of that extension:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb49&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb49-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb49-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE ApplicativeDo #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb49-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb49-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb49-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb49-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;pairs ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb49-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb49-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;pairs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb49-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb49-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    string &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; strings&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb49-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb49-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    int    &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; ints&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb49-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb49-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (string, int)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we enable that extension the Haskell compiler desugars that &lt;code&gt;do&lt;/code&gt; notation to something like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb50&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb50-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb50-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;pairs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; strings &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; ints&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb50-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb50-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb50-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb50-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    f string int &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (string, int)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and in my opinion the version using &lt;code&gt;do&lt;/code&gt; notation is more readable and ergonomic.&lt;/p&gt;&lt;p&gt;Normally &lt;code&gt;do&lt;/code&gt; notation only works on types that implement &lt;code&gt;Monad&lt;/code&gt;, but when we enable the &lt;code&gt;ApplicativeDo&lt;/code&gt; extension then a subset of &lt;code&gt;do&lt;/code&gt; notation works for types that implement &lt;code&gt;Applicative&lt;/code&gt; (which is superset of the types that implement &lt;code&gt;Monad&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Our &lt;code&gt;Coroutine&lt;/code&gt; type is one such type that benefits from this &lt;code&gt;ApplicativeDo&lt;/code&gt; extension. The &lt;code&gt;Coroutine&lt;/code&gt; type can implement &lt;code&gt;Applicative&lt;/code&gt;, but not &lt;code&gt;Monad&lt;/code&gt;, so the only way we can use &lt;code&gt;do&lt;/code&gt; notation for &lt;code&gt;Coroutine&lt;/code&gt;s is if we enable &lt;code&gt;ApplicativeDo&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;ApplicativeDo&lt;/code&gt; extension also plays very nicely with Haskell’s support for &lt;a href=&quot;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/record_puns.html&quot;&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/record_wildcards.html&quot;&gt;&lt;code&gt;RecordWildCards&lt;/code&gt;&lt;/a&gt;. For example, instead of packing the labels into a tuple we could instead slurp them into a record as fields of the same name:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb51&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb51-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Status&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; string ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; int    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;pairs ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Status&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;pairs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    string &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; strings&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    int    &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; ints&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb51-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb51-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Status&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and this scales really well to a large number of &lt;code&gt;Coroutine&lt;/code&gt;s.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;I’ve included the complete implementation from this post in &lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#appendix-a---complete-implementation&quot;&gt;Appendix A&lt;/a&gt; if you want to test this code out on your own. Once I’m done with the complete embedding of PlusCal in Haskell I’ll publish something a bit more polished.&lt;/p&gt;&lt;p&gt;If you enjoyed this post, you’ll probably also enjoy this paper:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.staff.city.ac.uk/~ross/papers/Applicative.pdf&quot;&gt;Functional Pearl - Applicative programming with effects&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… which was the original paper that introduced the &lt;code&gt;Applicative&lt;/code&gt; abstraction.&lt;/p&gt;&lt;p&gt;I also left some “bonus commentary” in &lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#appendix-b---free-monads&quot;&gt;Appendix B&lt;/a&gt; and &lt;a href=&quot;https://www.haskellforall.com/feeds/posts/appendix-c---monoid-semigroup&quot;&gt;Appendix C&lt;/a&gt; for a few digressions that didn’t quite make the cut for the main body of this post.&lt;/p&gt;&lt;h4 id=&quot;appendix-a---complete-implementation&quot;&gt;Appendix A - Complete implementation&lt;/h4&gt;&lt;p&gt;The following module only depends on the &lt;code&gt;pretty-show&lt;/code&gt; package (and not even that if you delete the &lt;code&gt;main&lt;/code&gt; subroutine).&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb52&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb52-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE ApplicativeDo              #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE BlockArguments             #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DerivingStrategies         #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE UndecidableInstances       #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;GHC.Exts&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsList&lt;/span&gt;(..))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Applicative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Alternative&lt;/span&gt;(..), liftA2)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Void&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Prelude&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;hiding&lt;/span&gt; (either)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Applicative&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Monad&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Foldable&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Show.Pretty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Pretty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Step&lt;/span&gt; label result]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsList&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Step&lt;/span&gt; label result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result) &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;liftM&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;ap&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-31&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-31&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-32&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-32&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ps &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-33&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-33&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        p &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; ps&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-34&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-34&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; p &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-35&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-35&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label rest &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-36&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-36&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label (rest &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-37&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-37&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-38&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-38&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; possibilities &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-39&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-39&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                possibilities&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-40&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-40&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-41&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-41&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-42&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-42&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; liftA2 (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-43&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-43&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-44&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-44&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-45&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-45&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-46&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-46&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-47&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-47&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Alternative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-48&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-48&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    empty &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-49&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-49&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-50&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-50&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; stepsL &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; stepsR &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (stepsL &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; stepsR)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-51&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-51&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-52&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-52&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-53&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-53&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-54&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-54&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-55&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-55&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-56&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-56&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;liftA&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-57&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-57&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-58&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-58&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-59&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-59&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-60&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-60&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-61&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-61&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-62&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-62&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        f&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0F (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; fs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-63&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-63&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0X (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; xs)) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-64&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-64&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0F label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptF fs &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-65&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-65&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-66&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-66&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptF (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-67&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-67&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptF (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelF restF) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-68&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-68&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-69&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-69&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelF restF &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-70&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-70&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-71&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-71&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-72&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-72&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-73&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-73&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-74&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-74&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-75&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-75&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-76&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-76&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-77&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-77&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; liftA2 (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-78&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-78&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-79&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-79&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; label) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-80&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-80&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-81&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-81&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-82&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-82&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;yield ::&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-83&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-83&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;yield label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; label (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ())]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-84&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-84&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-85&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-85&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-86&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-86&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;asum&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-87&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-87&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-88&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-88&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;await ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-89&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-89&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;await &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;guard&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-90&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-90&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-91&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-91&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;with ::&lt;/span&gt; [result] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-92&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-92&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;with results &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; results)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-93&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-93&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-94&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-94&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;end ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-95&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-95&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;end &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-96&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-96&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-97&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-97&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;skip ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-98&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-98&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;skip &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-99&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-99&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-100&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-100&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;strings ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-101&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-101&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;strings &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-102&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-102&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-103&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-103&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-104&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-104&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        [ yield &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-105&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-105&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , skip&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-106&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-106&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-107&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-107&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-108&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-108&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    end&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-109&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-109&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-110&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-110&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;ints ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-111&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-111&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ints &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-112&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-112&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; with [ &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-113&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-113&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    await (&lt;span class=&quot;fu&quot;&gt;even&lt;/span&gt; x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-114&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-114&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    yield x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-115&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-115&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    end&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-116&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-116&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-117&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-117&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;pairs ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coroutine&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-118&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-118&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;pairs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-119&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-119&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    string &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; strings&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-120&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-120&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    int    &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; ints&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-121&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-121&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (string, int)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-122&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-122&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-123&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-123&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-124&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-124&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-125&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-125&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    Pretty.pPrint strings&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-126&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-126&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    Pretty.pPrint ints&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb52-127&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb52-127&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    Pretty.pPrint pairs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run that it will print:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb53&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb53-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; [] ] , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; [] ] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  ( &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ( &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ( &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) []&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ( &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ( &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [ &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) [] ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          , &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; ( &lt;span class=&quot;st&quot;&gt;&quot;D&quot;&lt;/span&gt; , &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ) []&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb53-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb53-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;appendix-b---free-monads&quot;&gt;Appendix B - Free Monads&lt;/h4&gt;&lt;p&gt;The implementation for &lt;code&gt;Process&lt;/code&gt; is actually a special case of a &lt;a href=&quot;https://hackage.haskell.org/package/free-5.1.7/docs/Control-Monad-Trans-Free.html&quot;&gt;free monad transformer&lt;/a&gt;, except that I’ve hand-written the types and instances so that the types are easier to inspect. However, if we really wanted to code golf all of this we could have replaced all of that code with just these three lines:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb54&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb54-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb54-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Monad.Trans.Free&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;FreeT&lt;/span&gt;, liftF)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb54-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb54-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb54-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb54-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;FreeT&lt;/span&gt; ((,) label) []&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb54-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb54-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb54-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb54-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;yield label &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; liftF (label, ())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and that would have behaved the exact same (including the same &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;Alternative&lt;/code&gt; instances). You can read that as essentially saying: “A &lt;code&gt;Process&lt;/code&gt; is a subroutine that alternates between emitting a &lt;code&gt;label&lt;/code&gt; (i.e. &lt;code&gt;(,) label&lt;/code&gt;) and branching non-deterministically (i.e. &lt;code&gt;[]&lt;/code&gt;)”.&lt;/p&gt;&lt;h4 id=&quot;appendix-c---monoid-semigroup&quot;&gt;Appendix C - &lt;code&gt;Monoid&lt;/code&gt; / &lt;code&gt;Semigroup&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;If we want to be extra clever, we can implement &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances for &lt;code&gt;Process&lt;/code&gt; as suggested in this post:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.haskellforall.com/2022/03/applicatives-should-usually-implement.html&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt;s should usually implement &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… which we would do like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb55&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb55-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb55-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Applicative&lt;/span&gt; (liftA2)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb55-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb55-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb55-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb55-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb55-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb55-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; liftA2 (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb55-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb55-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb55-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb55-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Process&lt;/span&gt; label result) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb55-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb55-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and then we can simplify &lt;code&gt;skip&lt;/code&gt; a tiny bit further to:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb56&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb56-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb56-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;skip &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;appendix-d---proof-of-the-applicative-laws&quot;&gt;Appendix D - Proof of the &lt;code&gt;Applicative&lt;/code&gt; laws&lt;/h4&gt;&lt;p&gt;The first &lt;code&gt;Applicative&lt;/code&gt; law requires that:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb57&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb57-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb57-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Proof:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb58&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb58-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure label = Begin label empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Define:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- v = Begin label0X (Choice xs)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0X (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; xs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptF empty &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptF (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptF (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelF restF) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelF restF &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0X (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; xs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f empty = empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (empty &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-31&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-31&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-32&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-32&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-33&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-33&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-34&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-34&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- empty &amp;lt;|&amp;gt; xs = xs&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-35&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-35&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-36&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-36&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-37&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-37&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-38&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-38&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-39&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-39&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-40&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-40&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-41&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-41&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-42&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-42&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-43&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-43&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-44&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-44&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure label = Begin label empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-45&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-45&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-46&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-46&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-47&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-47&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-48&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-48&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-49&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-49&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-50&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-50&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-51&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-51&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-52&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-52&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Induction: pure id &amp;lt;*&amp;gt; v = v&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-53&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-53&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-54&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-54&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-55&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-55&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-56&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-56&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-57&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-57&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-58&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-58&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-59&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-59&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-60&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-60&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-61&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-61&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-62&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-62&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-63&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-63&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-64&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-64&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-65&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-65&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-66&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-66&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-67&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-67&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-68&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-68&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-69&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-69&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-70&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-70&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-71&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-71&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Functor identity law:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-72&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-72&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-73&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-73&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap id = id&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-74&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-74&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; label0X) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; xs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-75&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-75&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-76&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-76&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `id`:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-77&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-77&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-78&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-78&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- id x = x&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-79&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-79&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0X (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; xs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-80&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-80&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-81&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-81&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `v`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-82&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-82&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-83&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-83&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- v = Begin label0X (Choice xs)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb58-84&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb58-84&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second &lt;code&gt;Applicative&lt;/code&gt; law requires that:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb59&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb59-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb59-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; w &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (v &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; w)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Proof:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb60&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb60-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; w&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Define:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u = Begin label0U (Choice us)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- v = Begin label0V (Choice vs)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- w = Begin label0W (Choice ws)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) label0U) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptF empty &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptF (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptF (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelF restF) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelF restF &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-31&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-31&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-32&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-32&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-33&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-33&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-34&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-34&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f empty = empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-35&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-35&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) label0U) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-36&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-36&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-37&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-37&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-38&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-38&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-39&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-39&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-40&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-40&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-41&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-41&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-42&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-42&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-43&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-43&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-44&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-44&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-45&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-45&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; label0V)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-46&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-46&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptFU (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us) &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-47&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-47&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-48&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-48&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-49&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-49&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-50&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-50&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-51&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-51&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-52&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-52&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-53&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-53&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-54&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-54&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-55&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-55&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-56&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-56&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-57&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-57&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-58&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-58&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-59&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-59&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-60&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-60&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-61&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-61&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-62&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-62&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-63&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-63&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-64&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-64&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) label0U) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-65&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-65&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-66&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-66&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-67&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-67&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-68&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-68&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; label0V)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-69&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-69&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptFU (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us) &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-70&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-70&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-71&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-71&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-72&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-72&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-73&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-73&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-74&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-74&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-75&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-75&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-76&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-76&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-77&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-77&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-78&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-78&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-79&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-79&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-80&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-80&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-81&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-81&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-82&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-82&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-83&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-83&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-84&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-84&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-85&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-85&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-86&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-86&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-87&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-87&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-88&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-88&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-89&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-89&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-90&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-90&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-91&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-91&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (fmap g x) = fmap (f . g) x&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-92&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-92&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; label0V)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-93&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-93&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (adaptFU &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; adaptU) us &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-94&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-94&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-95&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-95&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-96&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-96&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-97&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-97&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-98&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-98&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-99&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-99&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-100&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-100&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-101&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-101&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-102&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-102&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFU restFU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-103&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-103&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-104&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-104&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-105&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-105&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFU restFU &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-106&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-106&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-107&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-107&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-108&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-108&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-109&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-109&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-110&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-110&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-111&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-111&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-112&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-112&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-113&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-113&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-114&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-114&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-115&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-115&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Consolidate (adaptFU . adaptU)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-116&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-116&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; label0V) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-117&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-117&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-118&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-118&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-119&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-119&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-120&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-120&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-121&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-121&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-122&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-122&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-123&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-123&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-124&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-124&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-125&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-125&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-126&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-126&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-127&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-127&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-128&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-128&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-129&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-129&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-130&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-130&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-131&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-131&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-132&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-132&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-133&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-133&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-134&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-134&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-135&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-135&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-136&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-136&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-137&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-137&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-138&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-138&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptFUV (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-139&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-139&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-140&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-140&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-141&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-141&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-142&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-142&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-143&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-143&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-144&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-144&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-145&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-145&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-146&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-146&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-147&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-147&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-148&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-148&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-149&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-149&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-150&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-150&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-151&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-151&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-152&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-152&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-153&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-153&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-154&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-154&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-155&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-155&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-156&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-156&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-157&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-157&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-158&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-158&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-159&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-159&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-160&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-160&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-161&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-161&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-162&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-162&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-163&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-163&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-164&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-164&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-165&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-165&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-166&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-166&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-167&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-167&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-168&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-168&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-169&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-169&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-170&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-170&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; label0V)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-171&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-171&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-172&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-172&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-173&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-173&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-174&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-174&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-175&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-175&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-176&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-176&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-177&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-177&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptFUV (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-178&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-178&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-179&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-179&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-180&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-180&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-181&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-181&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-182&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-182&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-183&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-183&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-184&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-184&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-185&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-185&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-186&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-186&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-187&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-187&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-188&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-188&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-189&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-189&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-190&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-190&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-191&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-191&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-192&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-192&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-193&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-193&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-194&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-194&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-195&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-195&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-196&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-196&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-197&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-197&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-198&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-198&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-199&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-199&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-200&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-200&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-201&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-201&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-202&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-202&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-203&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-203&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-204&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-204&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-205&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-205&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-206&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-206&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-207&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-207&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-208&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-208&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-209&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-209&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-210&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-210&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-211&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-211&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-212&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-212&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-213&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-213&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-214&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-214&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (x &amp;lt;|&amp;gt; y) = fmap f x &amp;lt;|&amp;gt; fmap f y&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-215&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-215&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-216&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-216&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-217&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-217&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptFUV (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-218&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-218&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptFUV (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-219&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-219&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-220&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-220&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-221&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-221&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-222&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-222&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-223&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-223&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-224&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-224&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-225&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-225&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-226&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-226&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-227&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-227&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-228&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-228&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-229&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-229&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-230&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-230&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-231&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-231&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-232&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-232&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-233&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-233&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-234&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-234&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-235&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-235&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-236&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-236&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-237&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-237&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-238&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-238&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-239&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-239&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-240&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-240&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-241&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-241&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-242&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-242&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-243&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-243&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-244&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-244&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-245&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-245&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-246&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-246&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-247&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-247&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-248&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-248&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-249&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-249&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-250&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-250&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-251&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-251&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-252&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-252&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-253&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-253&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-254&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-254&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-255&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-255&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (fmap g x) = fmap (f . g) x&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-256&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-256&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-257&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-257&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-258&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-258&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (adaptFUV &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; adaptU) us&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-259&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-259&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (adaptFUV &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; adaptV) vs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-260&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-260&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-261&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-261&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-262&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-262&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-263&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-263&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-264&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-264&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-265&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-265&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-266&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-266&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-267&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-267&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-268&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-268&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-269&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-269&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-270&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-270&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-271&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-271&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-272&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-272&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-273&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-273&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-274&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-274&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-275&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-275&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-276&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-276&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-277&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-277&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-278&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-278&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-279&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-279&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-280&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-280&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-281&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-281&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptFUV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-282&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-282&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-283&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-283&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-284&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-284&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-285&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-285&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-286&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-286&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-287&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-287&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-288&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-288&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-289&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-289&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-290&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-290&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-291&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-291&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-292&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-292&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-293&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-293&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-294&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-294&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-295&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-295&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-296&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-296&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Consolidate (adaptFUV . adaptU) and (adaptFUV . adaptV)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-297&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-297&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-298&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-298&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-299&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-299&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-300&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-300&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-301&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-301&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-302&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-302&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-303&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-303&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-304&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-304&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-305&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-305&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-306&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-306&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-307&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-307&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-308&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-308&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-309&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-309&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-310&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-310&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-311&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-311&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-312&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-312&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-313&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-313&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-314&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-314&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-315&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-315&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-316&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-316&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-317&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-317&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-318&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-318&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-319&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-319&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-320&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-320&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-321&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-321&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-322&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-322&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-323&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-323&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-324&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-324&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-325&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-325&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-326&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-326&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-327&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-327&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-328&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-328&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-329&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-329&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-330&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-330&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-331&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-331&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-332&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-332&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-333&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-333&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-334&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-334&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure label = Begin label empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-335&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-335&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-336&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-336&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-337&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-337&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-338&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-338&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-339&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-339&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-340&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-340&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-341&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-341&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-342&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-342&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-343&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-343&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-344&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-344&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-345&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-345&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-346&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-346&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-347&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-347&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-348&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-348&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-349&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-349&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-350&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-350&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-351&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-351&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-352&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-352&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-353&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-353&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-354&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-354&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-355&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-355&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-356&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-356&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-357&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-357&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-358&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-358&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-359&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-359&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-360&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-360&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-361&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-361&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-362&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-362&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-363&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-363&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-364&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-364&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-365&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-365&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-366&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-366&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-367&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-367&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-368&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-368&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-369&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-369&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-370&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-370&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Induction: pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w = u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-371&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-371&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-372&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-372&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-373&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-373&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-374&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-374&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-375&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-375&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-376&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-376&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-377&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-377&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-378&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-378&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-379&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-379&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-380&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-380&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-381&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-381&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-382&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-382&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-383&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-383&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-384&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-384&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (   &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-385&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-385&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-386&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-386&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-387&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-387&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-388&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-388&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-389&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-389&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUV restFUV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-390&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-390&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-391&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-391&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUV restFUV &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-392&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-392&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-393&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-393&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (   &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-394&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-394&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-395&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-395&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-396&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-396&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-397&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-397&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-398&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-398&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFUVW restFUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-399&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-399&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-400&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-400&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFUVW restFUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-401&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-401&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-402&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-402&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (   &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-403&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-403&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-404&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-404&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-405&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-405&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-406&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-406&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Unfactor up `adaptV` into `adaptVW . adaptV` and `adaptW` into&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-407&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-407&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- `adaptVW . adaptW`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-408&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-408&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-409&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-409&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-410&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-410&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-411&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-411&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptVW (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-412&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-412&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptVW (adaptW ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-413&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-413&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-414&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-414&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-415&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-415&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-416&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-416&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-417&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-417&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUVW restUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-418&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-418&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-419&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-419&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelUVW restUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-420&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-420&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-421&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-421&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (   &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-422&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-422&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-423&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-423&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-424&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-424&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-425&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-425&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptVW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-426&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-426&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptVW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUVW restUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-427&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-427&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-428&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-428&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelUVW restUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-429&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-429&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-430&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-430&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-431&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-431&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-432&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-432&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-433&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-433&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-434&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-434&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-435&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-435&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-436&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-436&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-437&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-437&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-438&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-438&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-439&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-439&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-440&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-440&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; lableVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-441&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-441&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-442&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-442&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (x &amp;lt;|&amp;gt; y) = fmap f x &amp;lt;|&amp;gt; fmap f y&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-443&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-443&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-444&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-444&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-445&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-445&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-446&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-446&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptVW (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-447&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-447&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-448&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-448&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-449&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-449&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-450&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-450&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-451&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-451&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUVW restUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-452&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-452&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-453&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-453&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelUVW restUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-454&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-454&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-455&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-455&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (   &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-456&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-456&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-457&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-457&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-458&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-458&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-459&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-459&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptVW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-460&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-460&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptVW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUVW restUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-461&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-461&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-462&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-462&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelUVW restUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-463&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-463&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-464&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-464&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-465&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-465&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-466&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-466&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-467&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-467&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-468&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-468&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-469&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-469&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-470&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-470&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-471&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-471&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-472&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-472&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-473&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-473&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-474&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-474&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; lableVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-475&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-475&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-476&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-476&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-477&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-477&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0U (label0V label0W))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-478&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-478&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-479&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-479&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (   &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-480&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-480&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptVW (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-481&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-481&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-482&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-482&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-483&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-483&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-484&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-484&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-485&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-485&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUVW restUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-486&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-486&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-487&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-487&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelUVW restUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-488&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-488&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-489&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-489&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0V label0W)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-490&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-490&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-491&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-491&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-492&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-492&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptVW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-493&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-493&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptVW (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUVW restUVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-494&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-494&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-495&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-495&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelUVW restUVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-496&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-496&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-497&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-497&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-498&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-498&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-499&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-499&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-500&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-500&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-501&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-501&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-502&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-502&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-503&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-503&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-504&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-504&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-505&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-505&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-506&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-506&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-507&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-507&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; lableVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-508&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-508&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-509&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-509&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-510&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-510&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-511&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-511&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (label0V label0W)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-512&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-512&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptV vs &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptW ws))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-513&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-513&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-514&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-514&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-515&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-515&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelV restV) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-516&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-516&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-517&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-517&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelV restV &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-518&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-518&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-519&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-519&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptW (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-520&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-520&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptV (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelW restW) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelVW restVW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-521&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-521&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-522&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-522&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; lableVW restVW &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelW restW&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-523&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-523&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-524&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-524&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-525&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-525&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0U (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-526&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-526&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (   &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0V (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; vs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-527&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-527&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; label0W (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; ws)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-528&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-528&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-529&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-529&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-530&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-530&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `u`, `v`, `w`, in reverse:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-531&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-531&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-532&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-532&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u = Begin label0U (Choice us)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-533&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-533&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- v = Begin label0V (Choice vs)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-534&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-534&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- w = Begin label0W (Choice ws)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb60-535&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb60-535&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (v &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; w)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The third &lt;code&gt;Applicative&lt;/code&gt; law requires that:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb61&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb61-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb61-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (f x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Proof:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb62&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb62-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure label = Begin label empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; f empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; x empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (f x) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptF empty &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptX empty)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptF (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; resultF) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; resultF&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptF (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelF restF) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelF restF &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; x empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; resultX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; resultX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptX (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelX restX) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelFX restFX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelFX restFX &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; f empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelX restX&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f empty = empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (f x) (empty &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; empty)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- empty &amp;lt;|&amp;gt; empty = empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (f x) empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure label = Begin label empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb62-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb62-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (f x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The fourth &lt;code&gt;Applicative&lt;/code&gt; law requires that:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb63&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb63-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb63-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; u&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Proof:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb64&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb64-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Define:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u = Begin labelU0 (Choice us)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU0 (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure label = Begin label empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU0 (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; y empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (labelU0 y) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptY empty)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; y empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptY (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptY (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelY restY) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU0 (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelY restY&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f empty = empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (labelU0 y) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-31&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-31&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-32&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-32&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; y empty&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-33&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-33&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-34&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-34&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-35&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-35&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-36&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-36&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure label = Begin label empty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-37&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-37&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (labelU0 y) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-38&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-38&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-39&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-39&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-40&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-40&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-41&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-41&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-42&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-42&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-43&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-43&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-44&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-44&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Induction: u &amp;lt;*&amp;gt; pure y = pure ($ y) &amp;lt;*&amp;gt; u&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-45&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-45&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (labelU0 y) (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; adaptU us))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-46&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-46&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-47&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-47&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Done&lt;/span&gt; result&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-48&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-48&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    adaptU (&lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelU restU) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-49&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-49&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-50&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-50&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Yield&lt;/span&gt; labelUY restUY &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU restU&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-51&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-51&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-52&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-52&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;lt;*&amp;gt;)`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-53&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-53&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) empty &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU0 (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-54&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-54&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-55&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-55&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `pure`, in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-56&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-56&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Begin&lt;/span&gt; labelU0 (&lt;span class=&quot;dt&quot;&gt;Choice&lt;/span&gt; us)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-57&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-57&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-58&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-58&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `u`, in reverse:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-59&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-59&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-60&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-60&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u = Begin labelU0 (Choice us)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb64-61&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb64-61&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; u&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-29T14:14:24Z",
"URL":" https://www.haskellforall.com/2022/03/modeling-pluscal-in-haskell-using.html "
}
,
{
"title":"Monday Morning Haskell: New Course Bundle!",
"textBody":"&lt;p&gt;This whole month, I've been writing about some of the basics of using monads in Haskell. This often misunderstood concept is very important for putting together more sophisticated Haskell programs. In my series on &lt;a href=&quot;https://www.mmhaskell.com/monads&quot;&gt;Monads and Functional Structures&lt;/a&gt; I discuss monads more from the ground up and go into a lot more depth about different ways to use monads.&lt;/p&gt; &lt;p&gt;But last year, I released two great new ways to learn about monads! If you head over to the &lt;a href=&quot;https://academy.mondaymorninghaskell.com/courses&quot;&gt;Monday Morning Haskell Academy&lt;/a&gt;, you'll find two courses that are specifically geared towards this tricky concept!&lt;/p&gt; &lt;p&gt;First, there is &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/making-sense-of-monads&quot;&gt;Making Sense of Monads&lt;/a&gt;. If monads have always confused you and you don't even know where to start, start here! This beginner-level course starts from the ground up, similar to the monads series. But it goes into even more depth, offering lots of slides to clarify concepts, and providing you with the opportunity to practice your skills with dozens of exercises and two different mini-projects!&lt;/p&gt; &lt;p&gt;If you think you've got the basics down, you can try something more advanced with our &lt;a href=&quot;https://academy.mondaymorninghaskell.com/effectful-haskell&quot;&gt;Effectful Haskell&lt;/a&gt; course. This goes into way more depth about how we can actually use monads in a real application. It will teach you several different ways of representing and organizing side effects in your Haskell program, including the idea of Free Monads! By the end of this course, you'll have built your own simple web server and learned to host it on Heroku! This project can serve as an example for many more complicated ideas. If you know the basics of monads already, but want to know how they actually help you build a real program, this is the course for you!&lt;/p&gt; &lt;p&gt;Now perhaps &lt;em&gt;both&lt;/em&gt; of these ideas sound appealing to you. For the first time, we're offering our &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/effects-bundle&quot;&gt;Effects Bundle&lt;/a&gt;, which combines both of these courses! If you get them together, you'll save almost 30%!&lt;/p&gt; &lt;p&gt;Speaking of discounts, you can also get 20% off &lt;strong&gt;all our courses&lt;/strong&gt; if you &lt;a href=&quot;https://www.mmhaskell.com/subscribe&quot;&gt;subscribe&lt;/a&gt; to our monthly newsletter! Subscribing always gives you access to our &lt;a href=&quot;https://www.mmhaskell.com/resources&quot;&gt;Subscriber Resources&lt;/a&gt;, but this week it will also get you a discount code on anything on Monday Morning Haskell Academy. This includes an additional discount on the the above-mentioned Effects Bundle. It also includes the newly re-opened &lt;a href=&quot;https://academy.mondaymorninghaskell.com/p/haskell-brain&quot;&gt;Haskell Brain&lt;/a&gt; course, which will introduce you to the basics of using machine learning in Haskell! If you missed out on this course back in the winter, now's your chance to get started!&lt;/p&gt; &lt;p&gt;The sale will last for a week! So make sure you sign up and get those discounts before 11:59PM PST (GMT-07) next Monday, April 4th! Don't miss out!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-28T14:30:00Z",
"URL":" https://mmhaskell.com/blog/2022/3/28/new-course-bundle "
}
,
{
"title":"Mark Jason Dominus: U.S. surnames with no vowels",
"textBody":"&lt;p&gt;While writing &lt;a href=&quot;https://blog.plover.com/misc/best-occupational-name.html&quot;&gt;the recent article about Devika Icecreamwala&lt;/a&gt; (born Patel) I acquired &lt;a href=&quot;https://pic.blog.plover.com/lang/etym/vowelless-names/Names_2010Census.csv&quot;&gt;the list of most common U.S. surnames&lt;/a&gt;. (“Patel” is 95th most common; there are about 230,000 of them.)  Once I had the data I did many various queries on it, and one of the things I looked for was names with no vowels.  Here are the results:&lt;/p&gt;  &lt;table align=&quot;center&quot; cellspacing=&quot;2&quot;&gt; &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;name &lt;/th&gt;&lt;th&gt;rank &lt;/th&gt;&lt;th&gt;count &lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NG &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1125 &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;31210 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VLK &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;68547 &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;287 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SMRZ &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;91981 &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;200 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SRP &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;104156 &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;172 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SRB &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;129825 &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;131 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;KRC &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;149395 &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;110 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SMRT &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;160975 &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;100 &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;It is no surprise that &lt;em&gt;Ng&lt;/em&gt; is by far the most common.  It's an English transcription of the Cantonese pronunciation of &lt;em&gt;吳&lt;/em&gt;, which is one of the most common names in the world.  &lt;em&gt;吳&lt;/em&gt; belongs to at least twenty-seven million people. Its Mandarin pronunciation is &lt;em&gt;Wu&lt;/em&gt;, which itself is twice as common in the U.S. as &lt;em&gt;Ng&lt;/em&gt;.&lt;/p&gt;  &lt;p&gt;I suspect the others are all Czech.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Vlk&quot;&gt;&lt;em&gt;Vlk&lt;/em&gt; definitely is&lt;/a&gt;; it's Czech for “wolf”.  (Check out the footer of &lt;a href=&quot;https://en.wikipedia.org/wiki/Vlk&quot;&gt;the &lt;em&gt;Vlk&lt;/em&gt; page&lt;/a&gt; for &lt;em&gt;eighty&lt;/em&gt; other common names that all mean “wolf”, including &lt;em&gt;Farkas&lt;/em&gt;, &lt;em&gt;López&lt;/em&gt;, &lt;em&gt;Lovato&lt;/em&gt;, &lt;em&gt;Lowell&lt;/em&gt;, &lt;em&gt;Ochoa&lt;/em&gt;, &lt;em&gt;Phelan&lt;/em&gt;, and &lt;em&gt;Vuković&lt;/em&gt;.)&lt;/p&gt;  &lt;p&gt;Similarly &lt;em&gt;Smrz&lt;/em&gt; is common enough that &lt;a href=&quot;https://en.wikipedia.org/wiki/Smrz&quot;&gt;Wikipedia has a page about it&lt;/a&gt;.  In Czech it was originally &lt;em&gt;Smrž&lt;/em&gt;, and Wikipedia mentions &lt;a href=&quot;https://en.wikipedia.org/wiki/Jakub_Smr%c5%be&quot;&gt;Jakub Smrž&lt;/a&gt;, a Czech motorcycle racer.  In the U.S. the confusing háček is dropped from the &lt;em&gt;z&lt;/em&gt; and one is left with just &lt;em&gt;Smrz&lt;/em&gt;.&lt;/p&gt;  &lt;p&gt;The next two are &lt;em&gt;Srp&lt;/em&gt; and &lt;em&gt;Srb&lt;/em&gt;.  Here it's a little harder to guess. &lt;em&gt;Srb&lt;/em&gt; means a Serbian person in several Slavic languages, including Czech and it's not hard to imagine that it is a Czech toponym for a family from Serbia.  (&lt;em&gt;Srb&lt;/em&gt; is also the &lt;em&gt;Serbian&lt;/em&gt; word for a Serbian person, but an immigrant to the U.S. named &lt;em&gt;Srb&lt;/em&gt;, coming from Czechia, might fill out the immigration form with “&lt;em&gt;Srb&lt;/em&gt;” and might end up with their name spelled that way, whereas   a Serbian with that name would write the unintelligible &lt;em&gt;Срб&lt;/em&gt; and would probably end up with something more like &lt;em&gt;Serb&lt;/em&gt;.)  There's also &lt;a href=&quot;https://en.wikipedia.org/wiki/Srb&quot;&gt;a town in Croatia with the name &lt;em&gt;Srb&lt;/em&gt;&lt;/a&gt; and the surname could mean someone from that town.&lt;/p&gt;  &lt;p&gt;I'm not sure whether &lt;em&gt;Srp&lt;/em&gt; is similar.  The Serbian-language word for the Serbian language itself is &lt;em&gt;Srpski&lt;/em&gt; (&lt;em&gt;српски&lt;/em&gt;), but &lt;em&gt;srp&lt;/em&gt; is also Slavic for “sickle” and appears in quite a few Slavic agricultural-related names such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Sierpi%c5%84ski&quot;&gt;Sierpiński&lt;/a&gt;. (It's also the name for the harvest month of August.)&lt;/p&gt;  &lt;p&gt;Next is &lt;em&gt;Krc&lt;/em&gt;.  I guessed maybe this was Czech for “church” but it seems that that is &lt;em&gt;kostel&lt;/em&gt;.  There is a town south of Prague named &lt;em&gt;Krč&lt;/em&gt; and maybe &lt;em&gt;Krc&lt;/em&gt; is the háčekless American spelling of the name of a person whose ancestors came from there.&lt;/p&gt;  &lt;p&gt;Last is &lt;em&gt;Smrt&lt;/em&gt;. &lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_J%2e_Smrt&quot;&gt;Wikipedia has an article about Thomas J. Smrt&lt;/a&gt; but it doesn't say whether his ancestry was Czech.  I had a brief fantasy that maybe some of the many people named &lt;em&gt;Smart&lt;/em&gt; came from Czech families originally named &lt;em&gt;Smrt&lt;/em&gt;, but I didn't find any evidence that this ever happened; all the Smarts seem to be British.  Oh well.&lt;/p&gt;  &lt;p&gt;[ Bonus trivia: &lt;em&gt;smrt&lt;/em&gt; is the Czech word for “death”, which we also meet in the name of James Bond's antagonist SMERSH.  &lt;a href=&quot;https://en.wikipedia.org/wiki/SMERSH&quot;&gt;SMERSH&lt;/a&gt; was a real organization, its name a combination of &lt;em&gt;смерть&lt;/em&gt; (/smiert/, “death”) and &lt;em&gt;шпио́нам&lt;/em&gt; (/shpiónam/, “to spies”).  &lt;em&gt;Шпио́нам&lt;/em&gt;, incidentally, is borrowed from the French &lt;em&gt;espion&lt;/em&gt;, and ultimately akin to English &lt;em&gt;spy&lt;/em&gt; itself. ]&lt;/p&gt;  &lt;p&gt;[ Addenda 20220327: Thanks to several readers who wrote to mention that &lt;em&gt;Smrž&lt;/em&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Morchella&quot;&gt;morel&lt;/a&gt; and &lt;em&gt;Krč&lt;/em&gt; is (or was) a stump or a block of wood, I suppose analogous to the common German name &lt;em&gt;Stock&lt;/em&gt;.  Petr Mánek corrected my spelling of &lt;em&gt;háček&lt;/em&gt; and also directed me to &lt;a href=&quot;https://www.kdejsme.cz/&quot;&gt;KdeJsme.cz&lt;/a&gt;, a web site providing information about Czech surnames. Finally, although &lt;em&gt;Smrt&lt;/em&gt; is not actually a shortened form of &lt;em&gt;Smart&lt;/em&gt; I leave you with this &lt;a href=&quot;https://www.youtube.com/watch?v=wv4eTE0aUiQ&quot;&gt;consolation prize&lt;/a&gt;. ]&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-27T01:53:00Z",
"URL":" https://blog.plover.com/lang/etym/vowelless-names.html "
}
,
{
"title":"Mark Jason Dominus: Best occupational name ever?",
"textBody":"&lt;p&gt;For a long while I've been planning an article about occupational surnames, but it's not ready and this is too delightful to wait.&lt;/p&gt;  &lt;p&gt;There is, in California, a dermatologist named:&lt;/p&gt;  &lt;div style=&quot;text-align: center; font-size: 250%; background-color: pink; border: dashed #44ee88 3px;&quot;&gt; Dr. Devika Icecreamwala, M.D. &lt;/div&gt;  &lt;p&gt;Awesome.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Wallah&quot;&gt;“Wala” is an Indian-language suffix&lt;/a&gt; that indicates a person who deals in, transports, or otherwise has something to do with the suffixed thing. You may have heard of the famous &lt;a href=&quot;https://www.bbc.com/future/article/20170114-the-125-year-old-network-that-keeps-mumbai-going&quot;&gt;dabbawalas of Mumbai&lt;/a&gt;. A &lt;em&gt;dabba&lt;/em&gt; is a lunchbox, and in Mumbai thousands of dabbawalas supply workers with the hot lunches that were cooked fresh in the workers’ own homes that morning.&lt;/p&gt;  &lt;p&gt;Similarly, an icecreamwala is an ice cream vendor.  Apparently there was some point during the British Raj that the Brits went around handing out occupational surnames, and at least one ice cream wala received the name Icecreamwala.&lt;/p&gt;  &lt;p&gt;It is delightful enough that Dr. Icecreamwala exists, but the story gets better.  Icecreamwala is her &lt;em&gt;married&lt;/em&gt; name.  She was born Devika Patel.  Some people might have stuck with Patel, preferring the common and nondescript to the rare and wonderful.  Not Dr. Icecreamwala!  She not only changed her name, she embraced the new one.  Her practice is called Icecreamwala Dermatology and their internet domain is &lt;a href=&quot;https://www.icecreamderm.com&quot;&gt;icecreamderm.com&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Ozy Brennan recently considered the problem of which parent's surnames to give to the children. and &lt;a href=&quot;https://thingofthings.substack.com/p/choose-the-coolest-surname?s=r&quot;&gt;suggested that they choose whichever is coolest&lt;/a&gt;. Dr. Icecreamwala appears to be in agreement.&lt;/p&gt;  &lt;p&gt;[ Addendum 20220328: Vaibhav Sagar informs me that Icecreamwala is probably rendered in Hindi as  आइसक्रीमवाला. ]&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-26T14:55:00Z",
"URL":" https://blog.plover.com/misc/best-occupational-name.html "
}
,
{
"title":"Mark Jason Dominus: My horse Pongo",
"textBody":"&lt;p&gt;I tried playing &lt;em&gt;Red Dead Redemption 2&lt;/em&gt; last week.  I was a bit disappointed because I was hoping for Old West Skyrim but it's actually Old West GTA.  I'm not sure how long I will continue.&lt;/p&gt;  &lt;p&gt;Anyway, I acquired a new horse and was prompted to name it.  My first try, “Pongo”, was rejected by  the profanity filter.  Puzzled, I supposed I had mistyped and included a ZWNJ or something.  No, it was rejecting &quot;Pongo”.&lt;/p&gt;  &lt;p&gt;The only meaning I know for “Pongo” is that it is the name of the daddy dog in &lt;em&gt;101 Dalmatians&lt;/em&gt;. So I asked the Goog.  The Goog shrugged and told me that was the only Pongo it knew also.&lt;/p&gt;  &lt;p&gt;Steeling myself, I asked Urban Dictionary, preparing to learn that Pongo was obscene, racist, or probably both. Urban Dictionary told me that “Pongo” is 1900-era Brit slang for a soldier.  (Which I suppose explains its appearance as the name of the dog.)  Nothing obscene or racist.&lt;/p&gt;  &lt;p&gt;I'm stumped.  I forget what I ended up naming the horse.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-25T16:32:00Z",
"URL":" https://blog.plover.com/lang/obscene-pongo.html "
}
,
{
"title":"Tweag I/O: Our first audit of Minswap and the aftermath",
"textBody":"&lt;h2 id=&quot;what-happened&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#what-happened&quot;&gt;&lt;/a&gt;What Happened&lt;/h2&gt; &lt;p&gt;On the morning of the 22nd of March, 2022, we were notified about the existence of an &lt;a href=&quot;https://minswap-labs.medium.com/vulnerability-patch-technical-details-and-steps-forward-97f6ee35aa91&quot;&gt;unknown critical vulnerability&lt;/a&gt; on one of Minswap’s contracts. Everyone here on the audit team was dismayed, since we had conducted an &lt;a href=&quot;https://www.tweag.io/27d9c5c6f71d11f2f6c6e853a90b42ad/MinSwap-Jan31.pdf&quot;&gt;audit&lt;/a&gt; for Minswap not long before. We found &lt;a href=&quot;https://www.tweag.io/27d9c5c6f71d11f2f6c6e853a90b42ad/MinSwap-Jan31.pdf&quot;&gt;3 critical&lt;/a&gt; issues that would have likewise enabled an attacker to empty the reserves, and 13 issues in total, but failed to find this one.&lt;/p&gt; &lt;h2 id=&quot;how-it-happened&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#how-it-happened&quot;&gt;&lt;/a&gt;How It Happened&lt;/h2&gt; &lt;p&gt;The heart of the vulnerability lies in this seemingly harmless function which checks that a given value possesses a single unit of an asset class:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;isUnity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AssetClass&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;isUnity&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;assetClassValueOf&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;While harmless in isolation, in the context it was used &lt;code class=&quot;language-text&quot;&gt;isUnity&lt;/code&gt; revealed itself to be disastrous:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;validateMintNFT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;BuiltinData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;BuiltinData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;validateMintNFT&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;rawRedeemer&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;rawContext&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;token hvariable&quot;&gt;mintValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;SC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;txInfoMint&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;info&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;isUnity&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mintValue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;assetClass&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ownSymbol&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;poolTokenName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;SC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;spendsOutput&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;refHash&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;refIdx&lt;/span&gt;         &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;validateMintNFT&lt;/code&gt; function is where tokens that identify a pool are minted. At first glance, it looks reasonable: you can only mint one copy of the token identifying a given pool, and you can do it only when creating a pool. The problem is that &lt;code class=&quot;language-text&quot;&gt;isUnity&lt;/code&gt; forgets an important check: that there is no other asset being minted. Therefore, you could also mint different tokens belonging to &lt;code class=&quot;language-text&quot;&gt;ownSymbol&lt;/code&gt; when creating a pool. In particular, you could mint a token identifying an existing pool, essentially duplicating what was supposed to be a unique token. A naive attempt at correcting &lt;code class=&quot;language-text&quot;&gt;isUnity&lt;/code&gt; would have read:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;isUnity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AssetClass&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;isUnity&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;assetClassValue&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Yet, that is too restrictive because pool creation mints three different tokens, so that would have broken the contract functionality. What we really want is to ensure that there is only one token belonging to the given currency symbol and its amount is one, but other currency symbols must be allowed to exist within the value:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;isUnity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AssetClass&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;isUnity&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;getValue&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fromList&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;tok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAssetClass&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This function would have prevented the attack while maintaining the correct contract functionality.&lt;/p&gt; &lt;p&gt;Because pool tokens were meant as a means of enabling pools (and only pools!) to mint liquidity position (LP) tokens, being able to duplicate pool tokens meant that anyone could mint LP tokens. In fact, this was not the only mechanism to duplicate LP tokens, during our audit, we managed to duplicate LP tokens through other means (issue 2.2.1.2 in our &lt;a href=&quot;https://www.tweag.io/27d9c5c6f71d11f2f6c6e853a90b42ad/MinSwap-Jan31.pdf&quot;&gt;report&lt;/a&gt;). Once we managed to duplicate these LP tokens through some other means, through a terrible combination of survivorship and confirmation bias, we failed to identify that the assumption about the uniqueness of pool tokens was actually wrong: it is not because a given mechanism can be exploited in one way that it cannot be exploited in other ways too!&lt;/p&gt; &lt;p&gt;Once pool tokens could be duplicated, it was easy to duplicate LP tokens again since the minting policy only checks for the token name:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;mkLiquidityValidator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CurrencySymbol&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;BuiltinData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;BuiltinData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mkLiquidityValidator&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;nftSymbol&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;rawContext&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;PlutusTx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unsafeFromBuiltinData&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;rawContext&lt;/span&gt;       &lt;span class=&quot;token hvariable&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;SC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scriptContextTxInfo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;context&lt;/span&gt;       &lt;span class=&quot;token hvariable&quot;&gt;ownSymbol&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;SC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ownCurrencySymbol&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;context&lt;/span&gt;       &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;token hvariable&quot;&gt;nftTokenName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TokenName&lt;/span&gt;       &lt;span class=&quot;token hvariable&quot;&gt;nftTokenName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;txOutputs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;isJust&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;SC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;txOutDatumHash&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;         &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;nftSymbol&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;getValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;SC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;txOutValue&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;           &lt;span class=&quot;token constant&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toList&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;             &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;tn&lt;/span&gt;        &lt;span class=&quot;token hvariable&quot;&gt;lpTokenName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TokenName&lt;/span&gt;       &lt;span class=&quot;token hvariable&quot;&gt;lpTokenName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ownSymbol&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;getValue&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mintValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;         &lt;span class=&quot;token constant&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toList&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;tn&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;nftTokenName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;lpTokenName&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- !!! LP tokens can be minted when these match !!!&lt;/span&gt;         &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;With the ability to mint arbitrary LP tokens for arbitrary pools, an attacker could easily empty any pools of their choosing. This is very, very serious.&lt;/p&gt; &lt;h2 id=&quot;epilogue-what-could-have-helped&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#epilogue-what-could-have-helped&quot;&gt;&lt;/a&gt;Epilogue: What Could Have Helped?&lt;/h2&gt; &lt;p&gt;Our eyes failed us and read what our minds wanted to read, instead of what was really there. This is precisely why machine-checked proofs and formal verification are so important. Paraphrasing the famous quote by E. W. Dijkstra — “Program testing can be used to show the presence of bugs, but never to show their absence!”. Machine-assisted analysis tools would certainly have helped. I’d even go a step further and argue that perhaps we should never look at code &lt;em&gt;without&lt;/em&gt; these tools. The problem here is twofold. On the one hand, there are no such tools for Plutus contracts: we are working on building them, but these are long and involved projects.&lt;/p&gt; &lt;p&gt;This was a situation where we failed to spot a bug in the code. In hindsight, it looks so simple that it’s easy to feel ashamed of letting that slip through. That being said, no audit would be one hundred percent guaranteed because they are conducted by humans. Our audits are done on a best effort basis and we &lt;a href=&quot;https://www.tweag.io/27d9c5c6f71d11f2f6c6e853a90b42ad/MinSwap-Jan31.pdf&quot;&gt;state as much&lt;/a&gt; in our reports. Even a machine-checked proof-of-correctness would not suffice to guarantee the code is bug-free. The specification itself could be wrong… Or maybe the assumptions under which the proof was carried cannot be met. These details about assumptions and specifications might get lost in translation in between the auditing and the implementation team. Any form of auditing, whether it includes formal methods or not, is always an exercise in reducing risk as much as possible given current technology.&lt;/p&gt; &lt;p&gt;Even if we cannot be absolutely certain of the absence of bugs in an implementation, it is paramount we develop tools that are capable of increasing our confidence. At Tweag, the formal methods team has been working hard to polish &lt;a href=&quot;https://github.com/tweag/pirouette&quot;&gt;Pirouette&lt;/a&gt;, and it would have been able to spot this bug. Pirouette has been in development for a long time due to changes around the Plutus ecosystem. We gave a &lt;a href=&quot;https://summit.cardano.org/sessions/certification-partners&quot;&gt;demo&lt;/a&gt; of Pirouette’s prototype at the Cardano Summit 2021 and discussed it at the certification round table, where we were already adamant about the importance of tool-assisted auditing. Pirouette assumes that contracts use the &lt;a href=&quot;https://github.com/input-output-hk/plutus-apps/blob/619012425a99f26b54ee906ab62ca5fe7e32dbc2/plutus-contract/src/Plutus/Contract/StateMachine/OnChain.hs&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;StateMachine&lt;/code&gt;&lt;/a&gt; Plutus API. Our observation in the field is that contracts seldom do, so we are adapting Pirouette to be applicable to more contracts, including Minswap’s.&lt;/p&gt; &lt;p&gt;Best practices and common vulnerabilities for Plutus contracts should be widely known and well understood. We endeavour to improve Plutus API documentation wherever possible. For instance, in the docs of &lt;code class=&quot;language-text&quot;&gt;assetClassValueOf&lt;/code&gt;, developers should see a paragraph warning that if they are using it to look for something in the value map, there might be additional things they didn’t want in that map. Moreover, this API documentation could be the place to link to more in-depth explanations of vulnerabilities that were actually spotted in the wild, such as this one.&lt;/p&gt; &lt;p&gt;Audits are best-effort and inevitably, it is always the human factor that fails us. Incidents like these inform where to fine-tune the process us humans carry out.&lt;/p&gt; &lt;p&gt;While we can never guarantee the absence of faults in software, whenever a fault comes to light we take the opportunity to learn as much as we can from it. This reflection is what allows us to help make errors increasingly rare in our community.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-25T00:00:00Z",
"URL":" https://tweag.io/blog/2022-03-25-minswap-lp-vulnerability/ "
}
,
{
"title":"Monday Morning Haskell: Making your own Monad",
"textBody":"&lt;p&gt;There are many built-in monads from the MTL library that you'll find useful, like Reader, Writer, State, ExceptT, and so on. You can use transformers to combine these into a monad that is uniquely specific to your application. Today, we'll talk about how to make your monad into its own data type.&lt;/p&gt; &lt;p&gt;For our example monad, we'll incorporate an environment configuration using a Reader, a persistent application state, the ability to throw certain exceptions, and have all of that on top of IO. This would give us a monad like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;StateT AppState (ReaderT EnvConfig (ExceptT AppError IO)) a&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And you might have many different functions in your application using this monad. Obviously you wouldn't want to keep writing down that long expression each time. So you could use a type alias, parameterized by the result type of the operation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;type AppMonad a = StateT AppState (ReaderT EnvConfig (ExceptT AppError IO)) a  loginUser :: AuthInfo -&amp;gt; AppMonad User  logoutUser :: AppMonad ()  printEnvironmentLogs :: AppMonad ()&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, an important trick to know is that we can make &lt;code&gt;AppMonad&lt;/code&gt; a proper type instead of a simple alias by using &lt;code&gt;newtype&lt;/code&gt;. To use this type as a monad, you'll need instances for the &lt;code&gt;Monad&lt;/code&gt; class and its ancestors. But we can derive those automatically, as long as we're using common MTL layers.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}  newtype AppMonad a = AppMonad   (StateT AppState     (ReaderT EnvConfig       (ExceptT AppError IO))) a   deriving (Functor, Applicative, Monad)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notice we are still using &lt;code&gt;a&lt;/code&gt; as a type parameter for the result!&lt;/p&gt; &lt;p&gt;Like other monads, it is usually a good idea to use a &quot;run&quot; function to give users an entrypoint into this monad. This function will need appropriate inputs. First of all, it will take the monadic action itself. Then it will take initial values for the state and configuration.&lt;/p&gt; &lt;p&gt;There are a few different options for the result value. In certain cases, it can be the &quot;pure&quot; result type from the computation. But if &lt;code&gt;IO&lt;/code&gt; is on the monad stack, your result will need to be in the &lt;code&gt;IO&lt;/code&gt; monad. And in our case, since we've included &lt;code&gt;ExceptT&lt;/code&gt;, we'll also allow the result to be &lt;code&gt;Either&lt;/code&gt;, since it may encounter our error type.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;runAppMonad :: AppMonad a -&amp;gt; EnvConfig -&amp;gt; AppState -&amp;gt; IO (Either AppError a)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;How do we write such a function? The answer is that we'll incorporate the &quot;run&quot; functions of all the other monads on our stack! The key is knowing how to destructure a single monadic action. First, we pattern match our input action. Below, the expression &lt;code&gt;stateAction&lt;/code&gt; corresponds to a &lt;code&gt;StateT&lt;/code&gt; value, because that is the outer layer of our monad.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;runAppMonad :: AppMonad a -&amp;gt; EnvConfig -&amp;gt; AppState -&amp;gt; IO (Either AppError a) runAppMonad (AppMonad stateAction) envConfig appState = ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;How do we make progress with a &lt;code&gt;stateAction&lt;/code&gt;? By using a &quot;run&quot; function from the &lt;code&gt;State&lt;/code&gt; monad of course! In our case, we don't care about the final stateful value, so we'll use &lt;code&gt;evalStateT&lt;/code&gt;. This gives us an expression at the next level of the monad, which is a &lt;code&gt;ReaderT&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;runAppMonad :: AppMonad a -&amp;gt; EnvConfig -&amp;gt; AppState -&amp;gt; IO (Either AppError a) runAppMonad (AppMonad stateAction) envConfig appState = ...   where     readerAction :: ReaderT (ExceptT AppError IO) a     readerAction = evalStateT stateAction appState&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can do the same thing to unwind the &lt;code&gt;Reader&lt;/code&gt; action. We'll call &lt;code&gt;runReaderT&lt;/code&gt; using our supplied environment config. This gives us an action in the &lt;code&gt;ExceptT&lt;/code&gt; layer.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;runAppMonad :: AppMonad a -&amp;gt; EnvConfig -&amp;gt; AppState -&amp;gt; IO (Either AppError a) runAppMonad (AppMonad stateAction) envConfig appState = ...   where     readerAction :: ReaderT (ExceptT AppError IO) a     readerAction = evalStateT stateAction appState      exceptAction :: ExceptT AppError IO a     exceptAction = runReaderT readerAction envConfig&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And finally, we use &lt;code&gt;runExceptT&lt;/code&gt; to unwind the &lt;code&gt;ExceptT&lt;/code&gt; layer, which gives us an IO action. This is our final result.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;runAppMonad :: AppMonad a -&amp;gt; EnvConfig -&amp;gt; AppState -&amp;gt; IO (Either AppError a) runAppMonad (AppMonad stateAction) envConfig appState = ioAction   where     readerAction :: ReaderT (ExceptT AppError IO) a     readerAction = evalStateT stateAction appState      exceptAction :: ExceptT AppError IO a     exceptAction = runReaderT readerAction envConfig      ioAction :: IO (Either AppError a)     ioAction = runExceptT exceptAction&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can use our monad in any location that has access to the initial state values and the IO monad!&lt;/p&gt; &lt;p&gt;There are a couple more tricks we can pull with our own monad. We can, for example, make this an instance of certain monadic type classes. This will make it easier to incorporate normal IO actions, or let us use &lt;code&gt;State&lt;/code&gt; actions without needing to &lt;code&gt;lift&lt;/code&gt;. Here are a couple examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;instance MonadIO AppMonad where   liftIO = AppMonad . lift . lift . lift  instance MonadState AppState AppMonad where   get = AppMonad get   put = AppMonad . put&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We could even create our own typeclass related to this monad! This idea is a bit more specialized. So if you want to learn more about this and other monad ideas, you should follow up and read our full &lt;a href=&quot;https://www.mmhaskell.com/monads&quot;&gt;Monads Series&lt;/a&gt;! You can also &lt;a href=&quot;https://www.mmhaskell.com/subscribe&quot;&gt;subscribe&lt;/a&gt; to our monthly newsletter so you can keep up to date with the latest Haskell news and offers!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-24T14:30:00Z",
"URL":" https://mmhaskell.com/blog/2022/3/24/making-your-own-monad "
}
,
{
"title":"FP Complete: Canary Deployment with Kubernetes and Istio",
"textBody":"&lt;p&gt;Istio is a service mesh that transparently adds various capabilities like observability, traffic management and security to your distributed collection of microservices. It comes with various functionalities like circuit breaking, granular traffic routing, mTLS management, authentication and authorization polices, ability to do chaos testing etc.&lt;/p&gt; &lt;p&gt;In this post, we will explore on how to do canary deployments of our application using Istio.&lt;/p&gt; &lt;h2 id=&quot;what-is-canary-deployment&quot;&gt;What is Canary Deployment&lt;/h2&gt; &lt;p&gt;Using Canary deployment strategy, you release a new version of your application to a small percentage of the production traffic. And then you monitor your application and gradually expand its percentage of the production traffic.&lt;/p&gt; &lt;p&gt;For a canary deployment to be shipped successfully, you need good monitoring in place. Based on your exact use case, you might want to check various metrics like performance, user experience or &lt;a href=&quot;https://en.wikipedia.org/wiki/Bounce_rate&quot;&gt;bounce rate&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;pre-requisites&quot;&gt;Pre requisites&lt;/h2&gt; &lt;p&gt;This post assumes that following components are already provisioned or installed:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Kubernetes cluster&lt;/li&gt; &lt;li&gt;Istio&lt;/li&gt; &lt;li&gt;cert-manager: (Optional, required if you want to provision TLS certificates)&lt;/li&gt; &lt;li&gt;Kiali (Optional)&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;istio-concepts&quot;&gt;Istio Concepts&lt;/h2&gt; &lt;p&gt;For this specific deployment, we will be using three specific features of Istio's traffic management capabilities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://istio.io/latest/docs/concepts/traffic-management/#virtual-services&quot;&gt;Virtual Service&lt;/a&gt;: Virtual Service describes how traffic flows to a set of destinations. Using Virtual Service you can configure how to route the requests to a service within the mesh. It contains a bunch of routing rules that are evaluated, and then a decision is made on where to route the incoming request (or even reject if no routes match).&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://istio.io/latest/docs/concepts/traffic-management/#gateways&quot;&gt;Gateway&lt;/a&gt;: Gateways are used to manage your inbound and outbound traffic. They allow you to specify the virtual hosts and their associated ports that needs to be opened for allowing the traffic into the cluster.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://istio.io/latest/docs/reference/config/networking/destination-rule/&quot;&gt;Destination Rule&lt;/a&gt;: This is used to configure how a client in the mesh interacts with your service. It's used for configuring TLS settings of &lt;a href=&quot;https://istio.io/latest/docs/reference/config/networking/sidecar/&quot;&gt;your sidecar&lt;/a&gt;, splitting your service into subsets, load balancing strategy for your clients etc.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For doing canary deployment, destination rule plays a major role as that's what we will be using to split the service into subset and route traffic accordingly.&lt;/p&gt; &lt;h2 id=&quot;application-deployment&quot;&gt;Application deployment&lt;/h2&gt; &lt;p&gt;For our canary deployment, we will be using the following version of the application:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://httpbin.org/&quot;&gt;httpbin.org&lt;/a&gt;: This will be the version one (v1) of our application. This is the application that's already deployed, and your aim is to partially replace it with a newer version of the application.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/psibi/tornado-websocket-example&quot;&gt;websocket app&lt;/a&gt;: This will be the version two (v2) of the application that has to be gradually introduced.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that in the actual real world, both the applications will share the same code. For our example, we are just taking two arbitrary applications to make testing easier.&lt;/p&gt; &lt;p&gt;Our assumption is that we already have version one of our application deployed. So let's deploy that initially. We will write our usual Kubernetes resources for it. The deployment manifest for the version one application:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apps/v1 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;Deployment metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;replicas&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;1   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;selector&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;matchLabels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;app&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin       version&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v1   template&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;labels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:         &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;app&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin         version&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v1     spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;containers&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;image&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;docker.io/kennethreitz/httpbin         imagePullPolicy&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;IfNotPresent         name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin         ports&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:         - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;containerPort&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;80 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And let's create a corresponding service for it:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v1 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;Service metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;labels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;app&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin   name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;ports&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin     port&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;8000     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;targetPort&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;80   &lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;tornado     port&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;8001     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;targetPort&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;8888   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;selector&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;app&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin   type&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;ClusterIP &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SSL certificate for the application which will use cert-manager:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;cert-manager.io/v1 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;Certificate metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin-ingress-cert   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;istio-system spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;secretName&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin-ingress-cert   issuerRef&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;letsencrypt-dns-prod     kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;ClusterIssuer   dnsNames&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;canary.33test.dev-sandbox.fpcomplete.com &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the Istio resources for the application:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;networking.istio.io/v1alpha3 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;Gateway metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin-gateway   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;selector&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;istio&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;ingressgateway   servers&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;hosts&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary.33test.dev-sandbox.fpcomplete.com     port&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;https-httpbin       number&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;443       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;protocol&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;HTTPS     tls&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;credentialName&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin-ingress-cert       mode&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;SIMPLE   &lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;hosts&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary.33test.dev-sandbox.fpcomplete.com     port&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;http-httpbin       number&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;80       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;protocol&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;HTTP     tls&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpsRedirect&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;true &lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;--- &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;networking.istio.io/v1alpha3 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;VirtualService metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;gateways&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin-gateway   hosts&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary.33test.dev-sandbox.fpcomplete.com   http&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;route&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;destination&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:         &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;host&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin.canary.svc.cluster.local         port&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:           &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;number&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;8000 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above resource define gateway and virtual service. You could see that we are using TLS here and redirecting HTTP to HTTPS.&lt;/p&gt; &lt;p&gt;We also have to make sure that namespace has istio injection enabled:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v1 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;Namespace metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;labels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;app.kubernetes.io/component&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin     istio-injection&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;enabled   name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;canary &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I have the above set of k8s resources managed via &lt;a href=&quot;https://kustomize.io/&quot;&gt;kustomize&lt;/a&gt;. Let's deploy them to get the initial environment which consists of only v1 (httpbin) application:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;❯ kustomize build overlays/istio_canary &amp;gt; istio.yaml ❯ kubectl apply -f istio.yaml namespace/canary created service/httpbin created deployment.apps/httpbin created gateway.networking.istio.io/httpbin-gateway created virtualservice.networking.istio.io/httpbin created ❯ kubectl apply -f overlays/istio_canary/certificate.yaml certificate.cert-manager.io/httpbin-ingress-cert created &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now I can go and verify in my browser that my application is actually up and running:&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;httpbin: Version 1 application&quot; src=&quot;https://www.fpcomplete.com/images/istio_httpbin_application.png&quot; /&gt;&lt;/p&gt; &lt;p&gt;Now comes the interesting part. We have to deploy the version two of our application and make sure around 20% of our traffic goes to it. Let's write the deployment manifest for it:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apps/v1 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;Deployment metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin-v2   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;replicas&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;1   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;selector&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;matchLabels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;app&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin       version&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v2   template&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;labels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:         &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;app&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin         version&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v2     spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;containers&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;image&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;psibi/tornado-websocket:v0.3         imagePullPolicy&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;IfNotPresent         name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;tornado         ports&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:         - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;containerPort&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;8888 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And now the destination rule to split the service:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;networking.istio.io/v1alpha3 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;DestinationRule metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;host&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin.canary.svc.cluster.local   subsets&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;labels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v1     name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v1   &lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;labels&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v2     name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;v2 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And finally let's modify the virtual service to split 20% of the traffic to the newer version:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;apiVersion&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;networking.istio.io/v1alpha3 kind&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;VirtualService metadata&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin   namespace&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary spec&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;gateways&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin-gateway   hosts&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;canary.33test.dev-sandbox.fpcomplete.com   http&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:   - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;route&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:     - &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;destination&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:         &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;host&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin.canary.svc.cluster.local         port&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:           &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;number&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;8000         &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;subset&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v1       weight&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;80     &lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;destination&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:         &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;host&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;httpbin.canary.svc.cluster.local         port&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;:           &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;number&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;8001         &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;subset&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;v2       weight&lt;/span&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #6c71c4;&quot;&gt;20 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And now if you go again to the browser and refresh it a number of times (note that we route only 20% of the traffic to the new deployment), you will see the new application eventually:&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;websocket: Version 2 application&quot; src=&quot;https://www.fpcomplete.com/images/istio_tornado_application.png&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;testing-deployment&quot;&gt;Testing deployment&lt;/h2&gt; &lt;p&gt;Let's do around 10 curl requests to our endpoint to see how the traffic is getting routed:&lt;/p&gt; &lt;pre style=&quot;background-color: #fdf6e3;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color: #657b83;&quot;&gt;❯ seq 10 | xargs -Iz curl -s https://canary.33test.dev-sandbox.fpcomplete.com | rg &quot;&amp;lt;title&amp;gt;&quot;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt; &amp;lt;title&amp;gt;tornado WebSocket example&amp;lt;/title&amp;gt;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt;     &amp;lt;title&amp;gt;httpbin.org&amp;lt;/title&amp;gt; &amp;lt;title&amp;gt;tornado WebSocket example&amp;lt;/title&amp;gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And you can confirm how out of the 10 requests, 2 requests are routed to the websocket (v2) application. If you have &lt;a href=&quot;https://kiali.io/&quot;&gt;Kiali&lt;/a&gt; deployed, you can even visualize the above traffic flow:&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;Kiali visualization&quot; src=&quot;https://www.fpcomplete.com/images/istio_kiali.png&quot; /&gt;&lt;/p&gt; &lt;p&gt;And that summarizes our post on how to achieve canary deployment using Istio. While this post shows a basic example, traffic steering and routing is one of the core features of Istio and it offers various ways to configure the routing decisions made by it. You can find more further details about it in the &lt;a href=&quot;https://istio.io/latest/docs/concepts/traffic-management/#virtual-services&quot;&gt;official docs&lt;/a&gt;. You can also use a controller like &lt;a href=&quot;https://argoproj.github.io/argo-rollouts/features/traffic-management/istio/&quot;&gt;Argo Rollouts with Istio&lt;/a&gt; to perform canary deployments and use additional features like &lt;a href=&quot;https://argoproj.github.io/argo-rollouts/features/analysis/&quot;&gt;analysis&lt;/a&gt; and &lt;a href=&quot;https://argoproj.github.io/argo-rollouts/features/experiment/&quot;&gt;experiment&lt;/a&gt;.&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;If you're looking for a solid Kubernetes platform, batteries included with a first class support of Istio, &lt;a href=&quot;https://www.fpcomplete.com/products/kube360/&quot;&gt;check out Kube360&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you liked this article, you may also like:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://www.fpcomplete.com/blog/istio-mtls-debugging-story/&quot;&gt;An Istio/mutual TLS debugging story&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.fpcomplete.com/blog/rust-kubernetes-windows/&quot;&gt;Deploying Rust with Windows Containers on Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.fpcomplete.com/blog/cloud-vendor-neutrality/&quot;&gt;Cloud Vendor Neutrality&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.fpcomplete.com/blog/devops-for-developers/&quot;&gt;DevOps for (Skeptical) Developers&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.fpcomplete.com/blog/kube360s-kubernetes-security-focus/&quot;&gt;Secure defaults with Kubernetes Security with Kube360&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;blog-cta&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://www.fpcomplete.com/signups/request-a-demo/&quot;&gt;&lt;img alt=&quot;See what Kube360 can do for you&quot; src=&quot;https://www.fpcomplete.com/images/cta/kube360.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-24T00:00:00Z",
"URL":" https://www.fpcomplete.com/blog/canary-deployment-istio/ "
}
,
{
"title":"Well-Typed.Com: New large-records release: now with 100% fewer quotes",
"textBody":"&lt;p&gt;The &lt;code&gt;large-records&lt;/code&gt; library provides support for large records in Haskell with much better compilation time performance than vanilla &lt;code&gt;ghc&lt;/code&gt; does. Well-Typed and &lt;a href=&quot;http://monadfix.com&quot;&gt;MonadFix&lt;/a&gt; are happy to announce a &lt;a href=&quot;http://hackage.haskell.org/package/large-records&quot;&gt;new release&lt;/a&gt; of this library, which avoids all Template Haskell or quasi-quote brackets. Example:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# ANN type User largeRecordLazy #-}&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MkUser&lt;/span&gt; {&lt;/span&gt; &lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;      name   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; active ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt; &lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;)&lt;/span&gt; &lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ToJSON&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  toJSON &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; gtoJSON&lt;/span&gt; &lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;john ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;john &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MkUser&lt;/span&gt; { name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;john&quot;&lt;/span&gt;, active &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; }&lt;/span&gt; &lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;setInactive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb1-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;setInactive u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u{active &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This makes for a nicer user experience and provides better integration with tooling (for example, better syntax highlighting, auto-formatting, and auto-completion). Importantly, avoiding Template Haskell also means we avoid the unnecessary recompilations that this incurs&lt;a class=&quot;footnote-ref&quot; href=&quot;https://well-typed.com/blog/rss2.xml#fn1&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, a significant benefit for a library aimed at improving compilation time.&lt;/p&gt;  &lt;p&gt;In this blog post we will briefly discuss how this was achieved.&lt;/p&gt; &lt;h3 id=&quot;avoiding-quotation&quot;&gt;Avoiding quotation&lt;/h3&gt; &lt;h4 id=&quot;record-declaration&quot;&gt;Record declaration&lt;/h4&gt; &lt;p&gt;The previous &lt;code&gt;large-records&lt;/code&gt; version used quotation in two places. First, it was using Template Haskell quotes for record definitions, something like:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb2-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;largeRecord defaultLazyOptions [d|&lt;/span&gt; &lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb2-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    data User = MkUser {&lt;/span&gt; &lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb2-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          name   :: String&lt;/span&gt; &lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb2-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , active :: Bool&lt;/span&gt; &lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb2-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        }&lt;/span&gt; &lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb2-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      deriving stock (Show, Eq)&lt;/span&gt; &lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb2-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  |]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The new version avoids this by using a &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.4/docs/html/users_guide/extending_ghc.html#parsed-representation&quot;&gt;&lt;code&gt;ghc&lt;/code&gt; source plugin&lt;/a&gt; instead of TH. The source plugin generates much the same code as the TH code used to do; if you’d like to see what definitions are generated, you can use&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb3-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# ANN type User largeRecordLazy { debugLargeRecords = True } #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;record-expressions&quot;&gt;Record expressions&lt;/h4&gt; &lt;p&gt;Record updates such as&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;setInactive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb4-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;setInactive u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u{active &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;were already supported by the old version (and are still supported by the new), since these rely only on &lt;code&gt;RecordDotSyntax&lt;/code&gt; as provided by &lt;a href=&quot;https://hackage.haskell.org/package/record-dot-preprocessor&quot;&gt;&lt;code&gt;record-dot-preprocessor&lt;/code&gt;&lt;/a&gt;. However, record &lt;em&gt;values&lt;/em&gt; required quasi-quotation in the previous version:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb5-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;john ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb5-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;john &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [lr| MkUser { name = &quot;john&quot;, active = True } |]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Here it was less obvious how to replace this with a source plugin, because we cannot see from the &lt;em&gt;syntax&lt;/em&gt; whether or not &lt;code&gt;MkUser&lt;/code&gt; is the constructor of a large record. Moreover, the old internal representation of large records (described in detail in &lt;a href=&quot;https://well-typed.com/blog/2021/08/large-records/&quot;&gt;Avoiding quadratic core code size with large records&lt;/a&gt;) meant that &lt;code&gt;ghc&lt;/code&gt; was not even aware of &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt; as record fields. This means that the source plugin must run &lt;em&gt;before&lt;/em&gt; the renamer: after all, name resolution would fail for these names. This in turn essentially means that the plugin gets the syntax to work with and nothing else.&lt;/p&gt; &lt;p&gt;The solution is an alternative internal representation of records, after a cunning idea from Adam Gundry. For our running example, the code that is generated for &lt;code&gt;User&lt;/code&gt; is&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb6-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; n a&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb6-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       (n &lt;span class=&quot;op&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, a &lt;span class=&quot;op&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;)&lt;/span&gt; &lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb6-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MkUser&lt;/span&gt; {&lt;/span&gt; &lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb6-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;           name   ::&lt;/span&gt; n&lt;/span&gt; &lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb6-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         ,&lt;span class=&quot;ot&quot;&gt; active ::&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb6-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This representation achieves two things:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;ghc&lt;/code&gt; won’t generate field accessors for fields with an existential type (avoiding quadratic blow-up)&lt;/li&gt; &lt;li&gt;but it still works much like a normal record constructor; in particular, record values such as &lt;code&gt;john&lt;/code&gt; work just fine.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This representation &lt;em&gt;does&lt;/em&gt; mean that regular record updates won’t work; something like&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb7-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;setInactive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb7-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;setInactive u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u { active &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;will result in an error&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Record update for insufficiently polymorphic field&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When using &lt;code&gt;RecordDotSyntax&lt;/code&gt; however all is fine, which was already a requirement for using &lt;code&gt;large-records&lt;/code&gt; anyway.&lt;/p&gt; &lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt; &lt;p&gt;The main benchmark for &lt;code&gt;large-records&lt;/code&gt; is a module containing a record declaration with &lt;code&gt;n&lt;/code&gt; fields with &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Generic&lt;/code&gt; and &lt;code&gt;HasField&lt;/code&gt; instances, and a &lt;code&gt;ToJSON&lt;/code&gt; instance defined using a generic function. See the &lt;a href=&quot;https://well-typed.com/blog/2021/08/large-records/#benchmarks&quot;&gt;Benchmarks section&lt;/a&gt; of the first blog post on &lt;code&gt;large-records&lt;/code&gt; for additional information.&lt;/p&gt; &lt;p&gt;The code generated by the new source plugin is very similar to the code that was previously generated by TH. Critically, it is still linear in the size of the record (unlike standard &lt;code&gt;ghc&lt;/code&gt;, which is quadratic); see to the &lt;a href=&quot;https://github.com/well-typed/large-records/tree/main/large-records-benchmarks/report&quot;&gt;full report on the (compile time) performance of &lt;code&gt;large-records&lt;/code&gt;&lt;/a&gt; for details. We therefore don’t expect any super-linear improvements in compilation time; indeed, improvement of compilation time was not the point of this refactoring (other than avoiding unnecessary recompilations due to TH). It is nonetheless nice to see that the plugin is roughly 25% faster than TH:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://well-typed.com/blog/aux/images/large-records-th-vs-plugin.png&quot; /&gt;&lt;/p&gt; &lt;p&gt;Although we didn’t measure it, avoiding quasi-quotation for record values should also help improve compilation time further, depending on how common these are in any particular codebase.&lt;/p&gt; &lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;large-records&lt;/code&gt; library is part of our work on improving compilation time on behalf of &lt;a href=&quot;https://juspay.in/&quot;&gt;Juspay&lt;/a&gt;. We have written extensively about these compilation time problems before (see blog posts tagged with &lt;a href=&quot;https://well-typed.com/blog/tags/compile-time-performance/&quot;&gt;compile-time-performance&lt;/a&gt;), and also have given various presentations on this topic (&lt;a href=&quot;https://www.youtube.com/watch?v=XXPWVPquYvw&quot;&gt;HIW 2021&lt;/a&gt;, &lt;a href=&quot;https://skillsmatter.com/skillscasts/17262-avoiding-quadratic-blow-up-during-compilation&quot;&gt;HaskellX 2021&lt;/a&gt;). This new release of &lt;code&gt;large-records&lt;/code&gt; is not fundamentally different to the previous. It still offers the same features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;linear-size &lt;code&gt;ghc&lt;/code&gt; code and therefore much better compilation time performance&lt;/li&gt; &lt;li&gt;stock derivation support (&lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;&lt;code&gt;Generics&lt;/code&gt; support (through &lt;code&gt;large-generics&lt;/code&gt; style generics, similar in style to &lt;a href=&quot;https://hackage.haskell.org/package/generics-sop&quot;&gt;&lt;code&gt;generics-sop&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;&lt;code&gt;HasField&lt;/code&gt; support for integration with &lt;a href=&quot;https://hackage.haskell.org/package/record-dot-preprocessor&quot;&gt;&lt;code&gt;record-dot-preprocessor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;However, the fact that Template Haskell quotes and quasi-quotation are no longer required in the new version should make for a much better user experience, as well as further speed up compilation time projects with deep module hierarchies.&lt;/p&gt; &lt;section class=&quot;footnotes&quot;&gt; &lt;hr /&gt; &lt;ol&gt; &lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Suppose module &lt;code&gt;B&lt;/code&gt; imports module &lt;code&gt;A&lt;/code&gt;. If &lt;code&gt;B&lt;/code&gt; uses Template Haskell splices, it will be recompiled whenever &lt;code&gt;A&lt;/code&gt; changes, whether or not the change to &lt;code&gt;A&lt;/code&gt; is relevant. Specifically, even with optimizations disabled, a change to the &lt;em&gt;implementation&lt;/em&gt; of a function in &lt;code&gt;A&lt;/code&gt; will trigger a recompilation of &lt;code&gt;B&lt;/code&gt;. The reason is that &lt;code&gt;B&lt;/code&gt; might &lt;em&gt;execute&lt;/em&gt; &lt;code&gt;f&lt;/code&gt; in the splice, and &lt;code&gt;ghc&lt;/code&gt; makes no attempt at all to figure out what the splice may or may not execute. We have recently improved this in &lt;code&gt;GHC HEAD&lt;/code&gt;; a blog post on that change is coming soon.&lt;a class=&quot;footnote-back&quot; href=&quot;https://well-typed.com/blog/rss2.xml#fnref1&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-23T00:00:00Z",
"URL":" https://well-typed.com/blog/2022/03/large-records-without-the-quotes "
}
,
{
"title":"Sandy Maguire: Review: Proof-Carrying Code",
"textBody":"&lt;p&gt;A few months ago, the excellent &lt;a href=&quot;https://davidrusu.github.io/&quot;&gt;David Rusu&lt;/a&gt; gave me an impromptu lecture on &lt;a href=&quot;https://en.wikipedia.org/wiki/Ring_signature&quot;&gt;ring signatures&lt;/a&gt;, which are a way of signing something as an anonymous member of a group. That is, you can show someone in the signing pool was actually responsible for signing the thing, but can’t determine &lt;em&gt;which member of the pool actually signed it.&lt;/em&gt; David walked me through all the math as to how that actually happens, but I was unable to follow it, because the math was hard and, perhaps more importantly, it felt like hand-compiling a proof.&lt;/p&gt; &lt;p&gt;What do I mean by “hand-compiling” a proof? Well, we have some mathematical object, something like&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;1003&quot;&gt;postulate&lt;/a&gt;   &lt;a id=&quot;Identity&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1015&quot; id=&quot;1015&quot;&gt;Identity&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1024&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1026&quot;&gt;Set&lt;/a&gt;   &lt;a id=&quot;Message&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1032&quot; id=&quot;1032&quot;&gt;Message&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1040&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1042&quot;&gt;Set&lt;/a&gt;   &lt;a id=&quot;SignedBy&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1048&quot; id=&quot;1048&quot;&gt;SignedBy&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1057&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1032&quot; id=&quot;1059&quot;&gt;Message&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1067&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1015&quot; id=&quot;1069&quot;&gt;Identity&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1078&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1080&quot;&gt;Set&lt;/a&gt;    &lt;a id=&quot;use-your-imagination&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1087&quot; id=&quot;1087&quot;&gt;use-your-imagination&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1108&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1110&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1111&quot; id=&quot;1111&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1113&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1115&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1118&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1120&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1111&quot; id=&quot;1122&quot;&gt;A&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;1125&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;SignedMessage&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1132&quot; id=&quot;1132&quot;&gt;SignedMessage&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1146&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1147&quot; id=&quot;1147&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1149&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;1151&quot;&gt;ℕ&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1152&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1154&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1155&quot; id=&quot;1155&quot;&gt;pool&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1160&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;1162&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1015&quot; id=&quot;1166&quot;&gt;Identity&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1147&quot; id=&quot;1175&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1176&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1178&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1180&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;1184&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;1192&quot;&gt;field&lt;/a&gt;     &lt;a id=&quot;SignedMessage.message&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1202&quot; id=&quot;1202&quot;&gt;message&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1210&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1032&quot; id=&quot;1212&quot;&gt;Message&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;1224&quot;&gt;@&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1225&quot;&gt;erased&lt;/a&gt;       &lt;a id=&quot;SignedMessage.signer&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1238&quot; id=&quot;1238&quot;&gt;signer&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1245&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Fin.Base.html#1126&quot; id=&quot;1247&quot;&gt;Fin&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1147&quot; id=&quot;1251&quot;&gt;n&lt;/a&gt;     &lt;a id=&quot;SignedMessage.signature&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1257&quot; id=&quot;1257&quot;&gt;signature&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1267&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1048&quot; id=&quot;1269&quot;&gt;SignedBy&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1202&quot; id=&quot;1278&quot;&gt;message&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1286&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1605&quot; id=&quot;1287&quot;&gt;lookup&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1155&quot; id=&quot;1294&quot;&gt;pool&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1238&quot; id=&quot;1299&quot;&gt;signer&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1305&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;where &lt;code&gt;@erased&lt;/code&gt; is Agda’s &lt;a href=&quot;https://agda.readthedocs.io/en/v2.6.2.1/language/runtime-irrelevance.html#runtime-irrelevance&quot;&gt;runtime irrelevance&lt;/a&gt; annotation, meaning the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1238&quot;&gt;signer&lt;/a&gt;&lt;/span&gt; field won’t exist at runtime. In fact, attempting to write a function that would extract it results in the following error:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Identifier &lt;code&gt;signer&lt;/code&gt; is declared erased, so it cannot be used here&lt;br /&gt; when checking that the expression &lt;code&gt;signer x&lt;/code&gt; has type &lt;code&gt;Fin n&lt;/code&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Nice one Agda!&lt;/p&gt; &lt;p&gt;Hand-compiling this thing is thus constructing some object that has the desired properties, but doing it in a way that requires BEING VERY SMART, and throwing away any chance at composability in the process. For example, it’d be nice to have the following:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;2045&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1132&quot; id=&quot;2050&quot;&gt;SignedMessage&lt;/a&gt;  &lt;a id=&quot;weakenL&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2065&quot; id=&quot;2065&quot;&gt;weakenL&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2073&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2075&quot;&gt;∀&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2077&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2078&quot; id=&quot;2078&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2080&quot; id=&quot;2080&quot;&gt;pool&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2085&quot; id=&quot;2085&quot;&gt;new-id&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2091&quot;&gt;}&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;2101&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1132&quot; id=&quot;2103&quot;&gt;SignedMessage&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2117&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2078&quot; id=&quot;2118&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2119&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2080&quot; id=&quot;2121&quot;&gt;pool&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;2134&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1132&quot; id=&quot;2136&quot;&gt;SignedMessage&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2150&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2085&quot; id=&quot;2151&quot;&gt;new-id&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;2158&quot;&gt;∷&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2080&quot; id=&quot;2160&quot;&gt;pool&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2164&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2065&quot; id=&quot;2166&quot;&gt;weakenL&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2174&quot; id=&quot;2174&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2176&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1087&quot; id=&quot;2178&quot;&gt;use-your-imagination&lt;/a&gt;  &lt;a id=&quot;weakenR&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2200&quot; id=&quot;2200&quot;&gt;weakenR&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2208&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2210&quot;&gt;∀&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2212&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2213&quot; id=&quot;2213&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2215&quot; id=&quot;2215&quot;&gt;pool&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2220&quot; id=&quot;2220&quot;&gt;new-id&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2226&quot;&gt;}&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;2236&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1132&quot; id=&quot;2238&quot;&gt;SignedMessage&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2252&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2213&quot; id=&quot;2253&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2254&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2215&quot; id=&quot;2256&quot;&gt;pool&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;2269&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1132&quot; id=&quot;2271&quot;&gt;SignedMessage&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2285&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2215&quot; id=&quot;2286&quot;&gt;pool&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#2709&quot; id=&quot;2291&quot;&gt;++&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#5750&quot; id=&quot;2294&quot;&gt;[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2220&quot; id=&quot;2296&quot;&gt;new-id&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#5750&quot; id=&quot;2303&quot;&gt;]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2304&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2200&quot; id=&quot;2306&quot;&gt;weakenR&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2314&quot; id=&quot;2314&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2316&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1087&quot; id=&quot;2318&quot;&gt;use-your-imagination&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;which would allow us to arbitrarily extend the pool of a signed message. Then, we could trivially construct one:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;sign&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2462&quot; id=&quot;2462&quot;&gt;sign&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2467&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1032&quot; id=&quot;2469&quot;&gt;Message&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2477&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2479&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2480&quot; id=&quot;2480&quot;&gt;who&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2484&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1015&quot; id=&quot;2486&quot;&gt;Identity&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2494&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2496&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1132&quot; id=&quot;2498&quot;&gt;SignedMessage&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#5750&quot; id=&quot;2512&quot;&gt;[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2480&quot; id=&quot;2514&quot;&gt;who&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#5750&quot; id=&quot;2518&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1202&quot; id=&quot;2520&quot;&gt;message&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;2530&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2462&quot; id=&quot;2531&quot;&gt;sign&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2536&quot; id=&quot;2536&quot;&gt;msg&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2540&quot; id=&quot;2540&quot;&gt;who&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2543&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2545&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2536&quot; id=&quot;2547&quot;&gt;msg&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1238&quot; id=&quot;2551&quot;&gt;signer&lt;/a&gt;    &lt;a class=&quot;Symbol&quot; id=&quot;2561&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2462&quot; id=&quot;2562&quot;&gt;sign&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2567&quot; id=&quot;2567&quot;&gt;msg&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2571&quot; id=&quot;2571&quot;&gt;who&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2574&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2576&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Fin.Base.html#1148&quot; id=&quot;2578&quot;&gt;zero&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1257&quot; id=&quot;2583&quot;&gt;signature&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2593&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2462&quot; id=&quot;2594&quot;&gt;sign&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2599&quot; id=&quot;2599&quot;&gt;msg&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2603&quot; id=&quot;2603&quot;&gt;who&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2606&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2608&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#1087&quot; id=&quot;2610&quot;&gt;use-your-imagination&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and then obfuscate who signed by some random choice of subsequent &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2065&quot;&gt;weakenL&lt;/a&gt;&lt;/span&gt;s and &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html#2200&quot;&gt;weakenR&lt;/a&gt;&lt;/span&gt;s.&lt;/p&gt; &lt;p&gt;Unfortunately, this is not the case with ring signatures. Ring signatures require you to “bake in” the signing pool when you construct your signature, and you can never again change that pool, short of doing all the work again. This behavior is non-composable, and thus, in my reckoning, unlikely to be a true solution to the problem.&lt;/p&gt; &lt;p&gt;The paper I chose to review this week is &lt;a href=&quot;https://www.cs.jhu.edu/~fabian/courses/CS600.624/proof-carrying-code.pdf&quot;&gt;Proof-Carrying Code&lt;/a&gt; by George Necula, in an attempt to understand if the PL literature has anything to say about this problem.&lt;/p&gt; &lt;p&gt;PCC is an old paper (from 1997, egads!) but it was the first thing I found on the subject. I should really get better at vetting my literature before I go through the effort of going through it, but hey, what are you going to do?&lt;/p&gt; &lt;p&gt;The idea behind PCC is that we want to execute some untrusted machine code. But we don’t want to sacrifice our system security to do it. And we don’t want to evaluate some safe language into machine code, because that would be too slow. Instead, we’ll send the machine code, as well as a safety proof that verifies it’s safe to execute this code. The safety proof is tied to the machine code, such that you can’t just generate a safety proof for an unrelated problem, and then attach it to some malicious code. But the safety proof isn’t obfuscated or anything; the claim is that if you can construct a safety proof for a given program, that program is necessarily safe to run.&lt;/p&gt; &lt;p&gt;On the runtime side, there is a simple algorithm for checking the safety proof, and it is independent of the arguments that the program is run with; therefore, we can get away with checking code once and evaluating it many times. It’s important that the algorithm be simple, because it’s a necessarily trusted piece of code, and it would be bad news if it were to have bugs.&lt;/p&gt; &lt;p&gt;PCC’s approach is a bit… unimaginative. For every opcode we’d like to allow in the programs, we attach a safety precondition, and a postcondition. Then, we map the vector of opcodes we’d like to run into its pre/post conditions, and make sure they are confluent. If they are, we’re good to go. This vector of conditions is called the vector VC in the paper.&lt;/p&gt; &lt;p&gt;So, the compiler computes the VC and attaches it to the code. Think of the VC as a proposition of safety (that is, a type), and a proof of that proposition (the VC itself.) In order to validate this, the runtime does a safety typecheck, figuring out what the proposition of safety would have to be. It compares this against the attached proof, and if they match, it typechecks the VC to ensure it has the type it says. If it does, our code is safe.&lt;/p&gt; &lt;p&gt;The PCC paper is a bit light on details here, so it’s worth thinking about exactly what’s going on here. Presumably determining the safety preconditions is an easy problem if we can do it at runtime, but proving some code satisfies it is hard, &lt;em&gt;or else we could just do that at runtime too.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;I’m a bit hesitant to dive into the details here, because I don’t really care about determining whether some blob of machine code is safe to run. It’s a big ball of poorly typed typing judgments about memory usage. Why do I say poorly typed? Well consider one of the rules from the paper:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;m⊢e:τliste≠0m⊢e:addr∧…&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \frac{m \vdash e : \tau \text{list} \quad \quad e \neq 0}      {m \vdash e : \text{addr} \wedge \ldots} &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.3714em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⊢&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;addr&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∧&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width: 0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⊢&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;τ&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;list&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right: 1em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right: 1em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mord vbox&quot;&gt;&lt;span class=&quot;thinbox&quot;&gt;&lt;span class=&quot;rlap&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;inner&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fix&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.686em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Here we have that from &lt;code&gt;e : List τ&lt;/code&gt; (and that &lt;code&gt;e&lt;/code&gt; isn’t 0) we can derive &lt;code&gt;e : addr&lt;/code&gt;. At best, if we are charitable in assuming &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;e≠0&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;e \neq 0&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mord vbox&quot;&gt;&lt;span class=&quot;thinbox&quot;&gt;&lt;span class=&quot;rlap&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;inner&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fix&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; means that &lt;code&gt;e&lt;/code&gt; isn’t &lt;code&gt;nil&lt;/code&gt;, there is a type preservation error here. If we are less charitable, there is also some awful type error here involving 0, which might be a null check or something? This seems sufficiently messy that I don’t care enough to decipher it.&lt;/p&gt; &lt;p&gt;How applicable is any of this to our original question around ring signatures? Not very, I think, unfortunately. We already have the ring signature math if we’d like to encode a proof, and the verification of it is easy enough. But it’s still not very composable, and I doubt this paper will add much there. Some more promising approaches would be to draw the mystery commutative diagrams ala &lt;a href=&quot;https://reasonablypolymorphic.com/blog/adders-and-arrows&quot;&gt;Adders and Arrows&lt;/a&gt;, starting from a specification and deriving a chain of proofs that the eventual implementation satisfies the specification. The value there is in all the intermediary nodes of the commutative diagram, and whether we can prove weakening lemmas there.&lt;/p&gt; &lt;p&gt;But PCC isn’t entirely a loss; I learned about &lt;code&gt;@erased&lt;/code&gt; in Agda.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-22T00:00:00Z",
"URL":" https://reasonablypolymorphic.com/blog/proof-carrying-code/index.html "
}
,
{
"title":"Mike Izbicki: Fixing North Korea's KCNA Webpage",
"textBody":"&lt;h1&gt;Fixing North Korea's KCNA Webpage  &lt;/h1&gt; &lt;div class=&quot;info&quot;&gt;              posted on 2022-03-22                &lt;/div&gt; &lt;p&gt;I occasionally have skype calls with computer programmers in North Korea, and one of the things we talk about is how to improve their internet infrastructure. Recently, we talked about how their &lt;a href=&quot;http://kcna.kp&quot;&gt;kcna.kp&lt;/a&gt; webpage was using javascript incorrectly. This error prevented other websites from linking to articles published on &lt;a href=&quot;http://kcna.kp&quot;&gt;kcna.kp&lt;/a&gt; and Google from searching those articles.&lt;/p&gt;  &lt;p&gt;This minor technical problem had geopolitical implications. KCNA is the main newspaper in North Korea, and &lt;a href=&quot;https://www.armscontrolwonk.com/archive/1206662/identifying-dprk-machine-plants/&quot;&gt;policy&lt;/a&gt; &lt;a href=&quot;https://www.armscontrolwonk.com/archive/1201459/a-tale-of-two-visits/&quot;&gt;wonks&lt;/a&gt; &lt;a href=&quot;https://www.jstor.org/stable/23526525&quot;&gt;closely&lt;/a&gt; &lt;a href=&quot;https://www.jstor.org/stable/26915825&quot;&gt;analyze&lt;/a&gt; &lt;a href=&quot;https://www.jstor.org/stable/48610387&quot;&gt;KCNA’s&lt;/a&gt; &lt;a href=&quot;https://keia.org/the-peninsula/is-there-a-connection-between-north-korean-rhetoric-and-action/&quot;&gt;articles&lt;/a&gt; &lt;a href=&quot;https://keia.org/the-peninsula/has-north-korean-rhetoric-changed-under-kim-jong-un/&quot;&gt;in&lt;/a&gt; &lt;a href=&quot;https://www.northkoreatech.org/2013/01/05/kcna-updates-its-web-site/&quot;&gt;order&lt;/a&gt; &lt;a href=&quot;https://www.northkoreatech.org/2013/12/11/kcna-deleted-then-restored-old-reports-on-jang/&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;https://www.38north.org/2021/09/initial-analysis-of-north-koreas-new-type-long-range-cruise-missile/&quot;&gt;better&lt;/a&gt; &lt;a href=&quot;https://www.38north.org/2020/08/mwilliams082820/&quot;&gt;understand&lt;/a&gt; &lt;a href=&quot;https://www.38north.org/2018/12/editor122118/&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://oneearthfuture.org/research-analysis/brief-19-october-2021-submarine-launched-ballistic-missile-test-democratic-peoples&quot;&gt;North&lt;/a&gt; &lt;a href=&quot;https://oneearthfuture.org/research-analysis/observations-28-september-2021-hypersonic-missile-test-democratic-peoples&quot;&gt;Korean&lt;/a&gt; &lt;a href=&quot;https://oneearthfuture.org/research-analysis/preliminary-analysis-30-september-2021-anti-aircraft-missile-test-dprk&quot;&gt;government&lt;/a&gt;. A broken KCNA website makes their jobs harder and reduces the quality of discussion about North Korean policy.&lt;/p&gt;    &lt;p&gt;As of 22 February, these problems with the KCNA webpage are now fixed.&lt;/p&gt; &lt;p&gt;To illustrate the changes that the KCNA web developers made, we’ll use the Internet Archive’s &lt;a href=&quot;https://archive.org/web/&quot;&gt;Wayback Machine&lt;/a&gt; to look at old versions of the website. The first snapshot of the kcna.kp webpage is from &lt;a href=&quot;https://web.archive.org/web/20110420214617id_/http://www.kcna.kp/&quot;&gt;20-April-2011&lt;/a&gt;.&lt;a class=&quot;footnoteRef&quot; href=&quot;https://izbicki.me/blog/category/computer-science/feed#fn1&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The front page shows Kim Jong Il performing &lt;a href=&quot;https://en.wikipedia.org/wiki/On-the-spot_guidance&quot;&gt;on-the-spot guidance&lt;/a&gt;, and is the sort of picture that wonks go &lt;a href=&quot;https://www.armscontrolwonk.com/archive/1206662/identifying-dprk-machine-plants/&quot;&gt;crazy&lt;/a&gt; &lt;a href=&quot;https://www.armscontrolwonk.com/archive/1201459/a-tale-of-two-visits/&quot;&gt;over&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20110420214617id_/http://www.kcna.kp/&quot;&gt;&lt;img src=&quot;https://izbicki.me/blog/category/img/kcna-2011-04-20.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The webpage is reasonably nice looking, but if you click on any of the article links in the snapshot page, you’ll notice that they don’t work anymore. There’s no way to see the contents of these older articles or their associated images.&lt;/p&gt; &lt;p&gt;Inspecting the HTML source code we can see why. All the link tags look something like&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;javascript:onNews('specialnews','2011','410796')&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you click the link, your browser calls the javascript &lt;code&gt;onNews&lt;/code&gt; function. This function is custom written for the KCNA webpage, and makes an &lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_(programming)&quot;&gt;AJAX call&lt;/a&gt; to display the article’s contents. Unfortunately, web crawlers cannot access the contents of these AJAX calls unless &lt;a href=&quot;https://developers.google.com/search/docs/advanced/javascript/javascript-seo-basics&quot;&gt;special procedures are followed&lt;/a&gt;, and the KCNA webpage did not follow these procedures. So the Internet Archive was not able to archive these links, and this bit of history is lost.&lt;a class=&quot;footnoteRef&quot; href=&quot;https://izbicki.me/blog/category/computer-science/feed#fn2&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The Wayback Machine has collected 2395 more snapshots of the KCNA webpage up through today. Looking through these records we can see that the &lt;a href=&quot;http://kcna.kp&quot;&gt;kcna.kp&lt;/a&gt; website was &lt;a href=&quot;https://www.northkoreatech.org/2013/01/05/kcna-updates-its-web-site/&quot;&gt;redesigned in January 2013&lt;/a&gt;, and this redesign broke the webpage even more. The redesigned webpage uses javascript even for displaying the main body of the webpage, and so not even the homepage can be archived. The &lt;a href=&quot;https://web.archive.org/web/20130101055231/http://www.kcna.kp/&quot;&gt;snapshot from 1-January-2013&lt;/a&gt; is the last working snapshot before this redesign.&lt;/p&gt; &lt;p&gt;After 9 years, the webpage was finally fixed last month on &lt;a href=&quot;https://web.archive.org/web/20220222204929/http://www.kcna.kp/kp&quot;&gt;22-February-2022&lt;/a&gt;. The new webpage looks like:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20220221171219/http://kcna.kp/en&quot;&gt;&lt;img src=&quot;https://izbicki.me/blog/category/img/kcna-2022-02-22.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The important part, however, is the underlying HTML code. The link tags now use standard HTML to include the URL directly in the tag with no javascript. For example, the link to the top article about Kim Jong Un above looks like&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;/kp/article/q/320150e5ae8e9bc8fdf3d6b8547eaeaf.kcmsf&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Crawlers are able to follow these links. So now, after a 9 year hiatus, the internet archive is once again able to archive articles from the KCNA. You can view the article above &lt;a href=&quot;https://web.archive.org/kcna.kp/en/article/q/320150e5ae8e9bc8fdf3d6b8547eaeaf.kcmsf&quot;&gt;permanently archived in the Internet Archive repository&lt;/a&gt; along with &lt;a href=&quot;https://web.archive.org/web/20220319093758/http://www.kcna.kp/en/media/photo/q/7abbae141596343a8761da6b3daa93ceec49c8c7bfb7b3e27295d87c32995946.kcmsf&quot;&gt;26 associated pictures&lt;/a&gt;. These automated archives of the KCNA are especially important for Western researchers because the KCNA is &lt;a href=&quot;https://www.northkoreatech.org/2013/12/11/kcna-deleted-then-restored-old-reports-on-jang/&quot;&gt;known to have altered historic articles&lt;/a&gt; in response to domestic purges.&lt;/p&gt; &lt;p&gt;Furthermore, Google&lt;a class=&quot;footnoteRef&quot; href=&quot;https://izbicki.me/blog/category/computer-science/feed#fn3&quot; id=&quot;fnref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; is now able to index the KCNA’s articles. So analysts can do searches like &lt;a href=&quot;https://www.google.com/search?q=site%3Akcna.kp+united+states&quot;&gt;&lt;code&gt;site:kcna.kp united states&lt;/code&gt;&lt;/a&gt; to find KCNA articles mentioning a topic of interest like the United States:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.google.com/search?q=site%3Akcna.kp+united+states&quot;&gt;&lt;img src=&quot;https://izbicki.me/blog/category/img/kcna-google.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;These usability improvements will help Western researchers navigate the KCNA’s published articles and learn about the DPRK. But there are still unfortunately some major problems with the webpage.&lt;/p&gt; &lt;p&gt;For example, if you click on any of the google links above, you’ll be taken to the “secure” webpage using the HTTPS protocol (instead of the HTTP protocol). Ordinarily, that’s a good thing, but the KCNA webpage uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Self-signed_certificate&quot;&gt;self-signed certificate&lt;/a&gt;, so you get a scary looking error message. On firefox, it looks like:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://kcna.kp&quot;&gt;&lt;img src=&quot;https://izbicki.me/blog/category/img/kcna-ssl.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;At first glance, this error message makes it look like the KCNA webpage might have something dangerous like a virus on it. That’s not the case though. The message just means that the webpage isn’t properly encrypted.&lt;/p&gt; &lt;p&gt;The North Korean government wants to fix these problems, and we should too. It’s in both their interest and ours to improve the communication between our countries’ foreign policy experts. Unfortunately, the current US sanctions regime makes this difficult. I have a standing invitation from my North Korean colleagues to visit them and teach about modern web standards, but the US has &lt;a href=&quot;https://www.bbc.com/news/world-asia-40680500&quot;&gt;banned American passport holders from entering North Korea&lt;/a&gt;. So American sanctions are effectively preventing North Korea from improving their internet.&lt;/p&gt;  &lt;div class=&quot;footnotes&quot;&gt; &lt;hr /&gt; &lt;ol&gt; &lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Prior to 2011, the KCNA was hosted online at &lt;a class=&quot;uri&quot; href=&quot;http://kcna.co.jp&quot;&gt;http://kcna.co.jp&lt;/a&gt;, and the Wayback Machine &lt;a href=&quot;https://web.archive.org/web/2019*/http://kcna.co.jp/&quot;&gt;has archives&lt;/a&gt; going back to 1997. Like most other webpages of that era, the kcna.co.jp webpage used simple HTML and had a rather crude appearance. The switch to the .kp ccTLD also entailed a rewrite of the interface to make it prettier and more modern. This rewrite introduced the javascript bugs described in this post. An archived post from North Korea Tech &lt;a href=&quot;https://www.northkoreatech.org/2010/12/04/kcna-refreshes-its-website/&quot;&gt;describes the switch from the kcna.co.jp domain to kcna.kp&lt;/a&gt;.&lt;a href=&quot;https://izbicki.me/blog/category/computer-science/feed#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;Technically, the contents of the KCNA articles themselves are not lost, they’re just much more difficult to access. Libraries maintain print copies of KCNA publications, and there is a custom archiver/search engine &lt;a class=&quot;uri&quot; href=&quot;https://kcnawatch.org&quot;&gt;https://kcnawatch.org&lt;/a&gt; that was built specifically for tracking North Korean media. But the average policy researcher or reporter doesn’t have access to these resources, and so from their perspective this history was lost.&lt;a href=&quot;https://izbicki.me/blog/category/computer-science/feed#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;Other search engines are able to index kcna.kp now too, but the process takes time, especially for low traffic webpages. As of 22-Mar-2022, &lt;a href=&quot;https://yandex.com/search/?text=site%3Akcna.kp+united+states&quot;&gt;Yandex&lt;/a&gt; had indexed kcna.kp, but &lt;a href=&quot;https://www.bing.com/search?q=site%3A.kcna.kp+united+states&quot;&gt;Bing&lt;/a&gt; and &lt;a href=&quot;http://www.baidu.com/s?wd=site%3Akcna.kp%20united%20states&quot;&gt;Baidu&lt;/a&gt; had not.&lt;a href=&quot;https://izbicki.me/blog/category/computer-science/feed#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-22T00:00:00Z",
"URL":" http://izbicki.me/blog/fixing-north-korea-kcna-webpage.html "
}
,
{
"title":"Monday Morning Haskell: An Alternative Approach",
"textBody":"&lt;p&gt;Part of what monads do is that they encapsulate side effects. They typically include activity that is not a simple and pure calculation like &lt;code&gt;2 + 2&lt;/code&gt;. Because of this, there is a much higher chance that monadic actions will &quot;fail&quot; in some way. They won't be able to achieve the stated goal of the computation and will enter some kind of exceptional flow. There are a number of different classes that help us deal with these failures in reasonable ways. They'll also enable us to write code that can work with many different monads. These classes are &lt;code&gt;Alternative&lt;/code&gt;, &lt;code&gt;MonadFail&lt;/code&gt;, and &lt;code&gt;MonadPlus&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Alternative&lt;/code&gt; class works for all &quot;applicative&quot; types, so it actually applies more broadly than monads. But still, most of the common users of it are monads. As you might guess, this class allows us to say, &quot;In case this action fails, do this instead.&quot; It has two primary functions: &lt;code&gt;empty&lt;/code&gt; and the operator &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;empty&lt;/code&gt; function provides a &quot;failure&quot; condition of sorts. What happens when we can't execute the monadic (or applicative) action? For a monad like &lt;code&gt;Maybe&lt;/code&gt;, the outcome of this is still something we could resolve with &quot;pure&quot; code. We just get the value &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;instance Alternative Monad where   empty = Nothing   ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, &lt;code&gt;IO&lt;/code&gt; provides a failure mechanism that will cause a runtime error if the operation doesn't succeed:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;instance Alternative IO where   empty = failIO &quot;mzero&quot;   ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;code&gt;failIO&lt;/code&gt; will throw an &lt;code&gt;IOError&lt;/code&gt; that will crash our whole program unless it gets caught elsewhere. The word &quot;mzero&quot; is a default failure message that will make more sense in a second!&lt;/p&gt; &lt;p&gt;Now the &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; operator is, of course intended to look like the &quot;or&quot; operator &lt;code&gt;(||)&lt;/code&gt;. It takes two different actions as its inputs. It allows us to provide a different action to run if our first fails. So for &lt;code&gt;Maybe&lt;/code&gt;, we can see if our first result is &lt;code&gt;Nothing&lt;/code&gt;. And if so, we'll resolve the second &lt;code&gt;Maybe&lt;/code&gt; value. Of course, this second value might also be &lt;code&gt;Nothing&lt;/code&gt;! Using alternatives doesn't always guarantee success!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;instance Alternative Monad where   empty = Nothing   m1 &amp;lt;|&amp;gt; m2 = case m1 of     Nothing -&amp;gt; m2     justValue -&amp;gt; justValue&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We can see this in action:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;&amp;gt;&amp;gt; let f x = if even x then Just (quot x 2) else Nothing &amp;gt;&amp;gt; f 4 Just 2 &amp;gt;&amp;gt; f 3 Nothing &amp;gt;&amp;gt; f 4 &amp;lt;|&amp;gt; f 8 Just 2 &amp;gt;&amp;gt; f 5 &amp;lt;|&amp;gt; f 8 Just 4 &amp;gt;&amp;gt; f 3 &amp;lt;|&amp;gt; f 5 Nothing&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With &lt;code&gt;IO&lt;/code&gt;, we actually need to catch the exception thrown by &lt;code&gt;failIO&lt;/code&gt; and then perform the next action:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;instance Alternative IO where   empty = failIO &quot;mzero&quot;   action1 &amp;lt;|&amp;gt; action2 = action1 `catchException` (\_ :: IOError -&amp;gt; action2)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here's a quick look at these functions with an &lt;code&gt;IO&lt;/code&gt; action:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;&amp;gt;&amp;gt; readFile &quot;does_not_exist.txt&quot; Error: openFile: does not exist (No such file or directory) &amp;gt;&amp;gt; readFile &quot;does_not_exist.txt&quot; &amp;lt;|&amp;gt; readFile &quot;does_exist.txt&quot; &quot;Text in second file&quot;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There are a couple other functions we can use with &lt;code&gt;Alternative&lt;/code&gt; to provide a list of outcomes. The &lt;code&gt;many&lt;/code&gt; function will take a single operation and run it repeatedly until the operation fails by returning &lt;code&gt;empty&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;many :: (Alternative f) =&amp;gt; f a -&amp;gt; f [a]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this case, we are guaranteed that the result of the function is never an error (&lt;code&gt;empty&lt;/code&gt;)! If the first attempt at the operation fails, we'll get an empty list.&lt;/p&gt; &lt;p&gt;But if we want to enforce that it will succeed at least once, we can use &lt;code&gt;some&lt;/code&gt; instead:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;some :: (Alternative f) =&amp;gt; f a -&amp;gt; f [a]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This cannot return an empty list. If the first result is &lt;code&gt;empty&lt;/code&gt;, it will give the failure action.&lt;/p&gt; &lt;p&gt;It may seem a little odd that these functions take only a single action, rather than a list of actions. But these functions (and the &lt;code&gt;Alternative&lt;/code&gt; class in general) lie at the heart of many parsing operations! You can learn more about that in our &lt;a href=&quot;https://www.mmhaskell.com/parsing&quot;&gt;Parsing series&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There are a couple other classes that build on these &lt;code&gt;Alternative&lt;/code&gt; ideas. The &lt;code&gt;MonadFail&lt;/code&gt; class has one function: &lt;code&gt;fail&lt;/code&gt;. This function takes a string as an argument and will perform an appropriate failure action, often involving a runtime error:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;class MonadFail m where   fail :: String -&amp;gt; m a&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then there's &lt;code&gt;MonadPlus&lt;/code&gt;. This takes the essential activities of &lt;code&gt;Alternative&lt;/code&gt; and raises them to be monad-specific. It has &lt;code&gt;mzero&lt;/code&gt;, which mimics &lt;code&gt;empty&lt;/code&gt;, and &lt;code&gt;mplus&lt;/code&gt;, which works like &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt;. &lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;instance (Alternative m, Monad m) =&amp;gt; MonadPlus m where   mzero :: m a   mplus :: m a -&amp;gt; m a -&amp;gt; m a&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Often, the underlying alternative functions are used as the default instances, and there is no change in behavior. I personally find it a little confusing that &quot;plus&quot; is an &quot;or&quot; operation instead of &quot;and&quot; operation. I would expect that &quot;adding&quot; two operations would perform the first and then the second in succession. But this isn't what happens! If the first succeeds, the second never occurs.&lt;/p&gt; &lt;p&gt;Hopefully these different classes help you to write cleaner monadic operations. To learn more about the basics and fundamentals of monads, you should read our series on &lt;a href=&quot;https://www.mmhaskell.com/monads&quot;&gt;Monads and Functional Structures&lt;/a&gt; and &lt;a href=&quot;https://www.mmhaskell.com/subscribe&quot;&gt;subscribe&lt;/a&gt; to our newsletter!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-21T14:30:00Z",
"URL":" https://mmhaskell.com/blog/2022/3/21/an-alternative-approach "
}
,
{
"title":"Stackage Blog: LTS 19 release and Nightly on ghc-9.2",
"textBody":"&lt;p&gt;The Stackage team is very happy to announce the initial &lt;a href=&quot;https://www.stackage.org/lts-19.0&quot;&gt;Stackage LTS version 19&lt;/a&gt; snapshot release is now available, based on GHC version 9.0.2. This release is significant for several reasons:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;not only is it the first stable LTS release based on ghc9,&lt;/li&gt; &lt;li&gt;it also includes many significant &lt;a href=&quot;https://www.stackage.org/diff/lts-18.28/lts-19.0&quot;&gt;upgrades&lt;/a&gt;, including aeson-2.0 with improved security, and&lt;/li&gt; &lt;li&gt;it is also the largest stable LTS release we have ever done: just 1 short of 2900 packages!&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of course it is still possible to get your package added to lts-19, if it builds with lts19 and you missed to get it into Nightly in time for the initial lts-19.0 build: using our straightforward process - just open a github issue in the &lt;a href=&quot;https://github.com/commercialhaskell/lts-haskell/issues&quot;&gt;lts-haskell&lt;/a&gt; project and following the template there.&lt;/p&gt; &lt;p&gt;Thank you to the great Haskell community for all the many contributions you are making - do keep them coming!&lt;/p&gt; &lt;p&gt;At the same time we are also excited to &lt;a href=&quot;https://www.stackage.org/nightly-2022-03-19&quot;&gt;move Nightly now to GHC 9.2.2&lt;/a&gt; - enjoy!  Apparently there will be a 9.2.3 bugfix release coming, so we will update Nightly to that after it is released.&lt;/p&gt; &lt;p&gt;Quite a number of Nightly packages had to be &lt;a href=&quot;https://www.stackage.org/diff/nightly-2022-03-17/nightly-2022-03-19&quot;&gt;disabled&lt;/a&gt; as part of the upgrade to 9.2. This is being tracked in &lt;a href=&quot;https://github.com/commercialhaskell/stackage/issues/6486&quot;&gt;https://github.com/commercialhaskell/stackage/issues/6486&lt;/a&gt;: if you find your package listed there, you can help to update it to build with ghc-9.2 and Stackage Nightly, thank you!&lt;/p&gt; &lt;p&gt;Help us make the next LTS 20 an even bigger and better release!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-20T05:00:00Z",
"URL":" https://www.stackage.org/blog/2022/03/announce-lts-19-nightly-ghc9.2 "
}
,
{
"title":"Sandy Maguire: Review: Syntax-Guided Synthesis",
"textBody":"&lt;p&gt;I was describing my idea from &lt;a href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp&quot;&gt;last week&lt;/a&gt; to &lt;a href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/#future-work&quot;&gt;automatically optimize programs&lt;/a&gt; to Colin, who pointed me towards &lt;a href=&quot;https://sygus.org/assets/pdf/Journal_SyGuS.pdf&quot;&gt;Syntax-Guided Synthesis&lt;/a&gt; by Alur et al.&lt;/p&gt; &lt;p&gt;Syntax-Guided Synthesis is the idea that free-range program synthesis is really hard, so instead, let’s constrain the search space with a grammar of allowable programs. We can then enumerate those possible programs, attempting to find one that satisfies some constraints. The idea is quite straightforward when you see it, but that’s not to say it’s unimpressive; the paper has lots of quantitative results about exactly how well this approach does.&lt;/p&gt; &lt;p&gt;The idea is we want to find programs with type &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot;&gt;I&lt;/a&gt;&lt;/span&gt; &lt;code&gt;→&lt;/code&gt; &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5703&quot;&gt;O&lt;/a&gt;&lt;/span&gt;, that satisfy some &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot;&gt;spec&lt;/a&gt;&lt;/span&gt;ification. We’ll do that by picking some &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot;&gt;Lang&lt;/a&gt;&lt;/span&gt;uage of syntax, and trying to build our programs there.&lt;/p&gt; &lt;p&gt;All of this is sorta moot, because we assume we have some &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot;&gt;oracle&lt;/a&gt;&lt;/span&gt; which can tell us if our program satisfies the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot;&gt;spec&lt;/a&gt;&lt;/span&gt;. But the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot;&gt;oracle&lt;/a&gt;&lt;/span&gt; is probably some SMT solver, and is thus expensive to call, so we’d like to try hard not to call it if possible.&lt;/p&gt; &lt;p&gt;Let’s take an example, and say that we’d like to synthesize the &lt;code&gt;max&lt;/code&gt; of two &lt;code class=&quot;sourceCode agda&quot;&gt;Nat&lt;/code&gt;s. There are lots of ways of doing that! But we’d like to find a function that satisfies the following:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;2068&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;MaxSpec&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot; id=&quot;2073&quot;&gt;MaxSpec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2081&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2082&quot; id=&quot;2082&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2084&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2086&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;2088&quot;&gt;×&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2090&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2092&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2094&quot;&gt;ℕ&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2095&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2097&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2099&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;2101&quot;&gt;×&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2103&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2105&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;2107&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;2111&quot;&gt;where&lt;/a&gt;   &lt;a id=&quot;MaxSpec.is-max&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2119&quot; id=&quot;2119&quot;&gt;is-max&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2126&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2128&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2129&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2131&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2133&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2135&quot;&gt;ℕ&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2136&quot;&gt;}&lt;/a&gt;          &lt;a class=&quot;Symbol&quot; id=&quot;2147&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2149&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1535&quot; id=&quot;2151&quot;&gt;≤&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2082&quot; id=&quot;2153&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2155&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2156&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;2158&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2160&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2161&quot;&gt;)&lt;/a&gt;          &lt;a class=&quot;Symbol&quot; id=&quot;2172&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2174&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1535&quot; id=&quot;2176&quot;&gt;≤&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2082&quot; id=&quot;2178&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2180&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2181&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;2183&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2185&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2186&quot;&gt;)&lt;/a&gt;          &lt;a class=&quot;Symbol&quot; id=&quot;2197&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2199&quot;&gt;((&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2082&quot; id=&quot;2201&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2203&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2204&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;2206&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2208&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2209&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#151&quot; id=&quot;2211&quot;&gt;≡&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2213&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2214&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#734&quot; id=&quot;2216&quot;&gt;⊎&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2218&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2082&quot; id=&quot;2219&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2221&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2222&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;2224&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2226&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2227&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#151&quot; id=&quot;2229&quot;&gt;≡&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2231&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2232&quot;&gt;))&lt;/a&gt;          &lt;a class=&quot;Symbol&quot; id=&quot;2244&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot; id=&quot;2246&quot;&gt;MaxSpec&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2082&quot; id=&quot;2254&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2256&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2129&quot; id=&quot;2257&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;2259&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2131&quot; id=&quot;2261&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2262&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;If we can successfully produce an element of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot;&gt;MaxSpec&lt;/a&gt;&lt;/span&gt; &lt;code&gt;f&lt;/code&gt;, we have a proof that &lt;code&gt;f&lt;/code&gt; is an implementation of &lt;code&gt;max&lt;/code&gt;. Of course, actually producing such a thing is rather tricky; it’s equivalent to determining if &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot;&gt;MaxSpec&lt;/a&gt;&lt;/span&gt; &lt;code&gt;f&lt;/code&gt; is &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1511&quot;&gt;Dec&lt;/a&gt;&lt;/span&gt;idable for the given input.&lt;/p&gt; &lt;p&gt;In the first three cases, we have some conflicting piece of information, so we are unable to produce a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot;&gt;MaxSpec&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;decideMax&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2679&quot; id=&quot;2679&quot;&gt;decideMax&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2689&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2691&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2692&quot; id=&quot;2692&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2694&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2696&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;2698&quot;&gt;×&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2700&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2702&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2704&quot;&gt;ℕ&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2705&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2707&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2709&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2710&quot; id=&quot;2710&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2712&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2714&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;2716&quot;&gt;×&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;2718&quot;&gt;ℕ&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2719&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2721&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1511&quot; id=&quot;2723&quot;&gt;Dec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2727&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot; id=&quot;2728&quot;&gt;MaxSpec&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2692&quot; id=&quot;2736&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2710&quot; id=&quot;2738&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2739&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2679&quot; id=&quot;2741&quot;&gt;decideMax&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2751&quot; id=&quot;2751&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2753&quot; id=&quot;2753&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2754&quot;&gt;@(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2756&quot; id=&quot;2756&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;2758&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2760&quot; id=&quot;2760&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2761&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;2763&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2751&quot; id=&quot;2768&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2753&quot; id=&quot;2770&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2772&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.html#2382&quot; id=&quot;2774&quot;&gt;inspect&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2751&quot; id=&quot;2782&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2753&quot; id=&quot;2784&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2786&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2790&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2792&quot; id=&quot;2792&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2794&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.html#2356&quot; id=&quot;2796&quot;&gt;[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2798&quot; id=&quot;2798&quot;&gt;fi≡o&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.html#2356&quot; id=&quot;2803&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;2805&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;2810&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#5518&quot; id=&quot;2812&quot;&gt;≤?&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2792&quot; id=&quot;2815&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2817&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;2819&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#5518&quot; id=&quot;2821&quot;&gt;≤?&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2792&quot; id=&quot;2824&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2826&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2830&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;2832&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2835&quot; id=&quot;2835&quot;&gt;¬x≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2840&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2842&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2844&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;2846&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2849&quot;&gt;λ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2851&quot;&gt;{&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2853&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2119&quot; id=&quot;2854&quot;&gt;is-max&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2861&quot; id=&quot;2861&quot;&gt;x≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2865&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2867&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2870&quot;&gt;→&lt;/a&gt;         &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.Negation.Core.html#778&quot; id=&quot;2880&quot;&gt;contradiction&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2894&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4748&quot; id=&quot;2895&quot;&gt;≤-trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2861&quot; id=&quot;2903&quot;&gt;x≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2907&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4459&quot; id=&quot;2908&quot;&gt;≤-reflexive&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;2920&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2924&quot;&gt;))&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2835&quot; id=&quot;2927&quot;&gt;¬x≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2932&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2934&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2938&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1648&quot; id=&quot;2940&quot;&gt;yes&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2944&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2946&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;2948&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2951&quot; id=&quot;2951&quot;&gt;¬y≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2956&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;2958&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2961&quot;&gt;λ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2963&quot;&gt;{&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2965&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2119&quot; id=&quot;2966&quot;&gt;is-max&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2973&quot; id=&quot;2973&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2975&quot; id=&quot;2975&quot;&gt;y≤o&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2979&quot; id=&quot;2979&quot;&gt;x₂&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2981&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2983&quot;&gt;→&lt;/a&gt;         &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.Negation.Core.html#778&quot; id=&quot;2993&quot;&gt;contradiction&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3007&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4748&quot; id=&quot;3008&quot;&gt;≤-trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2975&quot; id=&quot;3016&quot;&gt;y≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3020&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4459&quot; id=&quot;3021&quot;&gt;≤-reflexive&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3033&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3037&quot;&gt;))&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2951&quot; id=&quot;3040&quot;&gt;¬y≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3045&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3047&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3051&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1648&quot; id=&quot;3053&quot;&gt;yes&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3057&quot; id=&quot;3057&quot;&gt;x≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3061&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1648&quot; id=&quot;3063&quot;&gt;yes&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3067&quot; id=&quot;3067&quot;&gt;y≤o&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;3071&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3076&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#2529&quot; id=&quot;3078&quot;&gt;≟&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3080&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3082&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3084&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#2529&quot; id=&quot;3086&quot;&gt;≟&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3088&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3090&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3094&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;3096&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3099&quot; id=&quot;3099&quot;&gt;x≠o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3103&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;3105&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3108&quot; id=&quot;3108&quot;&gt;y≠o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3112&quot;&gt;=&lt;/a&gt;         &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;3122&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3125&quot;&gt;λ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3127&quot;&gt;{&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3129&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2119&quot; id=&quot;3130&quot;&gt;is-max&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3137&quot; id=&quot;3137&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3139&quot; id=&quot;3139&quot;&gt;x₁&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3142&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;3143&quot;&gt;inj₁&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3148&quot; id=&quot;3148&quot;&gt;x₂&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3150&quot;&gt;))&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3153&quot;&gt;→&lt;/a&gt;                   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.Negation.Core.html#778&quot; id=&quot;3173&quot;&gt;contradiction&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3187&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1729&quot; id=&quot;3188&quot;&gt;trans&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3194&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;3195&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3199&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3203&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3148&quot; id=&quot;3205&quot;&gt;x₂&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3207&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3099&quot; id=&quot;3209&quot;&gt;x≠o&lt;/a&gt;              &lt;a class=&quot;Symbol&quot; id=&quot;3226&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3228&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2119&quot; id=&quot;3229&quot;&gt;is-max&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3236&quot; id=&quot;3236&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3238&quot; id=&quot;3238&quot;&gt;x₁&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3241&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;3242&quot;&gt;inj₂&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3247&quot; id=&quot;3247&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3248&quot;&gt;))&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3251&quot;&gt;→&lt;/a&gt;                   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.Negation.Core.html#778&quot; id=&quot;3271&quot;&gt;contradiction&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3285&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1729&quot; id=&quot;3286&quot;&gt;trans&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3292&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;3293&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3297&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3301&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3247&quot; id=&quot;3303&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3304&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3108&quot; id=&quot;3306&quot;&gt;y≠o&lt;/a&gt;              &lt;a class=&quot;Symbol&quot; id=&quot;3323&quot;&gt;}&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Otherwise, we have a proof that &lt;code&gt;o&lt;/code&gt; is equal to either &lt;code&gt;y&lt;/code&gt; or &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3402&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3406&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1685&quot; id=&quot;3408&quot;&gt;no&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3411&quot; id=&quot;3411&quot;&gt;proof&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3417&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1648&quot; id=&quot;3419&quot;&gt;yes&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3423&quot; id=&quot;3423&quot;&gt;o≡y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3427&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1648&quot; id=&quot;3429&quot;&gt;yes&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;3441&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2119&quot; id=&quot;3442&quot;&gt;is-max&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3449&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4748&quot; id=&quot;3450&quot;&gt;≤-trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3458&quot;&gt;x≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3462&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4459&quot; id=&quot;3463&quot;&gt;≤-reflexive&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3475&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;3476&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3480&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3484&quot;&gt;)))&lt;/a&gt;                 &lt;a class=&quot;Symbol&quot; id=&quot;3504&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4748&quot; id=&quot;3505&quot;&gt;≤-trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3513&quot;&gt;y≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3517&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4459&quot; id=&quot;3518&quot;&gt;≤-reflexive&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3530&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;3531&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3535&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3539&quot;&gt;)))&lt;/a&gt;                 &lt;a class=&quot;Symbol&quot; id=&quot;3559&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;3560&quot;&gt;inj₂&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3565&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1729&quot; id=&quot;3566&quot;&gt;trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3572&quot;&gt;fi≡o&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3423&quot; id=&quot;3577&quot;&gt;o≡y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3580&quot;&gt;)))&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3584&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3588&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1648&quot; id=&quot;3590&quot;&gt;yes&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3594&quot; id=&quot;3594&quot;&gt;o≡x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3598&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3600&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3602&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1648&quot; id=&quot;3604&quot;&gt;yes&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;3616&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2119&quot; id=&quot;3617&quot;&gt;is-max&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3624&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4748&quot; id=&quot;3625&quot;&gt;≤-trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3633&quot;&gt;x≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3637&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4459&quot; id=&quot;3638&quot;&gt;≤-reflexive&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3650&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;3651&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3655&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3659&quot;&gt;)))&lt;/a&gt;                 &lt;a class=&quot;Symbol&quot; id=&quot;3679&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4748&quot; id=&quot;3680&quot;&gt;≤-trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3688&quot;&gt;y≤o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3692&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4459&quot; id=&quot;3693&quot;&gt;≤-reflexive&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3705&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;3706&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3710&quot;&gt;fi≡o&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3714&quot;&gt;)))&lt;/a&gt;                 &lt;a class=&quot;Symbol&quot; id=&quot;3734&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;3735&quot;&gt;inj₁&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3740&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1729&quot; id=&quot;3741&quot;&gt;trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;3747&quot;&gt;fi≡o&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#3594&quot; id=&quot;3752&quot;&gt;o≡x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3755&quot;&gt;)))&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;&lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot;&gt;MaxSpec&lt;/a&gt;&lt;/span&gt; is a proof that our function is an implementation of &lt;code&gt;max&lt;/code&gt;, and &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2679&quot;&gt;decideMax&lt;/a&gt;&lt;/span&gt; is a proof that “we’d know one if we saw one.” So that’s the specification taken care of. The next step is to define the syntax we’d like to guard our search.&lt;/p&gt; &lt;p&gt;The paper presents this syntax as a BNF grammar, but my thought is why use a grammar when we could instead use a type system? Our syntax is a tiny little branching calculus, capable of representing &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot;&gt;Term&lt;/a&gt;&lt;/span&gt;s and branching &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot;&gt;Cond&lt;/a&gt;&lt;/span&gt;itionals:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;4279&quot;&gt;mutual&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;4288&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;Term&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4293&quot;&gt;Term&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4298&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;4300&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;4304&quot;&gt;where&lt;/a&gt;     &lt;a id=&quot;Term.var-x&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4314&quot; id=&quot;4314&quot;&gt;var-x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4320&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4322&quot;&gt;Term&lt;/a&gt;     &lt;a id=&quot;Term.var-y&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4331&quot; id=&quot;4331&quot;&gt;var-y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4337&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4339&quot;&gt;Term&lt;/a&gt;     &lt;a id=&quot;Term.const&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4348&quot; id=&quot;4348&quot;&gt;const&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4354&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4356&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4358&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4360&quot;&gt;Term&lt;/a&gt;     &lt;a id=&quot;Term.if-then-else&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4369&quot; id=&quot;4369&quot;&gt;if-then-else&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4382&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4384&quot;&gt;Cond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4389&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4391&quot;&gt;Term&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4396&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4398&quot;&gt;Term&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4403&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4405&quot;&gt;Term&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;4413&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;Cond&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4418&quot;&gt;Cond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4423&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;4425&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;4429&quot;&gt;where&lt;/a&gt;     &lt;a id=&quot;Cond.leq&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4439&quot; id=&quot;4439&quot;&gt;leq&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4443&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4445&quot;&gt;Term&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4450&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4452&quot;&gt;Term&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4457&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4459&quot;&gt;Cond&lt;/a&gt;     &lt;a id=&quot;Cond.and&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4468&quot; id=&quot;4468&quot;&gt;and&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4472&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4474&quot;&gt;Cond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4479&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4481&quot;&gt;Cond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4486&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4488&quot;&gt;Cond&lt;/a&gt;     &lt;a id=&quot;Cond.invert&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4497&quot; id=&quot;4497&quot;&gt;invert&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4504&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4506&quot;&gt;Cond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4511&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4513&quot;&gt;Cond&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;All that’s left for our example is the ability to “compile” a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot;&gt;Term&lt;/a&gt;&lt;/span&gt; down to a candidate function. Just pattern match on the constructors and push the inputs around until we’re done:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;4719&quot;&gt;mutual&lt;/a&gt;   &lt;a id=&quot;eval&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4728&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4733&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot; id=&quot;4735&quot;&gt;Term&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4740&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4742&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;4744&quot;&gt;×&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4746&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4748&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4750&quot;&gt;ℕ&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4754&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4314&quot; id=&quot;4759&quot;&gt;var-x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4765&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4766&quot; id=&quot;4766&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;4768&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4770&quot; id=&quot;4770&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4771&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4773&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4766&quot; id=&quot;4775&quot;&gt;x&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4779&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4331&quot; id=&quot;4784&quot;&gt;var-y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4790&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4791&quot; id=&quot;4791&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;4793&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4795&quot; id=&quot;4795&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4796&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4798&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4795&quot; id=&quot;4800&quot;&gt;y&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4804&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4809&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4348&quot; id=&quot;4810&quot;&gt;const&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4816&quot; id=&quot;4816&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4817&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4819&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4820&quot; id=&quot;4820&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;4822&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4824&quot; id=&quot;4824&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4825&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4827&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4816&quot; id=&quot;4829&quot;&gt;c&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4833&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4838&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4369&quot; id=&quot;4839&quot;&gt;if-then-else&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4852&quot; id=&quot;4852&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4854&quot; id=&quot;4854&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4856&quot; id=&quot;4856&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4857&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4859&quot; id=&quot;4859&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4861&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Bool.Base.html#1283&quot; id=&quot;4867&quot;&gt;if&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;4870&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4852&quot; id=&quot;4879&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4859&quot; id=&quot;4881&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Bool.Base.html#1283&quot; id=&quot;4883&quot;&gt;then&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4888&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4854&quot; id=&quot;4893&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4859&quot; id=&quot;4895&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Bool.Base.html#1283&quot; id=&quot;4897&quot;&gt;else&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4902&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4856&quot; id=&quot;4907&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4859&quot; id=&quot;4909&quot;&gt;i&lt;/a&gt;    &lt;a id=&quot;evalCond&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;4914&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4923&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4418&quot; id=&quot;4925&quot;&gt;Cond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4930&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4932&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;4934&quot;&gt;×&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4936&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4938&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#163&quot; id=&quot;4940&quot;&gt;Bool&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;4947&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4956&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4439&quot; id=&quot;4957&quot;&gt;leq&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4961&quot; id=&quot;4961&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4963&quot; id=&quot;4963&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4964&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4966&quot; id=&quot;4966&quot;&gt;i&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;4970&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1581&quot; id=&quot;4972&quot;&gt;Dec.does&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4981&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4982&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4961&quot; id=&quot;4987&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4966&quot; id=&quot;4989&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#5518&quot; id=&quot;4991&quot;&gt;≤?&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot; id=&quot;4994&quot;&gt;eval&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4963&quot; id=&quot;4999&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4966&quot; id=&quot;5001&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5002&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;5006&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5015&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4468&quot; id=&quot;5016&quot;&gt;and&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5020&quot; id=&quot;5020&quot;&gt;c1&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5023&quot; id=&quot;5023&quot;&gt;c2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5025&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5027&quot; id=&quot;5027&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5029&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;5031&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5020&quot; id=&quot;5040&quot;&gt;c1&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5027&quot; id=&quot;5043&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Bool.Base.html#986&quot; id=&quot;5045&quot;&gt;∧&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;5047&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5023&quot; id=&quot;5056&quot;&gt;c2&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5027&quot; id=&quot;5059&quot;&gt;i&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;5063&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5072&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4497&quot; id=&quot;5073&quot;&gt;invert&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5080&quot; id=&quot;5080&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5081&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5083&quot; id=&quot;5083&quot;&gt;i&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;5086&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Bool.Base.html#932&quot; id=&quot;5088&quot;&gt;not&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5092&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4914&quot; id=&quot;5093&quot;&gt;evalCond&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5080&quot; id=&quot;5102&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5083&quot; id=&quot;5104&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5105&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;So that’s most of the idea; we’ve specified what we’re looking for, via &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#2073&quot;&gt;MaxSpec&lt;/a&gt;&lt;/span&gt;, what our syntax is, via &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4293&quot;&gt;Term&lt;/a&gt;&lt;/span&gt;, and a way of compiling our syntax into functions, via &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#4728&quot;&gt;eval&lt;/a&gt;&lt;/span&gt;. This is the gist of the technique; the rest is just algorithms.&lt;/p&gt; &lt;p&gt;The paper presents several algorithms and evaluates their performances. But one is clearly better than the others in the included benchmarks, so we’ll just go through that one.&lt;/p&gt; &lt;p&gt;Our algorithm to synthesize code corresponding to the specification takes a few parameters. We’ve seen the first few:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;5677&quot;&gt;module&lt;/a&gt; &lt;a id=&quot;Solver&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5684&quot; id=&quot;5684&quot;&gt;Solver&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;5695&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;5696&quot;&gt;Lang&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;5701&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5703&quot; id=&quot;5703&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5705&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;5707&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5710&quot;&gt;}&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;5716&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot; id=&quot;5717&quot;&gt;spec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5722&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5724&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;5725&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5727&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5703&quot; id=&quot;5729&quot;&gt;O&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5730&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5732&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;5734&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5736&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;5738&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5741&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;5747&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5748&quot; id=&quot;5748&quot;&gt;decide&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5755&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5757&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5758&quot; id=&quot;5758&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5760&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;5762&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5764&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5703&quot; id=&quot;5766&quot;&gt;O&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5767&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5769&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5771&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5772&quot; id=&quot;5772&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5774&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;5776&quot;&gt;I&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5777&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5779&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1511&quot; id=&quot;5781&quot;&gt;Dec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5785&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot; id=&quot;5786&quot;&gt;spec&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5758&quot; id=&quot;5791&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5772&quot; id=&quot;5793&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5794&quot;&gt;))&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;5801&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5802&quot; id=&quot;5802&quot;&gt;compile&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5810&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;5812&quot;&gt;Lang&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5817&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;5819&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5821&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5703&quot; id=&quot;5823&quot;&gt;O&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5824&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;However, we also need a way of synthesizing terms in our &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot;&gt;Lang&lt;/a&gt;&lt;/span&gt;uage. For that, we’ll use &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot;&gt;enumerate&lt;/a&gt;&lt;/span&gt;, which maps a natural number to a term:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;    &lt;a class=&quot;Symbol&quot; id=&quot;5995&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot; id=&quot;5996&quot;&gt;enumerate&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6006&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;6008&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6010&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;6012&quot;&gt;Lang&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6016&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Although it’s not necessary for the algorithm, we should be able to implement &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6235&quot;&gt;exhaustive&lt;/a&gt;&lt;/span&gt; over &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot;&gt;enumerate&lt;/a&gt;&lt;/span&gt;, which states every &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot;&gt;Lang&lt;/a&gt;&lt;/span&gt; is eventually produced by &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot;&gt;enumerate&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;    &lt;a class=&quot;Symbol&quot; id=&quot;6234&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6235&quot; id=&quot;6235&quot;&gt;exhaustive&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6246&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6248&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6249&quot; id=&quot;6249&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6251&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;6253&quot;&gt;Lang&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6257&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6259&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;6261&quot;&gt;Σ[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6264&quot; id=&quot;6264&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;6266&quot;&gt;∈&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;6268&quot;&gt;ℕ&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;6270&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6272&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot; id=&quot;6273&quot;&gt;enumerate&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6264&quot; id=&quot;6283&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#151&quot; id=&quot;6285&quot;&gt;≡&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6249&quot; id=&quot;6287&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6288&quot;&gt;))&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Finally, we need an &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot;&gt;oracle&lt;/a&gt;&lt;/span&gt; capable of telling us if our solution is correct. This might sound a bit like cheating, but behind the scenes it’s just a magic SMT solver. The idea is that SMT can either confirm that our program is correct, or produce a counterexample that violates the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot;&gt;spec&lt;/a&gt;&lt;/span&gt;. The type here is a bit crazy, so we’ll take it one step at a time.&lt;/p&gt; &lt;p&gt;An &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot;&gt;oracle&lt;/a&gt;&lt;/span&gt; is a function that takes a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot;&gt;Lang&lt;/a&gt;&lt;/span&gt;…&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;    &lt;a class=&quot;Symbol&quot; id=&quot;6742&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot; id=&quot;6743&quot;&gt;oracle&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;6756&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6758&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6759&quot; id=&quot;6759&quot;&gt;exp&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6763&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;6765&quot;&gt;Lang&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6769&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and either gives back a function that can produce a &lt;code&gt;spec (compile exp)&lt;/code&gt; for every input:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;      &lt;a class=&quot;Symbol&quot; id=&quot;6877&quot;&gt;→&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;6881&quot;&gt;((&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6883&quot; id=&quot;6883&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6885&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;6887&quot;&gt;I&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6888&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6890&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot; id=&quot;6892&quot;&gt;spec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6897&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5802&quot; id=&quot;6898&quot;&gt;compile&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6759&quot; id=&quot;6906&quot;&gt;exp&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6909&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6883&quot; id=&quot;6911&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6912&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;or gives back some input which is not a &lt;code&gt;spec (compile exp)&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;        &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#734&quot; id=&quot;6994&quot;&gt;⊎&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;6996&quot;&gt;Σ[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6999&quot; id=&quot;6999&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;7001&quot;&gt;∈&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;7003&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;7005&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#656&quot; id=&quot;7007&quot;&gt;¬&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot; id=&quot;7009&quot;&gt;spec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7014&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5802&quot; id=&quot;7015&quot;&gt;compile&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6759&quot; id=&quot;7023&quot;&gt;exp&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7026&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6999&quot; id=&quot;7028&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7029&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;7035&quot;&gt;where&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The algorithm here is actually quite clever. The idea is that to try each &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot;&gt;enumerate&lt;/a&gt;&lt;/span&gt;d value in order, attempting to minimize the number of calls we make to the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot;&gt;oracle&lt;/a&gt;&lt;/span&gt;, because they’re expensive. So instead, well keep a list of every counterexample we’ve seen so far, and ensure that our synthesized function passes all of them before sending it off to the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot;&gt;oracle&lt;/a&gt;&lt;/span&gt;. First, we’ll need a data structure to store our search progress:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;7508&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Solver.SearchState&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7515&quot; id=&quot;7515&quot;&gt;SearchState&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7527&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;7529&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;7533&quot;&gt;where&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;7543&quot;&gt;field&lt;/a&gt;       &lt;a id=&quot;Solver.SearchState.iteration&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot; id=&quot;7555&quot;&gt;iteration&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7565&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;7567&quot;&gt;ℕ&lt;/a&gt;       &lt;a id=&quot;Solver.SearchState.cases&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7575&quot; id=&quot;7575&quot;&gt;cases&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7581&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.List.html#148&quot; id=&quot;7583&quot;&gt;List&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;7588&quot;&gt;I&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;7592&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7515&quot; id=&quot;7597&quot;&gt;SearchState&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The initial search state is one in which we start at the beginning, and have no counterexamples:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;Solver.start&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7718&quot; id=&quot;7718&quot;&gt;start&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7724&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7515&quot; id=&quot;7726&quot;&gt;SearchState&lt;/a&gt;   &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot; id=&quot;7740&quot;&gt;iteration&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7718&quot; id=&quot;7750&quot;&gt;start&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7756&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7758&quot;&gt;0&lt;/a&gt;   &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7575&quot; id=&quot;7762&quot;&gt;cases&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7718&quot; id=&quot;7768&quot;&gt;start&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7774&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.List.html#185&quot; id=&quot;7776&quot;&gt;[]&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;We can try a function by testing every counterexample:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;Solver.try&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7847&quot; id=&quot;7847&quot;&gt;try&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7851&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7853&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;7854&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7856&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5703&quot; id=&quot;7858&quot;&gt;O&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7859&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7861&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.List.html#148&quot; id=&quot;7863&quot;&gt;List&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;7868&quot;&gt;I&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7870&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#163&quot; id=&quot;7872&quot;&gt;Bool&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7847&quot; id=&quot;7879&quot;&gt;try&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7883&quot; id=&quot;7883&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7885&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.List.Base.html#4730&quot; id=&quot;7887&quot;&gt;all&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7891&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Nullary.html#1581&quot; id=&quot;7892&quot;&gt;Dec.does&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1031&quot; id=&quot;7901&quot;&gt;∘&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5748&quot; id=&quot;7903&quot;&gt;decide&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7883&quot; id=&quot;7910&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7911&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and finally, can now attempt to synthesize some code. Our function &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8151&quot;&gt;check&lt;/a&gt;&lt;/span&gt; takes a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7515&quot;&gt;SearchState&lt;/a&gt;&lt;/span&gt;, and either gives back the next step of the search, or some program, and a proof that it’s what we’re looking for.&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;Solver.check&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8151&quot; id=&quot;8151&quot;&gt;check&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;8163&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7515&quot; id=&quot;8165&quot;&gt;SearchState&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;8183&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7515&quot; id=&quot;8185&quot;&gt;SearchState&lt;/a&gt;           &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#734&quot; id=&quot;8207&quot;&gt;⊎&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8209&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;8210&quot;&gt;Σ[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8213&quot; id=&quot;8213&quot;&gt;exp&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;8217&quot;&gt;∈&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;8219&quot;&gt;Lang&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;8224&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8226&quot;&gt;((&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8228&quot; id=&quot;8228&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8230&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;8232&quot;&gt;I&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8233&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8235&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot; id=&quot;8237&quot;&gt;spec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8242&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5802&quot; id=&quot;8243&quot;&gt;compile&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8213&quot; id=&quot;8251&quot;&gt;exp&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8254&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8228&quot; id=&quot;8256&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8257&quot;&gt;))&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8151&quot; id=&quot;8262&quot;&gt;check&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8268&quot; id=&quot;8268&quot;&gt;ss&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;We begin by getting and compiling the next &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot;&gt;enumerate&lt;/a&gt;&lt;/span&gt;d term:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;           &lt;a class=&quot;Keyword&quot; id=&quot;8361&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5996&quot; id=&quot;8366&quot;&gt;enumerate&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8376&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot; id=&quot;8377&quot;&gt;iteration&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8268&quot; id=&quot;8387&quot;&gt;ss&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8389&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;8393&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8397&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8399&quot; id=&quot;8399&quot;&gt;exp&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;8403&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5802&quot; id=&quot;8408&quot;&gt;compile&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8399&quot; id=&quot;8416&quot;&gt;exp&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;check if it passes all the previous counterexamples:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;8485&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8489&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8491&quot; id=&quot;8491&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;8493&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7847&quot; id=&quot;8498&quot;&gt;try&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8491&quot; id=&quot;8502&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8504&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7575&quot; id=&quot;8505&quot;&gt;cases&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;8511&quot;&gt;ss&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8513&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;if it doesn’t, just fail with the next &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot;&gt;iteration&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;8586&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8590&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#182&quot; id=&quot;8592&quot;&gt;false&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8598&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;8600&quot;&gt;inj₁&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8605&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Keyword&quot; id=&quot;8606&quot;&gt;record&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8613&quot;&gt;{&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot; id=&quot;8615&quot;&gt;iteration&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8625&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;8627&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8631&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot; id=&quot;8632&quot;&gt;iteration&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;8642&quot;&gt;ss&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8644&quot;&gt;)&lt;/a&gt;                              &lt;a class=&quot;Symbol&quot; id=&quot;8675&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7575&quot; id=&quot;8677&quot;&gt;cases&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8683&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7575&quot; id=&quot;8685&quot;&gt;cases&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;8691&quot;&gt;ss&lt;/a&gt;                              &lt;a class=&quot;Symbol&quot; id=&quot;8723&quot;&gt;})&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Otherwise, our proposed function might just be the thing we’re looking for, so it’s time to consult the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot;&gt;oracle&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;8859&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8863&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#188&quot; id=&quot;8865&quot;&gt;true&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;8870&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#6743&quot; id=&quot;8875&quot;&gt;oracle&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;8882&quot;&gt;exp&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;which either gives a counterexample that we need to record:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;8958&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8962&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;8964&quot;&gt;inj₂&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8969&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8970&quot; id=&quot;8970&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;8972&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8974&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8977&quot;&gt;=&lt;/a&gt;           &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;8989&quot;&gt;inj₁&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8994&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Keyword&quot; id=&quot;8995&quot;&gt;record&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9002&quot;&gt;{&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot; id=&quot;9004&quot;&gt;iteration&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9014&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;9016&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9020&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7555&quot; id=&quot;9021&quot;&gt;iteration&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;9031&quot;&gt;ss&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9033&quot;&gt;)&lt;/a&gt;                        &lt;a class=&quot;Symbol&quot; id=&quot;9058&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7575&quot; id=&quot;9060&quot;&gt;cases&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9066&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8970&quot; id=&quot;9068&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.List.html#200&quot; id=&quot;9070&quot;&gt;∷&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7575&quot; id=&quot;9072&quot;&gt;cases&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;9078&quot;&gt;ss&lt;/a&gt;                        &lt;a class=&quot;Symbol&quot; id=&quot;9104&quot;&gt;})&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;or it confirms that our function satisfies the specification, and thus that were done:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;9206&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9210&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;9212&quot;&gt;inj₁&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9217&quot; id=&quot;9217&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9219&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;9221&quot;&gt;inj₂&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9226&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; id=&quot;9227&quot;&gt;exp&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;9231&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9217&quot; id=&quot;9233&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9234&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Pretty cool! The paper gives an optimization that caches the result of every counterexample on every synthesized program, and reuses these whenever that program appears as a subprogram of a larger one. The idea is that we can trade storage so we only ever need to evaluate each subprogram once — important for expensive computations.&lt;/p&gt; &lt;p&gt;Of course, pumping &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8151&quot;&gt;check&lt;/a&gt;&lt;/span&gt; by hand is annoying, so we can instead package it up as &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9797&quot;&gt;solve&lt;/a&gt;&lt;/span&gt; which takes a search depth, and iterates &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8151&quot;&gt;check&lt;/a&gt;&lt;/span&gt; until it runs out of gas or gets the right answer:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;Solver.solve&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9797&quot; id=&quot;9797&quot;&gt;solve&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;9809&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;9811&quot;&gt;ℕ&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;9819&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Maybe.html#136&quot; id=&quot;9821&quot;&gt;Maybe&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9827&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;9828&quot;&gt;Σ[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9831&quot; id=&quot;9831&quot;&gt;exp&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;9835&quot;&gt;∈&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;9837&quot;&gt;Lang&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#916&quot; id=&quot;9842&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9844&quot;&gt;((&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9846&quot; id=&quot;9846&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9848&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;9850&quot;&gt;I&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9851&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9853&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot; id=&quot;9855&quot;&gt;spec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9860&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5802&quot; id=&quot;9861&quot;&gt;compile&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9831&quot; id=&quot;9869&quot;&gt;exp&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9872&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9846&quot; id=&quot;9874&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9875&quot;&gt;))&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9797&quot; id=&quot;9880&quot;&gt;solve&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9886&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9913&quot; id=&quot;9888&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7718&quot; id=&quot;9891&quot;&gt;start&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;9901&quot;&gt;where&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9913&quot; id=&quot;9913&quot;&gt;go&lt;/a&gt;           &lt;a class=&quot;Symbol&quot; id=&quot;9926&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#7515&quot; id=&quot;9928&quot;&gt;SearchState&lt;/a&gt;           &lt;a class=&quot;Symbol&quot; id=&quot;9950&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;9952&quot;&gt;ℕ&lt;/a&gt;           &lt;a class=&quot;Symbol&quot; id=&quot;9964&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Maybe.html#136&quot; id=&quot;9966&quot;&gt;Maybe&lt;/a&gt;               &lt;a class=&quot;Symbol&quot; id=&quot;9986&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#166&quot; id=&quot;9987&quot;&gt;Σ&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5696&quot; id=&quot;9989&quot;&gt;Lang&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9994&quot;&gt;(λ&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9997&quot; id=&quot;9997&quot;&gt;exp&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10001&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10003&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10004&quot; id=&quot;10004&quot;&gt;i&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10006&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5701&quot; id=&quot;10008&quot;&gt;I&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10009&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10011&quot;&gt;→&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5717&quot; id=&quot;10013&quot;&gt;spec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10018&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#5802&quot; id=&quot;10019&quot;&gt;compile&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9997&quot; id=&quot;10027&quot;&gt;exp&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10030&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10004&quot; id=&quot;10032&quot;&gt;i&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10033&quot;&gt;))&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9913&quot; id=&quot;10042&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10045&quot; id=&quot;10045&quot;&gt;ss&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#210&quot; id=&quot;10048&quot;&gt;zero&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10053&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Maybe.html#195&quot; id=&quot;10055&quot;&gt;nothing&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9913&quot; id=&quot;10069&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10072&quot; id=&quot;10072&quot;&gt;ss&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10075&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;10076&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10080&quot; id=&quot;10080&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10081&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;10083&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#8151&quot; id=&quot;10088&quot;&gt;check&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10072&quot; id=&quot;10094&quot;&gt;ss&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;10103&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10107&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;10109&quot;&gt;inj₁&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10114&quot; id=&quot;10114&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10116&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#9913&quot; id=&quot;10118&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;10121&quot;&gt;ss&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;10124&quot;&gt;n&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;10132&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10136&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;10138&quot;&gt;inj₂&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10143&quot; id=&quot;10143&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10145&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Maybe.html#174&quot; id=&quot;10147&quot;&gt;just&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html#10143&quot; id=&quot;10152&quot;&gt;y&lt;/a&gt; &lt;/pre&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-19T00:00:00Z",
"URL":" https://reasonablypolymorphic.com/blog/syntax-guided-synthesis/index.html "
}
,
{
"title":"Monday Morning Haskell: Cool Monad Combinators",
"textBody":"&lt;p&gt;Haskell's if-statements work a bit differently from most other languages. In a language like C++ you can have an if statement that just has a single branch like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-c++&quot;&gt;int sumOfList(const std::vector&amp;lt;int&amp;gt;&amp;amp; inputs, bool onlyHalf) {   size_t listSize = inputs.size();   if (onlyHalf) {     // Only operate on half the list     listSize = listSize / 2;   }   ... }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But a statement like that doesn't strictly fit into Haskell's paradigms of limiting side effects and assigning types to all expressions. An if statement has to be an expression like everything else, and that expression must have a type. So the way Haskell does this is that an if statement must have two branches (if and else) and each branch must be an expression with the same result type.&lt;/p&gt; &lt;p&gt;But what about a situation where you just want to do conditional logging? Here's another quick example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-c++&quot;&gt;int sumOfList(const std::vector&amp;lt;int&amp;gt;&amp;amp; inputs, bool isVerbose) {   if (isVerbose) {     std::cout &amp;lt;&amp;lt; &quot;Taking sum of list...&quot; &amp;lt;&amp;lt; std::endl;   }   ... }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Haskell, we would need this function to be in the &lt;code&gt;IO&lt;/code&gt; monad, since it's printing to the console. But how would we represent the &quot;conditional logging portion? We'd have to make an &quot;if statement&quot; where each branch has the same type. A &lt;code&gt;putStrLn&lt;/code&gt; expression has the type &lt;code&gt;IO ()&lt;/code&gt;, so we would need an &lt;code&gt;empty&lt;/code&gt; expression of type &lt;code&gt;IO ()&lt;/code&gt; as the other branch. So in this case &lt;code&gt;return ()&lt;/code&gt; works.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;sumOfList :: [Int] -&amp;gt; Bool -&amp;gt; m Int sumOfList inputs isVerbose = do   if isVerbose     then putStrLn &quot;Taking sum of list...&quot;     else return ()   return $ foldl (+) 0 inputs&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But it could be annoying to have this pattern of &lt;code&gt;return ()&lt;/code&gt; on a lot of different branches. But there are a couple useful combinators to help us: &lt;code&gt;when&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;when :: Bool -&amp;gt; m () -&amp;gt; m ()  unless :: Bool -&amp;gt; m () -&amp;gt; m ()&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These simply take a boolean value and a monadic action, and they only perform the action based on the boolean value. So we could rewrite our code from above:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;sumOfList :: [Int] -&amp;gt; Bool -&amp;gt; m Int sumOfList inputs isVerbose = do   when isVerbose (putStrLn &quot;Taking sum of list...&quot;)   return $ foldl (+) 0 inputs&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now it looks a lot cleaner. With &lt;code&gt;when&lt;/code&gt;, we perform the action whenever it's true. With &lt;code&gt;unless&lt;/code&gt;, the action occurs only when the input is false.&lt;/p&gt; &lt;p&gt;We can observe though that these functions only work when the result value of the input is &lt;code&gt;()&lt;/code&gt;, which is to say it &lt;em&gt;has no result&lt;/em&gt;. Because when the alternative is that &quot;nothing happens&quot;, we can't produce a result other than &lt;code&gt;()&lt;/code&gt;. So these combinators are only sensible when there's some kind of side effect from the monadic action, like printing to the console, or modifying some stateful value.&lt;/p&gt; &lt;p&gt;Sometimes, you may have an action that produces a desired side effect but &lt;em&gt;also&lt;/em&gt; returns a value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;printSize :: [Int] -&amp;gt; IO Int printSize inputs = do   putStrLn $ &quot;Input has size: &quot; ++ show (length inputs)   return $ length inputs&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to use this with &lt;code&gt;when&lt;/code&gt; or &lt;code&gt;unless&lt;/code&gt;, you'll have to change the action so it instead returns &lt;code&gt;()&lt;/code&gt;. This is the job of the &lt;code&gt;void&lt;/code&gt; combinator. It just performs the action and then returns &lt;code&gt;()&lt;/code&gt; at the end.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;void :: m a -&amp;gt; m () void action = do   _ &amp;lt;- action   return ()&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we could apply this with our different expressions above:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;lang-haskell&quot;&gt;sumOfList :: [Int] -&amp;gt; Bool -&amp;gt; m Int sumOfList inputs isVerbose = do   when isVerbose (void $ printSize inputs)   return $ foldl (+) 0 inputs&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Hopefully you're able to use these combinators to make your Haskell a bit cleaner! If you're just getting started on your Haskell journey, you should download our &lt;a href=&quot;https://www.mmhaskell.com/beginners-checklist&quot;&gt;Beginners Checklist&lt;/a&gt;! It'll provide you with some helpful tools to get going! Next week, we'll be back with some more monad tips!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-17T14:30:00Z",
"URL":" https://mmhaskell.com/blog/2022/3/17/cool-monad-combinators "
}
,
{
"title":"Tweag I/O: Porting libffi to pure WebAssembly",
"textBody":"&lt;p&gt;As a part of Tweag’s ongoing &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/wikis/WebAssembly-backend&quot;&gt;effort&lt;/a&gt; to add WebAssembly code generation GHC, we need to compile GHC’s runtime system to WebAssembly. The &lt;a href=&quot;https://sourceware.org/libffi&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt;&lt;/a&gt; library to pure WebAssembly is an essential dependency of the GHC runtime: it is used to pass Haskell functions as callback to C functions. As the implementation of &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; depends on the platform, we’ve had to port it to WebAssembly.&lt;/p&gt; &lt;p&gt;This blog post introduces &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt;, the challenges to make it work with WebAssembly, demonstrates our implementation, and also explains how it’s used by GHC runtime. I hope our implementation can be useful for other people porting projects to WebAssembly (especially &lt;code class=&quot;language-text&quot;&gt;wasm32-wasi&lt;/code&gt;).&lt;/p&gt; &lt;h2 id=&quot;what-libffi-is-about&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#what-libffi-is-about&quot;&gt;&lt;/a&gt;What &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; is about&lt;/h2&gt; &lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; is a C library that provides an interface to perform indirect function calls, where the function’s type signature is only known at run-time instead of compile-time. This is a common use case when implementing an interpreter that supports calling C foreign functions from the interpreted language. GHC’s bytecode interpreter is an example, we will need it to support running GHCi in WebAssembly.&lt;/p&gt; &lt;p&gt;Consider a minimal example. A C function &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt; is exported by the dynamic library &lt;code class=&quot;language-text&quot;&gt;libfib.so&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;In order to call &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt; in their language, the user code would provide the library name, the C function name, and the expected type signature. Using the system’s dynamic linker, it’s easy to load the specified library and obtain the code pointer that corresponds to &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// library &amp;amp; function names can't really be literals, this is just for simplicity&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;lib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;libfib.so&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; RTLD_LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;fib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lib&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fib&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Now, we have &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt; as an opaque code pointer. How do we invoke the &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt; function, pass the arguments and obtain the result? Remember, &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt;’s type signature is not known at compile-time of the interpreter, so we can’t cheat by merely coercing &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt; to the C function pointer type and then performing the call:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; arg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// not gonna work&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// cheating!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This is where &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; comes to rescue. It allows you to construct RTTI(run-time type information) for C functions, perform a function call using that RTTI and a run-time allocated argument vector, then obtain the result if there is any:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;ffi_cif cif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the run-time type information&lt;/span&gt; ffi_type &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;arg_tys&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;ffi_type_sint &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the argument types&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ffi_prep_cif&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;cif&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FFI_DEFAULT_ABI&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg_tys&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// populate the run-time type information&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; arg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;arg_vals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;arg &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the argument pointer array&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the result value&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ffi_call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;cif&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fib&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg_vals&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// perform the call&lt;/span&gt;  &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fib(%d)=%d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;libffi-and-webassembly&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#libffi-and-webassembly&quot;&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; and WebAssembly&lt;/h2&gt; &lt;p&gt;The implementation of &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt; is deeply platform-dependent. For each supported platform, it needs to implement to the C ABI’s calling convention: given a function’s type signature, where are the arguments/result placed (in certain registers, and/or on the stack), how to arrange the return code address, etc.&lt;/p&gt; &lt;p&gt;The problem is, WebAssembly &lt;a href=&quot;https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md&quot;&gt;C ABI&lt;/a&gt; doesn’t look like any other platform!&lt;/p&gt; &lt;ul&gt; &lt;li&gt;There are no global registers for passing arguments or result. Instead, a C function of type &lt;code class=&quot;language-text&quot;&gt;void (int, int)&lt;/code&gt; maps to a WebAssembly function of type &lt;code class=&quot;language-text&quot;&gt;(i32, i32) -&amp;gt; nil&lt;/code&gt; directly, each C argument is a WebAssembly function argument.&lt;/li&gt; &lt;li&gt;The only way to jump to a function given the code address is the &lt;a href=&quot;https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-control&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;call_indirect&lt;/code&gt;&lt;/a&gt; opcode. &lt;code class=&quot;language-text&quot;&gt;call_indirect&lt;/code&gt; requires specifying an expected function type at compile-time. It traps at run-time if the expected type doesn’t match the actual type of the pointed function.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This makes it hard to port &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt; to WebAssembly: even given the type information at run-time, there’s no places where we can move the arguments/result around, and we can’t jump to a function without knowing it’s type signature at compile-time (if we do, that defeats the purpose of &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; in the first place!)&lt;/p&gt; &lt;h2 id=&quot;code-generation-to-the-rescue&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#code-generation-to-the-rescue&quot;&gt;&lt;/a&gt;Code generation to the rescue&lt;/h2&gt; &lt;p&gt;Given a code pointer in WebAssembly, we need to know the correct type signature at compile-time in order to perform an indirect call, but that information is only available in the RTTI. But it should be possible to do a run-time pattern match on the RTTI, then in each case of that pattern match, we know the precise type signature at compile-time:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ffi_call&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_cif &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;cif&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;rvalue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;avalues&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cif&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// argument &amp;amp; result type is both a signed int&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;encoding_of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// cast to correct function pointer type, then perform the call&lt;/span&gt;       &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;rvalue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;avalues&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// other function types follow suit&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This way, we avoid the need for fancy logic of moving arguments and result, and adjusting the stack. We simply coerce the code pointer to the correct function pointer type and perform the call. It’s a pretty intuitive implementation, but the devil is in the details:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;There are infinite numbers of possible type signatures. So we have to live with a limitation: restrict the maximum number of arguments to a small constant that’s sufficient to cover our use cases. What more, The case count grows exponentially with maximum argument count. Suppose we have &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; non-void value types and no more than &lt;code class=&quot;language-text&quot;&gt;N&lt;/code&gt; arguments, then the case count would be &lt;code class=&quot;language-text&quot;&gt;(k^N)*(k+1)&lt;/code&gt;. So &lt;code class=&quot;language-text&quot;&gt;N&lt;/code&gt; must be very small (currently we chose &lt;code class=&quot;language-text&quot;&gt;N=4&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; supports many value types that model different C types, so even a small &lt;code class=&quot;language-text&quot;&gt;N&lt;/code&gt; would require a prohibitively large number of cases! Well, according to the WebAssembly C ABI, these value types are mapped to one of the four WebAssembly value types, so, for us, &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; is really just &lt;code class=&quot;language-text&quot;&gt;4&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;How do we pattern match on the RTTI? We can encode each type signature to a distinct integer and store it in the &lt;code class=&quot;language-text&quot;&gt;ffi_cif&lt;/code&gt; struct. The &lt;code class=&quot;language-text&quot;&gt;encoding_of&lt;/code&gt; macro calculates the encoding value, so we can implement &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt; with a single &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt; statement.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Despite the limitations, writing this dispatch code manually would be incredibly tedious and error prone. It would also be terribly difficult to change &lt;code class=&quot;language-text&quot;&gt;N&lt;/code&gt; if the need for larger functions occurs. So we’ve implemented a &lt;a href=&quot;https://github.com/tweag/libffi-wasm32&quot;&gt;code generator&lt;/a&gt; for it in Haskell.&lt;/p&gt; &lt;h2 id=&quot;libffi-usage-in-the-ghc-runtime&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#libffi-usage-in-the-ghc-runtime&quot;&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; usage in the GHC runtime&lt;/h2&gt; &lt;p&gt;In GHC’s runtime, &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; is used to support dynamic foreign exports to C. Here is a minimal example:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;Rts.h&amp;gt;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// instead of returning the result directly, we take a callback&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// function pointer, which will be called with the result as argument.&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HsWord x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;cb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HsWord&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   HsWord a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token import-statement&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Foreign&lt;/span&gt;  &lt;span class=&quot;token hvariable&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;token hvariable&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Word&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;   &lt;span class=&quot;token hvariable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mk_cb&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fib(&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;) = &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;r&lt;/span&gt;   &lt;span class=&quot;token hvariable&quot;&gt;c_fib&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cb&lt;/span&gt;   &lt;span class=&quot;token hvariable&quot;&gt;freeHaskellFunPtr&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cb&lt;/span&gt;  &lt;span class=&quot;token hvariable&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ccall&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fib&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;c_fib&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Word&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FunPtr&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Word&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;-- Special syntax implemented with libffi&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ccall&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;mk_cb&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Word&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FunPtr&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Word&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The GHC runtime needs to generate the &lt;code class=&quot;language-text&quot;&gt;cb&lt;/code&gt; C function pointer that wraps a Haskell function, and that Haskell function is a dynamic closure generated during program run-time. How?&lt;/p&gt; &lt;ol&gt; &lt;li&gt;When compiling &lt;code class=&quot;language-text&quot;&gt;mk_cb&lt;/code&gt;, GHC generates a C function with the &lt;code class=&quot;language-text&quot;&gt;void () (ffi_cif *cif, void *ret, void **args, void *user_data)&lt;/code&gt; prototype. The &lt;code class=&quot;language-text&quot;&gt;cb&lt;/code&gt; callback’s type signature will be passed via &lt;code class=&quot;language-text&quot;&gt;cif&lt;/code&gt;, its argument/result will be passed via &lt;code class=&quot;language-text&quot;&gt;args&lt;/code&gt;/&lt;code class=&quot;language-text&quot;&gt;ret&lt;/code&gt;. But what does this function do, and what’s &lt;code class=&quot;language-text&quot;&gt;user_data&lt;/code&gt;? Read on.&lt;/li&gt; &lt;li&gt;When &lt;code class=&quot;language-text&quot;&gt;mk_cb&lt;/code&gt; is called in Haskell, a &lt;code class=&quot;language-text&quot;&gt;StablePtr&lt;/code&gt; (immutable pointer to any Haskell value) is created and points to the passed Haskell function. The GHC runtime then invokes the &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; &lt;a href=&quot;http://www.chiark.greenend.org.uk/doc/libffi-dev/html/The-Closure-API.html&quot;&gt;Closure API&lt;/a&gt; to create the C callback function, passing the &lt;code class=&quot;language-text&quot;&gt;StablePtr&lt;/code&gt; as one of the arguments. The resulting function pointer is returned to &lt;code class=&quot;language-text&quot;&gt;cb&lt;/code&gt; in Haskell.&lt;/li&gt; &lt;li&gt;When &lt;code class=&quot;language-text&quot;&gt;cb&lt;/code&gt; is invoked in C, it calls the GHC-generated C function in Step 1. The &lt;code class=&quot;language-text&quot;&gt;StablePtr&lt;/code&gt; created in Step 2 is passed as the &lt;code class=&quot;language-text&quot;&gt;user_data&lt;/code&gt; argument, but keep in mind, &lt;code class=&quot;language-text&quot;&gt;user_data&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a argument of &lt;code class=&quot;language-text&quot;&gt;cb&lt;/code&gt;, it was passed to Closure API when generating &lt;code class=&quot;language-text&quot;&gt;cb&lt;/code&gt;. Now, that function will locate the real Haskell function from &lt;code class=&quot;language-text&quot;&gt;user_data&lt;/code&gt; and then call into Haskell.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Admittedly, the example above is overly complicated for a &lt;code class=&quot;language-text&quot;&gt;fib&lt;/code&gt; implementation in Haskell, but a lot of real-world C libraries do expect users to pass C callbacks, so their Haskell bindings rely on dynamic foreign exports. &lt;a href=&quot;https://hackage-search.serokell.io/?q=foreign+import+ccall+%22wrapper%22&quot;&gt;Searching&lt;/a&gt; for &lt;code class=&quot;language-text&quot;&gt;foreign import ccall &quot;wrapper&quot;&lt;/code&gt; on the entire Hackage yields about 4500 matches across 200 packages. It suggests that dynamic foreign exports is common and important enough for us to support. So we need to implement &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; Closure API as well.&lt;/p&gt; &lt;h2 id=&quot;implementing-the-closure-api&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#implementing-the-closure-api&quot;&gt;&lt;/a&gt;Implementing the Closure API&lt;/h2&gt; &lt;p&gt;The Closure API needs to return a C function pointer which points to a function that “remembers” certain arguments passed to the Closure API, but not to itself. This resembles the “closure” concept in functional programming, where a function may be closed over some environment value (&lt;code class=&quot;language-text&quot;&gt;user_data&lt;/code&gt; in our case), hence the “Closure API” name.&lt;/p&gt; &lt;p&gt;On platforms which support JIT (Just-In-Time) code generation, there’s a natural way to do it: allocate some executable memory, emit machine code there and return it as the function pointer. We can either hard-code the Closure API arguments into the function code, or access those arguments somewhere else in the memory, either way won’t be hard to implement.&lt;/p&gt; &lt;p&gt;There do exist platforms that prohibit JIT. In that case, &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; has a workaround called &lt;a href=&quot;https://sourceware.org/pipermail/libffi-discuss/2021/002579.html&quot;&gt;static trampolines&lt;/a&gt;: define a &lt;em&gt;pool&lt;/em&gt; of functions to return, each of which has an associated memory location to record Closure API arguments. When the function is called later, it reads &lt;code class=&quot;language-text&quot;&gt;cif&lt;/code&gt; to decide its type and what registers correspond to its arguments/result. This is similar to &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt;, except &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt; uses the platform-specific C ABI knowledge as &lt;em&gt;caller&lt;/em&gt;, but here it uses that knowledge as &lt;em&gt;callee&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Our Closure API implementation follows the idea of static trampolines. However, the same challenge of implementing &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt; arises again: we can’t have a single pool of functions for all possible types, instead, for each C function type we support, we need to have a separate pool. This also means that we can’t “allocate” a function without knowing &lt;code class=&quot;language-text&quot;&gt;cif&lt;/code&gt;, therefore we can only implement a modified version of Closure API described below:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;ffi_status &lt;span class=&quot;token function&quot;&gt;ffi_alloc_prep_closure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_closure &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pclosure&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ffi_closure records fun, cif, user_data&lt;/span&gt;                                   ffi_cif &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;cif&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the resulting function pointer's expected type&lt;/span&gt;                                   &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;fun&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_cif &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;cif&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;ret&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;user_data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the input function being wrapped into the closure&lt;/span&gt;                                   &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;user_data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the closure's environment pointer&lt;/span&gt;                                   &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;code &lt;span class=&quot;token comment&quot;&gt;// the resulting function pointer&lt;/span&gt;                                   &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pclosure &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cif&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;encoding_of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// XX is the encoded integer of the C function type&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// pass the metadata/function arrays for this type, and the pool size&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// return the metadata location directly, the function location indirectly&lt;/span&gt;       &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pclosure &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ffi_pool_alloc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_pool_closure_XX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ffi_pool_func_XX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// other function types follow suit&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pclosure&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt;cif &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pclosure&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt;fun &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fun&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pclosure&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt;user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user_data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; FFI_OK&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// the XX type's metadata pool, zero-initialized&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; ffi_closure ffi_pool_closure_XX&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// the XX type's pool, populated by pointers to generated functions&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;ffi_pool_func_XX&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     ffi_pool_func_XX_0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ffi_pool_func_XX_1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ffi_pool_func_XX_2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// one generated function in the pool&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; ffi_type_sint &lt;span class=&quot;token function&quot;&gt;ffi_pool_func_XX_2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_type_sint a0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;a0&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the argument pointer array&lt;/span&gt;   ffi_type_sint ret&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// the result value&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// perform the call&lt;/span&gt;   ffi_pool_closure_XX&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ffi_pool_closure_XX&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cif&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;ret&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;                                 ffi_pool_closure_XX&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ret&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Similar to &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt;, the Closure API C code is generated in Haskell. When calling the Closure API, we do a &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt; table to pattern match on the input type information. In each &lt;code class=&quot;language-text&quot;&gt;case&lt;/code&gt;, we know the corresponding pools to allocate from. The returned function pointer knows which &lt;code class=&quot;language-text&quot;&gt;ffi_closure&lt;/code&gt; it should be looking at, since each generated function has a 1-to-1 mapping against the &lt;code class=&quot;language-text&quot;&gt;ffi_closure&lt;/code&gt; pool.&lt;/p&gt; &lt;p&gt;Compared to the &lt;code class=&quot;language-text&quot;&gt;ffi_call&lt;/code&gt; API described earlier, we need to tune another constant here: the pool size of each supported type. This directly corresponds to how many times one may dynamically export a Haskell function for that type. In typical use cases, there won’t be many, but in case of exceptions, it’s easy to increase the pool size only for a few specific types to avoid code bloating.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Our &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; code generator is implemented in a flexible way: it’s easy to adjust the set of supported &lt;code class=&quot;language-text&quot;&gt;libffi&lt;/code&gt; functions types and the trampoline pool size, and special cases can always be added to address project needs.&lt;/p&gt; &lt;p&gt;There are some future improvements we have in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Measure the code size, link-time and run-time overhead when supporting different numbers of arguments.&lt;/li&gt; &lt;li&gt;Test the basic/closure API on randomly generated function types.&lt;/li&gt; &lt;/ul&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-17T00:00:00Z",
"URL":" https://tweag.io/blog/2022-03-17-libffi-wasm32/ "
}
,
{
"title":"Brent Yorgey: Swarm: a lot can happen in a week",
"textBody":"&lt;p&gt;It’s been about a week since I put out &lt;a href=&quot;https://byorgey.wordpress.com/2021/09/23/swarm-preview-and-call-for-collaboration/&quot;&gt;an announcement and call for collaboration&lt;/a&gt; on a new game, &lt;a href=&quot;https://github.com/swarm-game/swarm&quot;&gt;Swarm&lt;/a&gt;. Since then, the response has been fantastic: lots of people have tried it out, a few have even streamed themselves playing it on Twitch, and there has been lots of development activity.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;39 new &lt;a href=&quot;https://github.com/swarm-game/swarm/issues&quot;&gt;issues opened&lt;/a&gt;&lt;/li&gt; &lt;li&gt;27 &lt;a href=&quot;https://github.com/swarm-game/swarm/pulls?q=is%3Apr+is%3Aclosed&quot;&gt;pull requests merged&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Lots of great discussion on GitHub issues as well as on IRC&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There’s still a long, long way to go before the game comes anywhere close to the vision for it, but we’ve made great progress! Some notable new features added since the initial announcement include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;New &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;upload&lt;/code&gt;, and &lt;code&gt;install&lt;/code&gt; commands&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Semicolons are no longer required beetween consecutive &lt;code&gt;def&lt;/code&gt;s&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Basic help panel, and panel shortcut keys&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Dramatically reduced CPU usage when idle&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An overhaul of parsing and pretty-printing of constants (makes adding new constants easier, and an important prerequisite for saving definitions and games)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Better handling of water (you can make curry now)!&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/swarm-game/swarm/blob/main/images/curry.png&quot;&gt;&lt;img src=&quot;https://byorgey.files.wordpress.com/2021/10/curry-1.png?w=640&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A couple more exciting things in progress that should land very soon:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;ASCII art recipes&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/swarm-game/swarm/blob/main/images/recipes.png&quot;&gt;&lt;img src=&quot;https://byorgey.files.wordpress.com/2021/10/recipes.png?w=640&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Basic editor integration via LSP, so you can write Swarm programs in your favorite editor with automatically highlighted syntax and type errors.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And of course there are many other exciting things planned or in the works. &lt;a href=&quot;https://github.com/swarm-game/swarm/&quot;&gt;Come join us&lt;/a&gt;!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-14T19:10:45Z",
"URL":" https://byorgey.wordpress.com/2021/10/01/swarm-a-lot-can-happen-in-a-week/ "
}
,
{
"title":"Brent Yorgey: Swarm: preview and call for collaboration",
"textBody":"&lt;p&gt;For about a month now I have been working on building a game&lt;a class=&quot;footnote-ref&quot; href=&quot;https://byorgey.wordpress.com/2021/09/23/swarm-preview-and-call-for-collaboration/#fn1&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, tentatively titled &lt;a href=&quot;https://github.com/swarm-game/swarm&quot;&gt;Swarm&lt;/a&gt;. It’s nowhere near finished, but it has at least reached a point where I’m not embarrassed to show it off. I would love to hear feedback, and I would especially love to have others contribute! Read on for more details.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/swarm-game/swarm&quot;&gt;&lt;img src=&quot;https://byorgey.files.wordpress.com/2021/09/log.png?w=640&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Swarm is a 2D tile-based resource gathering game, but with a twist: the only way you can interact with the world is by building and programming robots. And there’s another twist: the kinds of commands your robots can execute, and the kinds of programming language features they can interpret, depends on what devices they have installed; and you can create new devices only by gathering resources. So you start out with only very basic capabilities and have to bootstrap your way into more sophisticated forms of exploration and resource collection.&lt;/p&gt; &lt;p&gt;I guess you could say it’s kind of like a cross between Minecraft, Factorio, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Karel_(programming_language)&quot;&gt;Karel the Robot&lt;/a&gt;, but with a much cooler programming language (lambda calculus + polymorphism + recursion + exceptions + a command monad for first-class imperative programs + a bunch of other stuff).&lt;/p&gt; &lt;p&gt;The game is far from complete, and especially needs a lot more depth in terms of the kinds of devices and levels of abstraction you can build. But for me at least, it has already crossed the line into something that is actually somewhat fun to play.&lt;/p&gt; &lt;p&gt;If it sounds interesting to you, give it a spin! Take a look at the &lt;a href=&quot;https://github.com/swarm-game/swarm/blob/main/README.md&quot;&gt;README&lt;/a&gt; and the &lt;a href=&quot;https://github.com/swarm-game/swarm/blob/main/TUTORIAL.md&quot;&gt;tutorial&lt;/a&gt;. If you’re interested in contributing to development, check out the &lt;a href=&quot;https://github.com/swarm-game/swarm/blob/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; file and the &lt;a href=&quot;https://github.com/swarm-game/swarm/issues&quot;&gt;GitHub issue tracker&lt;/a&gt;, which I have populated with a plethora of tasks of varying difficulty. This could be a great project to contribute to especially if you’re relatively new to Haskell; I try to keep everything well-organized and well-commented, and am happy to help guide new contributors.&lt;/p&gt; &lt;section class=&quot;footnotes&quot;&gt; &lt;hr /&gt; &lt;ol&gt; &lt;li id=&quot;fn1&quot;&gt; &lt;p&gt;Can you tell I am on sabbatical?&lt;a class=&quot;footnote-back&quot; href=&quot;https://byorgey.wordpress.com/2021/09/23/swarm-preview-and-call-for-collaboration/#fnref1&quot;&gt;&lt;img alt=&quot;↩&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/21a9.png&quot; style=&quot;height: 1em;&quot; /&gt;︎&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/section&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-14T19:10:25Z",
"URL":" https://byorgey.wordpress.com/2021/09/23/swarm-preview-and-call-for-collaboration/ "
}
,
{
"title":"Mark Jason Dominus: There is a Unix error device",
"textBody":"&lt;p&gt;&lt;a href=&quot;https://blog.plover.com/Unix/error-device.html&quot;&gt;Yesterday I discussed &lt;code&gt;/dev/full&lt;/code&gt;&lt;/a&gt; and asked why there wasn't a generalization of it, and laid out out some very 1990s suggestions that I have had in the back of my mind since the 1990s.  I ended by acknowledging that there was probably a more modern solution in user space:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Eh, probably the right solution these days is to &lt;code&gt;LD_PRELOAD&lt;/code&gt; a   complete mock filesystem library that has any hooks you want in it.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Carl Witty suggested that there is a more modern solution in userspace, &lt;a href=&quot;https://www.kernel.org/doc/html/latest/filesystems/fuse.html&quot;&gt;FUSE&lt;/a&gt;, and Leah Neukirchen filled in the details:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;a href=&quot;https://github.com/ligurio/unreliablefs&quot;&gt;UnreliableFS&lt;/a&gt; is a   FUSE-based fault injection filesystem that allows to change   fault-injections in runtime using simple configuration file.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Also, Dave Vasilevsky suggested that something like this could be done with the &lt;a href=&quot;https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/index.html&quot;&gt;device mapper&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;I think the real takeaway from this is that I had not accepted the hard truth that all Unix is Linux now, and non-Linux Unix is dead.&lt;/p&gt;  &lt;p&gt;Thanks everyone who sent suggestions.&lt;/p&gt;  &lt;p&gt;[ Addendum: Leah Neukirchen informs me that FUSE also runs on FreeBSD, OpenBSD and macOS, and reminds me tht there are a great many MacOS systems.  I should face the hard truth that my knowledge of Unix systems capabilities is at least fifteen yers out of date. ] &lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-14T16:28:00Z",
"URL":" https://blog.plover.com/Unix/error-device-2.html "
}
,
{
"title":"Gabriel Gonzalez: The hard part of type-checking Nix",
"textBody":"The hard part of type-checking Nix    &lt;p&gt;Iâ€™ve been banging my head for a while on the challenge of building a type checker for Nix. The purpose of this post is to summarize my thoughts on this subject so far since they might prove useful to other people grappling with the same problem. In this post Iâ€™ll assume familiarity with Nix idioms and the Nix ecosystem.&lt;/p&gt;&lt;h4 id=&quot;stack-traces-are-not-enough&quot;&gt;Stack traces are not enough&lt;/h4&gt;&lt;p&gt;Nix has one key advantage: purity. This means that you can safely detect errors in code by just running the code (with some caveats I wonâ€™t go into) and if anything goes wrong you get a stack trace.&lt;/p&gt;&lt;p&gt;This approach to error detection still has some limitations, which I wrote about in a prior blog post:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.haskellforall.com/2021/01/dynamic-type-errors-lack-relevance.html&quot;&gt;Dynamic type errors lack relevance&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;â€¦ but Nixâ€™s stack traces still set the bar for any type-checker, meaning that any proposed type checker needs to produce error messages which are clearer and more informative than the stack traces that Nix currently produces.&lt;/p&gt;&lt;p&gt;â€œWhatâ€™s the problem with stack traces?â€�, you might ask.&lt;/p&gt;&lt;p&gt;The issue is that stack traces do not work well for understanding errors â€œin the largeâ€�. Interpreting a typical stack trace requires a fairly sophisticated mental model of your dependencies, so the more dependencies you have (and the more complicated they are) the more difficulty interpreting the stack trace.&lt;/p&gt;&lt;p&gt;Iâ€™ll illustrate this using the following example which is inspired by a real error I ran into at work:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./module0.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;nixpkgs.overlays&lt;/span&gt; = [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;self:&lt;/span&gt; super: {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;co&quot;&gt;# This is a common idiom in Nixpkgs to wrap Haskell packages in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;co&quot;&gt;# `justStaticExecutables` at the top level&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;fast-tags&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;self.haskell.lib.justStaticExecutables&lt;/span&gt; self.haskellPackages.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./module1.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;nixpkgs.overlays&lt;/span&gt; = [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;self:&lt;/span&gt; super: {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;co&quot;&gt;# In a separate overlay, create a variation on the `fast-tags` build with&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;co&quot;&gt;# tests disabled&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; = self.haskell.lib.dontCheck super.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./example.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixos&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs/nixos&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;configuration.imports&lt;/span&gt; = [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;./module1.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;./module0.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;er&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixos.pkgs.fast-tags-no-tests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above &lt;code&gt;./example.nix&lt;/code&gt; builds just fine:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; ./example.nix&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; ./result/bin/fast-tags &lt;span class=&quot;at&quot;&gt;--version&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;fast-tags,&lt;/span&gt; version 2.0.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;â€¦ but now suppose that I modify &lt;code&gt;./example.nix&lt;/code&gt; to sort the import list:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./example.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixos&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs/nixos&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;configuration.imports&lt;/span&gt; = [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;./module0.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;./module1.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;er&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixos.pkgs.fast-tags-no-tests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it fails to build, with the following error:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;error:&lt;/span&gt; attribute &lt;span class=&quot;st&quot;&gt;'fast-tags'&lt;/span&gt; missing&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;at&lt;/span&gt; /private/tmp/test/module1.nix:5:55:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;# tests disabled&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; = self.haskell.lib.dontCheck super.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;                                                       &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;er&quot;&gt;})&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'--show-trace'&lt;/span&gt; to show detailed location information&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, so why is the &lt;code&gt;fast-tags&lt;/code&gt; attribute missing? Let me add &lt;code&gt;--show-trace&lt;/code&gt; like the error message suggests to see what is going wrong:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;error:&lt;/span&gt; attribute &lt;span class=&quot;st&quot;&gt;'fast-tags'&lt;/span&gt; missing&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;at&lt;/span&gt; /private/tmp/test/module1.nix:5:55:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;# tests disabled&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; = self.haskell.lib.dontCheck super.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;                                                       &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;er&quot;&gt;})&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;â€¦&lt;/span&gt; while evaluating &lt;span class=&quot;st&quot;&gt;'overrideCabal'&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;at&lt;/span&gt; /nix/store/dchfgixlmxwq0w495w7xc39d65dyqg42-nixpkgs-22.05pre352357.98bb5b77c8c/nixpkgs/pkgs/development/haskell-modules/lib/compose.nix:38:22:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;ex&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;ex&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;ex&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;ex&quot;&gt;overrideCabal&lt;/span&gt; = f: drv: &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;drv.override&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;args:&lt;/span&gt; args // {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;                      &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;ex&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;ex&quot;&gt;mkDerivation&lt;/span&gt; = drv: &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;args.mkDerivation&lt;/span&gt; drv&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;.override&lt;/span&gt; f&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;â€¦&lt;/span&gt; from call site&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;at&lt;/span&gt; /private/tmp/test/module1.nix:5:28:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;# tests disabled&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; = self.haskell.lib.dontCheck super.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;                            &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;â€¦&lt;/span&gt; while evaluating the attribute &lt;span class=&quot;st&quot;&gt;'pkgs.fast-tags-no-tests'&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;at&lt;/span&gt; /private/tmp/test/module1.nix:5:7:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-31&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-31&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-32&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-32&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;# tests disabled&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-33&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-33&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; = self.haskell.lib.dontCheck super.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-34&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-34&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-35&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-35&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-36&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-36&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-37&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-37&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;â€¦&lt;/span&gt; while evaluating the file &lt;span class=&quot;st&quot;&gt;'./example.nix'&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hmmm ğŸ¤”. That still does really not explain what went wrong.&lt;/p&gt;&lt;p&gt;The &lt;em&gt;actual&lt;/em&gt; reason for the type error is that the order of overlays matters, but thereâ€™s no way that you would know that from looking at the stack trace. You would have to first understand how NixOS modules work and how the Nixpkgs overlay system works in order to correctly pinpoint the problem and even then it would still be tricky. I know because I am an experienced Nix user myself yet I still stumbled on an error message like this, albeit in the context of a larger codebase.&lt;/p&gt;&lt;p&gt;Moreover, the above example is not a contrived example that I hand-picked to make Nix look bad. This is idiomatic Nix code that uses modern conventions from Nixpkgs and NixOS exactly as the maintainers intended them to be used. The only thing thatâ€™s not idiomatic is using the NixOS module system to build just one package instead of building an entire NixOS system, but thatâ€™s only because I minimized this example from real code that built a complete NixOS system.&lt;/p&gt;&lt;h4 id=&quot;types-to-the-rescue&quot;&gt;Types to the rescue?&lt;/h4&gt;&lt;p&gt;Thereâ€™s a deeper issue, though, which is that even if Nix had a type system the equivalent type error would have been almost as uninformative!&lt;/p&gt;&lt;p&gt;To see why, letâ€™s imagine what a hypothetical informative type error might have looked like.&lt;/p&gt;&lt;p&gt;A great type error (for a command-line type checker) would have been something like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;The&lt;/span&gt; fast-tags attribute defined within this overlay:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;./module0.nix:7:6:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;â†“&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;fast-tags&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;self.haskell.lib.justStaticExecutables&lt;/span&gt; self.haskellPackages.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;â€¦&lt;/span&gt; is not in scope within this other overlay:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;./module1.nix:7:6:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                                            &lt;span class=&quot;ex&quot;&gt;â†“&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; = self.haskell.lib.dontCheck super.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;â€¦&lt;/span&gt; because the latter overlay is ordered before the former overlay.&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Suggestion:&lt;/span&gt; Perhaps wrap the latter overlay in &lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;lib.mkAfter&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;, like this:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;lib,&lt;/span&gt; ... }:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;nixpkgs.overlays&lt;/span&gt; = lib.mkAfter [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;self:&lt;/span&gt; super: {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;co&quot;&gt;# In a separate overlay, create a variation on the `fast-tags` build with&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;co&quot;&gt;# tests disabled&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; = self.haskell.lib.dontCheck super.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nobody expects a type-checker for Nix to be &lt;em&gt;that&lt;/em&gt; smart, but itâ€™s instructive to consider why not.&lt;/p&gt;&lt;p&gt;Obviously, thereâ€™s no way for the type-checker to know that the userâ€™s intent was to refer to the &lt;code&gt;fast-tags&lt;/code&gt; attribute in some other overlay defined within some unrelated file. Or is there?&lt;/p&gt;&lt;p&gt;Well, what if we had written the following simpler example that doesnâ€™t use overlays and instead uses ordinary &lt;code&gt;let&lt;/code&gt; definitions to build up the final desired package:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { }&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;fast-tags&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.justStaticExecutables&lt;/span&gt; pkgs.haskellPackages.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.dontCheck&lt;/span&gt; fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;er&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As an aside, letâ€™s admire how much more clear that example is. However, there are good reasons why Nixpkgs discourages this approach in the large which I wonâ€™t get into.&lt;/p&gt;&lt;p&gt;Now letâ€™s take that example and reorder the two &lt;code&gt;let&lt;/code&gt; bindings:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { }&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.dontCheck&lt;/span&gt; fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;fast-tags&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.justStaticExecutables&lt;/span&gt; pkgs.haskellPackages.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;er&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, actually that still works ğŸ˜… because Nix permits out-of-order &lt;code&gt;let&lt;/code&gt; bindings so long as they are in the same &lt;code&gt;let&lt;/code&gt; block, but we can force the ordering by nesting the latter &lt;code&gt;let&lt;/code&gt; binding:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { }&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.dontCheck&lt;/span&gt; fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;er&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;fast-tags&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.justStaticExecutables&lt;/span&gt; pkgs.haskellPackages.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;er&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;â€¦ which gives the following error we expected:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;error:&lt;/span&gt; undefined variable &lt;span class=&quot;st&quot;&gt;'fast-tags'&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;at&lt;/span&gt; /private/tmp/test/example.nix:5:32:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.dontCheck&lt;/span&gt; fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;                                &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This type error is already easier for the user to interpret, not because of any type system, but rather because using ordinary &lt;code&gt;let&lt;/code&gt; bindings forced us to structure our code so that a human can more easily discern whatâ€™s wrong. Now the &lt;code&gt;let&lt;/code&gt; bindings are plainly out of order, lexically.&lt;/p&gt;&lt;p&gt;Moreover, now a type-checker can easily look ahead and detect that there was a &lt;code&gt;fast-tags&lt;/code&gt; identifier defined shortly downstream that the user might have intended to use, so itâ€™s completely realistic to expect an error message like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;error:&lt;/span&gt; undefined variable &lt;span class=&quot;st&quot;&gt;'fast-tags'&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;at&lt;/span&gt; /private/tmp/test/example.nix:5:32:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;ex&quot;&gt;fast-tags-no-tests&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.dontCheck&lt;/span&gt; fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;                                &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Hint:&lt;/span&gt; Did you mean to refer to this &lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;fast-tags&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt; identifier defined afterwards&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;within&lt;/span&gt; the same file&lt;span class=&quot;pp&quot;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;ex&quot;&gt;fast-tags&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;ex&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;ex&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;ex&quot;&gt;pkgs.haskell.lib.justStaticExecutables&lt;/span&gt; pkgs.haskellPackages.fast-tags&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By restructuring definitions as ordinary &lt;code&gt;let&lt;/code&gt; bindings weâ€™ve greatly reduced the difficulty of producing a great error message. No longer does the type-checker require a deep understanding of Nixpkgs overlays or NixOS modules; the type-checker only needs to understand how Nix the language works (specifically &lt;code&gt;let&lt;/code&gt; bindings).&lt;/p&gt;&lt;p&gt;Equally important, &lt;strong&gt;the end user&lt;/strong&gt; also no longer requires an understanding of Nixpkgs overlays or NixOS modules to understand the type error. Even our hypothetical â€œgreatâ€� error message still required our user to have some literacy with Nixpkgs and NixOS in order to interpret the error (albeit, not as much as the original stack trace).&lt;/p&gt;&lt;h4 id=&quot;the-actual-problem&quot;&gt;The actual problem&lt;/h4&gt;&lt;p&gt;The real issue with Nix isnâ€™t the lack of a type checker. The absence of a type-checker is problematic, but in my view this is a symptom of a larger issue.&lt;/p&gt;&lt;p&gt;The fundamental problem that plagues all type-checking attempts for Nix is that nobody actually uses &lt;strong&gt;Nix the language&lt;/strong&gt; at any significant scale. Instead, the community has adopted two sub-languages embedded within Nix for programming â€œin the largeâ€�:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Nixpkgs overlays&lt;/p&gt;&lt;p&gt;This is an embedded language that simulates object-oriented programming with inheritance / late binding / dynamic scope (depending on how you think about it)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;NixOS modules&lt;/p&gt;&lt;p&gt;This is an embedded language that roughly emulates &lt;a href=&quot;https://github.com/hashicorp/terraform&quot;&gt;Terraform&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Carefully note that these are not language features built into Nix; rather they are embedded domain-specific languages implemented within Nix. Consequently, a type-checker for â€œNix the languageâ€� is not necessarily equipped to type-check these two sub-languages.&lt;/p&gt;&lt;h4 id=&quot;what-about-row-polymorphism&quot;&gt;What about row polymorphism?&lt;/h4&gt;&lt;p&gt;Letâ€™s focus on one of those two sub-languages, the Nixpkgs overlay system, to see if we can still salvage things somewhat. The reason I suggest this is because the Nixpkgs overlay system is the far simpler sub-language of the two and the implementation of overlays is simple and tiny.&lt;/p&gt;&lt;p&gt;Technically, all you need to type-check the Nixpkgs overlays system is type system support for anonymous records and Nixâ€™s &lt;code&gt;//&lt;/code&gt; operator. Modern type systems can support both of those features through the use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Row_polymorphism&quot;&gt;row polymorphism&lt;/a&gt;. This section assumes familiarity with row polymorphism, and you can skip this section if you arenâ€™t familiar (itâ€™s not essential), but if you would like to learn more, you can read the following resources:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://hgiasac.github.io/posts/2018-11-18-Record-Row-Type-and-Row-Polymorphism.html&quot;&gt;Record, Row Types, and Row Polymorphism&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ckoster22.medium.com/advanced-types-in-elm-extensible-records-67e9d804030d&quot;&gt;Advanced Types in Elm: Extensible Records&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Most people who are familiar with row polymorphism will wonder: can we use a type system with support for row polymorphism to type-check Nixpkgs overlays?&lt;/p&gt;&lt;p&gt;The answer is: sort of. We run into the same problems as stack traces: we catch errors, but the error messages and inferred types are less informative than we would hope.&lt;/p&gt;&lt;p&gt;To illustrate this, consider the default entrypoint to Nixpkgs, which is a function that takes an &lt;code&gt;overlays&lt;/code&gt; argument containing a list of overlays, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  overlay0 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; super&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cowsay &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; super&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;cowsay&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;overrideAttrs (old&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      doCheck &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; false;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    });&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  overlay1 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; super&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    hello &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; super&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;hello&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;overrideAttrs (old&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      postInstall &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;${self.cowsay}/bin/cowsay 'Installation complete'&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    });&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  pkgs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &amp;lt;nixpkgs&amp;gt; { overlays = [ overlay0 overlay1 ]; };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  pkgs&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, ask yourself the following questions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;What would be the type of an overlay?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What would be the type of a list of overlays?&lt;/p&gt;&lt;p&gt;â€¦ such as &lt;code&gt;[ overlay0 overlay1 ]&lt;/code&gt; in the above example&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What type should the &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt; function expect for its &lt;code&gt;overlays&lt;/code&gt; argument?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How do the answers to the above questions affect inferred types and error messages?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I found these questions surprisingly difficult to answer! Again, the above example is not a contrived example I chose as a type-checking puzzle. This is the recommended way to use Nixpkgs.&lt;/p&gt;&lt;p&gt;I will go ahead and share what I think are the â€œrightâ€� answers that will get us closest to a type-checker for Nixpkgs with the fewest intrusive changes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;What would be the type of an overlay?&lt;/p&gt;&lt;p&gt;There would be no such thing as an â€œoverlay typeâ€�. Each overlay would have a distinct type, but in every case an overlay would be a function from strongly-typed and row-polymorphic record inputs to a strongly-typed record output.&lt;/p&gt;&lt;p&gt;For example, the types of the above &lt;code&gt;overlay0&lt;/code&gt; and &lt;code&gt;overlay1&lt;/code&gt; functions would be something like this (using a pseudo-notation I made up inspired by &lt;a href=&quot;https://github.com/Gabriel439/grace&quot;&gt;Fall-from-Grace&lt;/a&gt; because no existing language has great syntax for this):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;overlay0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;:&lt;/span&gt;  forall &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;a&lt;/span&gt; b c : Fields&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;o&lt;/span&gt; : Type&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;.&lt;/span&gt;  { a }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay :&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;overrideAttrs&lt;/span&gt; :&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { doCheck : Bool }&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { c, doCheck : Bool }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay : { c, doCheck : Bool } }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;overlay1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;:&lt;/span&gt; forall &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;a&lt;/span&gt; b c : Fields&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;o&lt;/span&gt; : Type&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;.&lt;/span&gt;  { a }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { hello :&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;overrideAttrs&lt;/span&gt; :&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { postInstall : Text }&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { c, postInstall : Text }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { hello : { c, postInstall : Text } }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Donâ€™t sweat it if you donâ€™t follow that notation I just made up. The purpose is just to informally illustrate that we can assign row-polymorphic types to &lt;code&gt;overlay0&lt;/code&gt; and &lt;code&gt;overlay1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What would be the type of a list of overlays?&lt;/p&gt;&lt;p&gt;There would be no such thing as a list of overlays, for the same reason that there would be no â€œoverlay typeâ€�.&lt;/p&gt;&lt;p&gt;To be totally pedantic, you could in theory model a list of heterogeneously-typed overlays using a type-indexed list, but I donâ€™t believe thatâ€™s the right path forward for Nixpkgs.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What type should the &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt; function expect for its &lt;code&gt;overlays&lt;/code&gt; argument?&lt;/p&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt; entrypoint function would no longer take a list of overlays (because there would be no such thing as a list of overlays). It would take a single overlay as input and you would have to precompose overlays using &lt;code&gt;lib.composeExtensions&lt;/code&gt; if you wanted to supply more than one overlay as input to &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, if you were to compose &lt;code&gt;overlay0&lt;/code&gt; and &lt;code&gt;overlay1&lt;/code&gt;, you would end up with a new composite overlay of the following type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;lib.composeExtensions&lt;/span&gt; overlay0 overlay1&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;:&lt;/span&gt; forall &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;a&lt;/span&gt; b c d : Fields&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;o&lt;/span&gt; : Type&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;.&lt;/span&gt;  { a }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay :&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;overrideAttrs&lt;/span&gt; :&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { doCheck : Bool }&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { c, doCheck : Bool }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;hello&lt;/span&gt; : &lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;overrideAttrs&lt;/span&gt; :&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { postInstall : Text }&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { d, postInstall : Text }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; d&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay : { c, doCheck : Bool }, hello : { d, postInstall : Text } }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt; entrypoint function type would be something like:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;:&lt;/span&gt; forall &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;a&lt;/span&gt; : Fields&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;overlay&lt;/span&gt; : &lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;cowsay&lt;/span&gt; : â€¦, hello : â€¦, â€¦, a }  &lt;span class=&quot;co&quot;&gt;# Enormous type goes here&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay : â€¦, hello : â€¦, â€¦ }     &lt;span class=&quot;co&quot;&gt;# Similarly enormous type&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { a }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; â€¦  &lt;span class=&quot;co&quot;&gt;# Other &amp;lt;nixpkgs&amp;gt; arguments we'll ignore for now&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay : â€¦, hello : â€¦, â€¦, a }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How do the answers to the above questions affect inferred types and error messages?&lt;/p&gt;&lt;p&gt;The inferred types would be enormous (especially for the &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt; entrypoint function). They might even be infinitely large without some form of information hiding, because these derivations are infinitely deep records that refer to themselves:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix repl&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;nix-repl&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; pkgs = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;nix-repl&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; pkgs.hello.out.out.out.out.out.â€¦  &lt;span class=&quot;co&quot;&gt;# â€¦ ad infinitum&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The error messages would be &lt;em&gt;slightly&lt;/em&gt; better than current stack traces but would still have great difficulty explaining to the user what actually went wrong because the type-checker is still not operating on the same abstraction level as the overlay system. The main improvement over stack traces is that the user would now be able to annotate expressions with types to help narrow down the cause of type errors.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I would like to dwell a little bit on the incredibly large inferred type for the &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;/code&gt; entrypoint, because this is essentially the same problem as the one highlighted in the previous section.&lt;/p&gt;&lt;p&gt;Implementing the Nixpkgs overlay system as an embedded language within Nix means that implementation details (like scope) are exposed to the user in a way that they wouldnâ€™t have been exposed to if they were built-in language features.&lt;/p&gt;&lt;p&gt;For example, this type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;:&lt;/span&gt; forall &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;a&lt;/span&gt; : Fields&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;overlay&lt;/span&gt; : &lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;cowsay&lt;/span&gt; : â€¦, hello : â€¦, â€¦, a }  &lt;span class=&quot;co&quot;&gt;# Enormous type goes here&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay : â€¦, hello : â€¦, â€¦ }     &lt;span class=&quot;co&quot;&gt;# Similarly enormous type&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { a }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;ex&quot;&gt;,&lt;/span&gt; â€¦  &lt;span class=&quot;co&quot;&gt;# Other &amp;lt;nixpkgs&amp;gt; arguments we'll ignore for now&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { cowsay : â€¦, hello : â€¦, â€¦, a }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;â€¦ is essentially saying â€œour input overlay is a value that has all of these packages in scope (such as &lt;code&gt;cowsay&lt;/code&gt;, &lt;code&gt;hello&lt;/code&gt;, and every other package from Nixpkgs), and then adds some new packages to the scope.&lt;/p&gt;&lt;p&gt;Thatâ€™s cool and all that we can reify this information in the language and the type, but I want to point out how awkward this is compared to good old-fashioned lexical scope natively supported by the Nix language. Letâ€™s revisit the same example using plain-old &lt;code&gt;let&lt;/code&gt; bindings:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { }&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;cowsay&lt;/span&gt; = pkgs.cowsay.overrideAttrs &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;old:&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;doCheck&lt;/span&gt; = false&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;hello&lt;/span&gt; = pkgs.hello.overrideAttrs &lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;old:&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;postInstall&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${cowsay}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/bin/cowsay 'Installation complete'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;er&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;er&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;hello&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I were to ask the type-checker what the type of &lt;code&gt;cowsay&lt;/code&gt; is, I would hope that the type-checker would respond with something like:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;cowsay&lt;/code&gt; is a &lt;code&gt;Derivation&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;â€¦ and not:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;cowsay&lt;/code&gt; is an expression that begins from a context containing a value named &lt;code&gt;pkgs&lt;/code&gt; of this enormous type and then ends with a new context that is also enormous, but now extended with an additional value named &lt;code&gt;cowsay&lt;/code&gt; of type &lt;code&gt;Derivation&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You see the problem here? By implementing this overlays sub-language within Nix weâ€™re needlessly polluting the user experience with internal implementation details of that sub-language (such as scope and context). This is why a type-checker for Nix is not adequately equipped to explain to the user what is happening within the Nixpkgs overlay system because itâ€™s type-checking things at the wrong abstraction level.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;So whatâ€™s the path forward for Nix? Iâ€™m not entirely sure, but here is what I think are the possible outcomes, in roughly ascending order of difficulty:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solution A:&lt;/strong&gt; Donâ€™t implement a type system for Nix&lt;/p&gt;&lt;p&gt;Instead, try to improve the quality of stack traces and dynamic type errors.&lt;/p&gt;&lt;p&gt;For example, this is essentially the approach taken by the recent work to improve the user experience for stack traces:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/bburdette/nix-error-proposal/blob/master/proposal.md&quot;&gt;Nix Error Enhancement&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solution B:&lt;/strong&gt; Only type-check Nix â€œin the smallâ€�&lt;/p&gt;&lt;p&gt;This seems to be the approach that &lt;a href=&quot;https://github.com/tweag/nickel&quot;&gt;Nickel&lt;/a&gt; is taking and this also seems to be the same way that people are using &lt;a href=&quot;https://www.haskellforall.com/2017/01/typed-nix-programming-using-dhall.html&quot;&gt;dhall-to-nix&lt;/a&gt;. Users settle for type-checking smaller fragments of Nix (like individual packages or NixOS modules), but any issues that arise across package/module boundaries are still not effectively addressed.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solution C:&lt;/strong&gt; Type-check Nixpkgs overlays using a type system supporting row polymorphism&lt;/p&gt;&lt;p&gt;Some users might be willing to settle for really complicated row-polymorphic types as long as they can still statically detect packaging issues in the large.&lt;/p&gt;&lt;p&gt;I havenâ€™t yet thought through how to type-check the NixOS module system as an embedded language, so Iâ€™m leaving that out for now, but it might be possible to also type-check that using row polymorphism ğŸ¤·ğŸ�»â€�â™€ï¸�.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solution D:&lt;/strong&gt; Implement the two sub-languages in an external language&lt;/p&gt;&lt;p&gt;In other words, implement the Nixpkgs overlay system and NixOS module system in a separate language that is not Nix so that overlays and modules are supported by the language along with a type system that natively understands these features. Then you could compile this external language to ordinary Nix code that is compatible with the existing Nixpkgs overlay system or NixOS module system.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solution E:&lt;/strong&gt; Like Solution D, but upstream these features into the Nix language&lt;/p&gt;&lt;p&gt;You could add Nix language support for overlays/modules, instead of implementing them as embedded domain-specific languages.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solution F:&lt;/strong&gt; Like Solution D, but without Nix as an intermediate language&lt;/p&gt;&lt;p&gt;Basically, design a new front-end programming language for the Nix store that isnâ€™t Nix. This language would natively understand overlays and NixOS modules and would generate derivations directly without going through Nix as an intermediate language.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solution G:&lt;/strong&gt; Donâ€™t use overlays or NixOS modules at all&lt;/p&gt;&lt;p&gt;In other words, rethink the ecosystem from the ground up to use plain old Nix the language. Obviously, this is a massive amount of work to reinvent all of Nixpkgs and NixOS and itâ€™s not clear that people would even want this.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;My best guess is that â€œSolution Câ€� or â€œSolution Dâ€� are the two most promising approaches that strike the right balance between how difficult they are to implement and actually addressing what users want in a type-checker. &lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-14T14:23:37Z",
"URL":" https://www.haskellforall.com/2022/03/the-hard-part-of-type-checking-nix.html "
}
,
{
"title":"Mark Jason Dominus: Why no Unix error device?",
"textBody":"&lt;p&gt;Suppose you're writing some program that does file I/O.  You'd like to include a unit test to make sure it properly handles the error when the disk fills up and the write can't complete.  This is tough to simulate.  The test itself obviously can't (or at least shouldn't) actually fill the disk.&lt;/p&gt;  &lt;p&gt;A while back some Unix systems introduced a device called &lt;code&gt;/dev/full&lt;/code&gt;.  Reading from &lt;code&gt;/dev/full&lt;/code&gt; returns zero bytes, just like &lt;code&gt;/dev/zero&lt;/code&gt;.  But all attempts to write to &lt;code&gt;/dev/full&lt;/code&gt;  fail with &lt;code&gt;ENOSPC&lt;/code&gt;, the system error that indices a full disk.  You can set up your tests to try to write to &lt;code&gt;/dev/full&lt;/code&gt; and make sure they fail gracefully.&lt;/p&gt;  &lt;p&gt;That's fun, but why not generalize it?  Suppose there was a &lt;code&gt;/dev/error&lt;/code&gt; device:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/errdev.h&amp;gt; error = open(&quot;/dev/error&quot;, O_RDWR);  ioctl(error, ERRDEV_SET, 23); &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;The device driver would remember the number 23 from this &lt;code&gt;ioctl&lt;/code&gt; call, and the next time the process tried to read or write the &lt;code&gt;error&lt;/code&gt; descriptor, the request would fail and set &lt;code&gt;errno&lt;/code&gt; to 23, whatever that is.  Of course you wouldn't hardwire the 23, you'd actually do&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/errno.h&amp;gt;  ioctl(error, ERRDEV_SET, EBUSY); &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;and then the next I/O attempt would fail with &lt;code&gt;EBUSY&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Well, that's the way I always imagined it, but now that I think about it a little more, you don't need this to be a device driver.  It would be better if instead of an &lt;code&gt;ioctl&lt;/code&gt; it was an &lt;code&gt;fcntl&lt;/code&gt; that you could do on any file descriptor at all.&lt;/p&gt;  &lt;p&gt;Big drawback: the most common I/O errors are probably &lt;code&gt;EACCESS&lt;/code&gt; and &lt;code&gt;ENOENT&lt;/code&gt;, failures in the &lt;code&gt;open&lt;/code&gt;, not in the actual I/O.  This idea doesn't address that at all.  But maybe some variation would work there.  Maybe for those we go back to the original idea, have a &lt;code&gt;/dev/openerror&lt;/code&gt;, and after you do &lt;code&gt;ioctl(dev_openerror, ERRDEV_SET, EACCESS)&lt;/code&gt;, the next call to &lt;code&gt;open&lt;/code&gt; fails with &lt;code&gt;EACCESS&lt;/code&gt;.  That might be useful.&lt;/p&gt;  &lt;p&gt;There are some security concerns with the &lt;code&gt;fcntl&lt;/code&gt; version of the idea. Suppose I write malicious program that opens some file descriptor, dups it to standard input, does &lt;code&gt;fcntl(1, ERRDEV_SET, ESOMEWEIRDERROR)&lt;/code&gt;, then execs the target program &lt;code&gt;t&lt;/code&gt;.  Hapless &lt;code&gt;t&lt;/code&gt; tries to read standard input, gets &lt;code&gt;ESOMEWEIRDERROR&lt;/code&gt;, and then does something unexpected that it wasn't supposed to do.  This particular attack is easily foiled: &lt;code&gt;exec&lt;/code&gt; should reset all the file descriptor saved-error states.  But there might be something more subtle that I haven't thought of and in OS security there usually is.&lt;/p&gt;  &lt;p&gt;Eh, probably the right solution these days is to &lt;code&gt;LD_PRELOAD&lt;/code&gt; a complete mock filesystem library that has any hooks you want in it.  I don't know what the security implications of &lt;code&gt;LD_PRELOAD&lt;/code&gt; are but I have to believe that someone figured them all out by now.&lt;/p&gt;  &lt;p&gt;[ Addendum 20220314: &lt;a href=&quot;https://blog.plover.com/Unix/error-device-2.html&quot;&gt;Better solutions exist&lt;/a&gt;. ]&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-13T16:50:00Z",
"URL":" https://blog.plover.com/Unix/error-device.html "
}
,
{
"title":"Magnus Therning: Simple nix flake for Haskell development",
"textBody":"&lt;p&gt; Recently I've moved over to using &lt;a href=&quot;https://nixos.wiki/wiki/Flakes&quot;&gt;flakes&lt;/a&gt; in my Haskell development projects. It took me a little while to arrive at a pattern a flake for Haskell development that I like. I'm hoping sharing it might help others when doing the same change &lt;/p&gt;  &lt;div class=&quot;org-src-container&quot;&gt; &lt;pre class=&quot;src src-nix&quot;&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-1&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;org-nix-attribute&quot;&gt;inputs&lt;/span&gt; = &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;org-nix-attribute&quot;&gt;nixpkgs.url&lt;/span&gt; = &lt;span class=&quot;org-string&quot;&gt;&quot;github:nixos/nixpkgs&quot;&lt;/span&gt;;     &lt;span class=&quot;org-nix-attribute&quot;&gt;flake-utils.url&lt;/span&gt; = &lt;span class=&quot;org-string&quot;&gt;&quot;github:numtide/flake-utils&quot;&lt;/span&gt;;   &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;}&lt;/span&gt;;    &lt;span class=&quot;org-nix-attribute&quot;&gt;outputs&lt;/span&gt; = &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;{&lt;/span&gt; self, nixpkgs, flake-utils &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;}&lt;/span&gt;:     flake-utils.lib.eachDefaultSystem &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;(&lt;/span&gt;system:       &lt;span class=&quot;org-nix-keyword&quot;&gt;with&lt;/span&gt; nixpkgs.legacyPackages.$&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;{&lt;/span&gt;system&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;}&lt;/span&gt;;       &lt;span class=&quot;org-nix-keyword&quot;&gt;let&lt;/span&gt;         &lt;span class=&quot;org-nix-attribute&quot;&gt;t&lt;/span&gt; = lib.trivial;         &lt;span class=&quot;org-nix-attribute&quot;&gt;hl&lt;/span&gt; = haskell.lib;          &lt;span class=&quot;org-nix-attribute&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;org-string&quot;&gt;&quot;project-name&quot;&lt;/span&gt;;          &lt;span class=&quot;org-nix-attribute&quot;&gt;project&lt;/span&gt; = devTools: &lt;span class=&quot;org-comment&quot;&gt;# [1]&lt;/span&gt;           &lt;span class=&quot;org-nix-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;org-nix-attribute&quot;&gt;addBuildTools&lt;/span&gt; = &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;t.flip hl.addBuildTools&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt; devTools;           &lt;span class=&quot;org-nix-keyword&quot;&gt;in&lt;/span&gt; haskellPackages.developPackage &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;{&lt;/span&gt;             &lt;span class=&quot;org-nix-attribute&quot;&gt;root&lt;/span&gt; = lib.sourceFilesBySuffices &lt;span class=&quot;org-nix-constant&quot;&gt;./.&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;org-string&quot;&gt;&quot;.cabal&quot;&lt;/span&gt; &lt;span class=&quot;org-string&quot;&gt;&quot;.hs&quot;&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;]&lt;/span&gt;;             &lt;span class=&quot;org-nix-attribute&quot;&gt;name&lt;/span&gt; = name;             &lt;span class=&quot;org-nix-attribute&quot;&gt;returnShellEnv&lt;/span&gt; = !&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;devTools == &lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;org-comment&quot;&gt;# [2]&lt;/span&gt;              &lt;span class=&quot;org-nix-attribute&quot;&gt;modifier&lt;/span&gt; = &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;t.flip t.pipe&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;[&lt;/span&gt;               addBuildTools               hl.dontHaddock               hl.enableStaticLibraries               hl.justStaticExecutables               hl.disableLibraryProfiling               hl.disableExecutableProfiling             &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;]&lt;/span&gt;;           &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;}&lt;/span&gt;;        &lt;span class=&quot;org-nix-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;{&lt;/span&gt;         &lt;span class=&quot;org-nix-attribute&quot;&gt;packages.pkg&lt;/span&gt; = project &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;org-comment&quot;&gt;# [3]&lt;/span&gt;          &lt;span class=&quot;org-nix-attribute&quot;&gt;defaultPackage&lt;/span&gt; = self.packages.$&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;{&lt;/span&gt;system&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;}&lt;/span&gt;.pkg;          &lt;span class=&quot;org-nix-attribute&quot;&gt;devShell&lt;/span&gt; = project &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-nix-keyword&quot;&gt;with&lt;/span&gt; haskellPackages; &lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;org-comment&quot;&gt;# [4]&lt;/span&gt;           cabal-fmt           cabal-install           haskell-language-server           hlint         &lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;;       &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;org-rainbow-delimiters-depth-1&quot;&gt;}&lt;/span&gt; &lt;/pre&gt; &lt;/div&gt;  &lt;p&gt; The main issue I ran into is getting a development shell out of &lt;code&gt;haskellPackages.developPackage&lt;/code&gt;, it requires &lt;code&gt;returnShellEnv&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt;. Something that isn't too easy to find out. This means that the only solution I've found to getting a development shell is to have separate expressions for building and getting a shell. In the above flake the build expression, &lt;i&gt;[3]&lt;/i&gt;, passes an empty list of development tools, the argument &lt;code&gt;devTools&lt;/code&gt; at &lt;i&gt;[1]&lt;/i&gt;, while the development shell expression, &lt;i&gt;[4]&lt;/i&gt;, passes in a list of tools needed for development only. The decision of whether the expression is for building or for a development shell, &lt;i&gt;[2]&lt;/i&gt;, then looks at the list of development tools passed in. &lt;/p&gt; &lt;div class=&quot;taglist&quot;&gt;&lt;a href=&quot;https://magnus.therning.org/tags.html&quot;&gt;Tags&lt;/a&gt;: &lt;a href=&quot;https://magnus.therning.org/tag-haskell.html&quot;&gt;haskell&lt;/a&gt; &lt;a href=&quot;https://magnus.therning.org/tag-nix.html&quot;&gt;nix&lt;/a&gt; &lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-13T06:29:00Z",
"URL":" https://magnus.therning.org/2022-03-13-simple-nix-flake-for-haskell-development.html "
}
,
{
"title":"Ken T Takusagawa: [eexymbii] color palettes",
"textBody":"&lt;p&gt;some widely separated points in the RGB color cube.  previously, &lt;a href=&quot;http://kenta.blogspot.com/2017/03/dwvcvceg-colors.html&quot;&gt;the right way to do this, using the Cielab color space.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;8 colors (cube vertices): rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;9 colors (8 colors + gray): rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;, rgb(128,128,128)=&lt;span style=&quot;background-color: rgb(128,128,128);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;12 colors (vertices + 3 gradations of green): rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,128,0)=&lt;span style=&quot;background-color: rgb(0,128,0);&quot;&gt;  &lt;/span&gt;, rgb(0,128,255)=&lt;span style=&quot;background-color: rgb(0,128,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(255,128,0)=&lt;span style=&quot;background-color: rgb(255,128,0);&quot;&gt;  &lt;/span&gt;, rgb(255,128,255)=&lt;span style=&quot;background-color: rgb(255,128,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;13 colors (12 colors + gray): rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,128,0)=&lt;span style=&quot;background-color: rgb(0,128,0);&quot;&gt;  &lt;/span&gt;, rgb(0,128,255)=&lt;span style=&quot;background-color: rgb(0,128,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(255,128,0)=&lt;span style=&quot;background-color: rgb(255,128,0);&quot;&gt;  &lt;/span&gt;, rgb(255,128,255)=&lt;span style=&quot;background-color: rgb(255,128,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;, rgb(128,128,128)=&lt;span style=&quot;background-color: rgb(128,128,128);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;18 colors (3 gradations of red, green): rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,128,0)=&lt;span style=&quot;background-color: rgb(0,128,0);&quot;&gt;  &lt;/span&gt;, rgb(0,128,255)=&lt;span style=&quot;background-color: rgb(0,128,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(128,0,0)=&lt;span style=&quot;background-color: rgb(128,0,0);&quot;&gt;  &lt;/span&gt;, rgb(128,0,255)=&lt;span style=&quot;background-color: rgb(128,0,255);&quot;&gt;  &lt;/span&gt;, rgb(128,128,0)=&lt;span style=&quot;background-color: rgb(128,128,0);&quot;&gt;  &lt;/span&gt;, rgb(128,128,255)=&lt;span style=&quot;background-color: rgb(128,128,255);&quot;&gt;  &lt;/span&gt;, rgb(128,255,0)=&lt;span style=&quot;background-color: rgb(128,255,0);&quot;&gt;  &lt;/span&gt;, rgb(128,255,255)=&lt;span style=&quot;background-color: rgb(128,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(255,128,0)=&lt;span style=&quot;background-color: rgb(255,128,0);&quot;&gt;  &lt;/span&gt;, rgb(255,128,255)=&lt;span style=&quot;background-color: rgb(255,128,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;19 colors (18 colors + gray): rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,128,0)=&lt;span style=&quot;background-color: rgb(0,128,0);&quot;&gt;  &lt;/span&gt;, rgb(0,128,255)=&lt;span style=&quot;background-color: rgb(0,128,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(128,0,0)=&lt;span style=&quot;background-color: rgb(128,0,0);&quot;&gt;  &lt;/span&gt;, rgb(128,0,255)=&lt;span style=&quot;background-color: rgb(128,0,255);&quot;&gt;  &lt;/span&gt;, rgb(128,128,0)=&lt;span style=&quot;background-color: rgb(128,128,0);&quot;&gt;  &lt;/span&gt;, rgb(128,128,255)=&lt;span style=&quot;background-color: rgb(128,128,255);&quot;&gt;  &lt;/span&gt;, rgb(128,255,0)=&lt;span style=&quot;background-color: rgb(128,255,0);&quot;&gt;  &lt;/span&gt;, rgb(128,255,255)=&lt;span style=&quot;background-color: rgb(128,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(255,128,0)=&lt;span style=&quot;background-color: rgb(255,128,0);&quot;&gt;  &lt;/span&gt;, rgb(255,128,255)=&lt;span style=&quot;background-color: rgb(255,128,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;, rgb(128,128,128)=&lt;span style=&quot;background-color: rgb(128,128,128);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;27 colors (3 gradations of all): rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(0,0,128)=&lt;span style=&quot;background-color: rgb(0,0,128);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,128,0)=&lt;span style=&quot;background-color: rgb(0,128,0);&quot;&gt;  &lt;/span&gt;, rgb(0,128,128)=&lt;span style=&quot;background-color: rgb(0,128,128);&quot;&gt;  &lt;/span&gt;, rgb(0,128,255)=&lt;span style=&quot;background-color: rgb(0,128,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,128)=&lt;span style=&quot;background-color: rgb(0,255,128);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(128,0,0)=&lt;span style=&quot;background-color: rgb(128,0,0);&quot;&gt;  &lt;/span&gt;, rgb(128,0,128)=&lt;span style=&quot;background-color: rgb(128,0,128);&quot;&gt;  &lt;/span&gt;, rgb(128,0,255)=&lt;span style=&quot;background-color: rgb(128,0,255);&quot;&gt;  &lt;/span&gt;, rgb(128,128,0)=&lt;span style=&quot;background-color: rgb(128,128,0);&quot;&gt;  &lt;/span&gt;, rgb(128,128,128)=&lt;span style=&quot;background-color: rgb(128,128,128);&quot;&gt;  &lt;/span&gt;, rgb(128,128,255)=&lt;span style=&quot;background-color: rgb(128,128,255);&quot;&gt;  &lt;/span&gt;, rgb(128,255,0)=&lt;span style=&quot;background-color: rgb(128,255,0);&quot;&gt;  &lt;/span&gt;, rgb(128,255,128)=&lt;span style=&quot;background-color: rgb(128,255,128);&quot;&gt;  &lt;/span&gt;, rgb(128,255,255)=&lt;span style=&quot;background-color: rgb(128,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,128)=&lt;span style=&quot;background-color: rgb(255,0,128);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(255,128,0)=&lt;span style=&quot;background-color: rgb(255,128,0);&quot;&gt;  &lt;/span&gt;, rgb(255,128,128)=&lt;span style=&quot;background-color: rgb(255,128,128);&quot;&gt;  &lt;/span&gt;, rgb(255,128,255)=&lt;span style=&quot;background-color: rgb(255,128,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,128)=&lt;span style=&quot;background-color: rgb(255,255,128);&quot;&gt;  &lt;/span&gt;, rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Web_colors&amp;amp;oldid=1053868659#Basic_colors&quot;&gt;16 colors named in HTML 4.01&lt;/a&gt;: rgb(255,255,255)=&lt;span style=&quot;background-color: rgb(255,255,255);&quot;&gt;  &lt;/span&gt;, rgb(192,192,192)=&lt;span style=&quot;background-color: rgb(192,192,192);&quot;&gt;  &lt;/span&gt;, rgb(128,128,128)=&lt;span style=&quot;background-color: rgb(128,128,128);&quot;&gt;  &lt;/span&gt;, rgb(0,0,0)=&lt;span style=&quot;background-color: rgb(0,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,0,0)=&lt;span style=&quot;background-color: rgb(255,0,0);&quot;&gt;  &lt;/span&gt;, rgb(128,0,0)=&lt;span style=&quot;background-color: rgb(128,0,0);&quot;&gt;  &lt;/span&gt;, rgb(255,255,0)=&lt;span style=&quot;background-color: rgb(255,255,0);&quot;&gt;  &lt;/span&gt;, rgb(128,128,0)=&lt;span style=&quot;background-color: rgb(128,128,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,0)=&lt;span style=&quot;background-color: rgb(0,255,0);&quot;&gt;  &lt;/span&gt;, rgb(0,128,0)=&lt;span style=&quot;background-color: rgb(0,128,0);&quot;&gt;  &lt;/span&gt;, rgb(0,255,255)=&lt;span style=&quot;background-color: rgb(0,255,255);&quot;&gt;  &lt;/span&gt;, rgb(0,128,128)=&lt;span style=&quot;background-color: rgb(0,128,128);&quot;&gt;  &lt;/span&gt;, rgb(0,0,255)=&lt;span style=&quot;background-color: rgb(0,0,255);&quot;&gt;  &lt;/span&gt;, rgb(0,0,128)=&lt;span style=&quot;background-color: rgb(0,0,128);&quot;&gt;  &lt;/span&gt;, rgb(255,0,255)=&lt;span style=&quot;background-color: rgb(255,0,255);&quot;&gt;  &lt;/span&gt;, rgb(128,0,128)=&lt;span style=&quot;background-color: rgb(128,0,128);&quot;&gt;  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;set difference of the 27-color set minus the 16-color set (12 colors not present in the 16-color set): rgb(0,128,255)=&lt;span style=&quot;background-color: rgb(0,128,255);&quot;&gt;  &lt;/span&gt;, rgb(0,255,128)=&lt;span style=&quot;background-color: rgb(0,255,128);&quot;&gt;  &lt;/span&gt;, rgb(128,0,255)=&lt;span style=&quot;background-color: rgb(128,0,255);&quot;&gt;  &lt;/span&gt;, rgb(128,128,255)=&lt;span style=&quot;background-color: rgb(128,128,255);&quot;&gt;  &lt;/span&gt;, rgb(128,255,0)=&lt;span style=&quot;background-color: rgb(128,255,0);&quot;&gt;  &lt;/span&gt;, rgb(128,255,128)=&lt;span style=&quot;background-color: rgb(128,255,128);&quot;&gt;  &lt;/span&gt;, rgb(128,255,255)=&lt;span style=&quot;background-color: rgb(128,255,255);&quot;&gt;  &lt;/span&gt;, rgb(255,0,128)=&lt;span style=&quot;background-color: rgb(255,0,128);&quot;&gt;  &lt;/span&gt;, rgb(255,128,0)=&lt;span style=&quot;background-color: rgb(255,128,0);&quot;&gt;  &lt;/span&gt;, rgb(255,128,128)=&lt;span style=&quot;background-color: rgb(255,128,128);&quot;&gt;  &lt;/span&gt;, rgb(255,128,255)=&lt;span style=&quot;background-color: rgb(255,128,255);&quot;&gt;  &lt;/span&gt;, rgb(255,255,128)=&lt;span style=&quot;background-color: rgb(255,255,128);&quot;&gt;  &lt;/span&gt;&lt;/p&gt;   &lt;p&gt;instead of appending gray rgb(128,128,128) in the sets above, perhaps it would have been better to append the silver rgb(192,192,192) of HTML 4.01.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://web.mit.edu/kenta/www/three/small-color-sets/eexymbii/&quot;&gt;Haskell source code to generate HTML for this post.&lt;/a&gt;  we use list as the nondeterminism monad, &quot;iterating&quot; over ranges with Monad.replicateM and sequence:&lt;/p&gt;&lt;p&gt;&lt;code&gt;range2 = [0,255];&lt;br /&gt;&lt;br /&gt;range3 = [0,128,255];&lt;br /&gt;&lt;br /&gt;set8 :: [Color];&lt;br /&gt;     set8 = Monad.replicateM 3 range2 &amp;amp; map Color;&lt;br /&gt;&lt;br /&gt;set12 :: [Color];&lt;br /&gt; set12 = [range2, range3, range2] &amp;amp; sequence &amp;amp; map Color; &lt;/code&gt;&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-12T04:52:53Z",
"URL":" http://kenta.blogspot.com/2022/03/eexymbii-color-palettes.html "
}
,
{
"title":"Sandy Maguire: Review: Generic Parallel Functional Programming",
"textBody":"&lt;p&gt;Today weâ€™re heading back into the Elliottverse â€” a beautiful world where programming is principled and makes sense. The paper of the week is Conal Elliottâ€™s &lt;a href=&quot;http://conal.net/papers/generic-parallel-functional/generic-parallel-functional.pdf&quot;&gt;Generic Parallel Functional Programming&lt;/a&gt;, which productively addresses the duality between â€œeasy to reason aboutâ€� and â€œfast to run.â€�&lt;/p&gt; &lt;p&gt;Consider the case of a right-associated list, we can give a scan of it in linear time and constant space:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;989&quot;&gt;module&lt;/a&gt; &lt;a id=&quot;ExR&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#996&quot; id=&quot;996&quot;&gt;ExR&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;1000&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;1008&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;ExR.RList&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1013&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1019&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1020&quot; id=&quot;1020&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1022&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1024&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1027&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1029&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1031&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;1035&quot;&gt;where&lt;/a&gt;     &lt;a id=&quot;ExR.RList.RNil&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1045&quot; id=&quot;1045&quot;&gt;RNil&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1050&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1052&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1020&quot; id=&quot;1058&quot;&gt;A&lt;/a&gt;     &lt;a id=&quot;ExR.RList._â—�_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1064&quot; id=&quot;1064&quot;&gt;_â—�_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1068&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1020&quot; id=&quot;1070&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1072&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1074&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1020&quot; id=&quot;1080&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1082&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1084&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1020&quot; id=&quot;1090&quot;&gt;A&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;1095&quot;&gt;infixr&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;1102&quot;&gt;5&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1064&quot; id=&quot;1104&quot;&gt;_â—�_&lt;/a&gt;    &lt;a id=&quot;ExR.scanR&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1111&quot; id=&quot;1111&quot;&gt;scanR&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1117&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1119&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;1121&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1128&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1130&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1132&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1134&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1140&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1142&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1144&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1150&quot;&gt;A&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1111&quot; id=&quot;1154&quot;&gt;scanR&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1160&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1188&quot; id=&quot;1162&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#361&quot; id=&quot;1165&quot;&gt;mempty&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;1176&quot;&gt;where&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1188&quot; id=&quot;1188&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1191&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1193&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;1195&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1202&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1204&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1206&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1208&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1210&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1212&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1218&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1220&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot; id=&quot;1222&quot;&gt;RList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1228&quot;&gt;A&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1188&quot; id=&quot;1236&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1239&quot; id=&quot;1239&quot;&gt;acc&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1045&quot; id=&quot;1243&quot;&gt;RNil&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1248&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1045&quot; id=&quot;1250&quot;&gt;RNil&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1188&quot; id=&quot;1261&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1264&quot; id=&quot;1264&quot;&gt;acc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1268&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1269&quot; id=&quot;1269&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1064&quot; id=&quot;1271&quot;&gt;â—�&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1273&quot; id=&quot;1273&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1275&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1277&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1264&quot; id=&quot;1279&quot;&gt;acc&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1064&quot; id=&quot;1283&quot;&gt;â—�&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1188&quot; id=&quot;1285&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1288&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1264&quot; id=&quot;1289&quot;&gt;acc&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#376&quot; id=&quot;1293&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1269&quot; id=&quot;1296&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1297&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1273&quot; id=&quot;1299&quot;&gt;xs&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;This is a nice functional algorithm that runs in &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; time, and requires &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(1)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(1)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; space. However, consider the equivalent algorithm over left-associative lists:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;1473&quot;&gt;module&lt;/a&gt; &lt;a id=&quot;ExL&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1480&quot; id=&quot;1480&quot;&gt;ExL&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;1484&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;1492&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;ExL.LList&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1497&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1503&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1504&quot; id=&quot;1504&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1506&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1508&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1511&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1513&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1515&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;1519&quot;&gt;where&lt;/a&gt;     &lt;a id=&quot;ExL.LList.LNil&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1529&quot; id=&quot;1529&quot;&gt;LNil&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1534&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1536&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1504&quot; id=&quot;1542&quot;&gt;A&lt;/a&gt;     &lt;a id=&quot;ExL.LList._â–·_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1548&quot; id=&quot;1548&quot;&gt;_â–·_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1552&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1554&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1504&quot; id=&quot;1560&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1562&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1504&quot; id=&quot;1564&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1566&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1568&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1504&quot; id=&quot;1574&quot;&gt;A&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;1579&quot;&gt;infixl&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;1586&quot;&gt;5&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1548&quot; id=&quot;1588&quot;&gt;_â–·_&lt;/a&gt;    &lt;a id=&quot;ExL.scanL&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1595&quot; id=&quot;1595&quot;&gt;scanL&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1601&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1603&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;1605&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1612&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1614&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1616&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1618&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1624&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1626&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1628&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1634&quot;&gt;A&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1595&quot; id=&quot;1638&quot;&gt;scanL&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1644&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#252&quot; id=&quot;1646&quot;&gt;projâ‚�&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1031&quot; id=&quot;1652&quot;&gt;âˆ˜&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1673&quot; id=&quot;1654&quot;&gt;go&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;1661&quot;&gt;where&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1673&quot; id=&quot;1673&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1676&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1678&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;1680&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1687&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1689&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1691&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1693&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1699&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1701&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot; id=&quot;1703&quot;&gt;LList&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1709&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;1711&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;1713&quot;&gt;A&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1673&quot; id=&quot;1721&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1529&quot; id=&quot;1724&quot;&gt;LNil&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1729&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1529&quot; id=&quot;1731&quot;&gt;LNil&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;1736&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#361&quot; id=&quot;1738&quot;&gt;mempty&lt;/a&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1673&quot; id=&quot;1751&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1754&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1755&quot; id=&quot;1755&quot;&gt;xs&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1548&quot; id=&quot;1758&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1760&quot; id=&quot;1760&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;1761&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1763&quot;&gt;=&lt;/a&gt;         &lt;a class=&quot;Keyword&quot; id=&quot;1773&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1777&quot; id=&quot;1777&quot;&gt;xs'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;1781&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1783&quot; id=&quot;1783&quot;&gt;acc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1787&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1673&quot; id=&quot;1789&quot;&gt;go&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1755&quot; id=&quot;1792&quot;&gt;xs&lt;/a&gt;          &lt;a class=&quot;Keyword&quot; id=&quot;1804&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1777&quot; id=&quot;1807&quot;&gt;xs'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1548&quot; id=&quot;1811&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1783&quot; id=&quot;1813&quot;&gt;acc&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;1817&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1760&quot; id=&quot;1819&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#376&quot; id=&quot;1821&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1783&quot; id=&quot;1824&quot;&gt;acc&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;While &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1595&quot;&gt;scanL&lt;/a&gt;&lt;/span&gt; is also &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in its runtime, it is not amenable to tail call optimization, and thus also requires &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;space.&lt;/em&gt; Egads!&lt;/p&gt; &lt;p&gt;You are probably not amazed to learn that different ways of structuring data lead to different runtime and space complexities. But itâ€™s a more interesting puzzle than it sounds; because &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot;&gt;RList&lt;/a&gt;&lt;/span&gt; and &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot;&gt;LList&lt;/a&gt;&lt;/span&gt; are isomorphic! So what gives?&lt;/p&gt; &lt;p&gt;Reedâ€™s pithy description here is&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Computation time doesnâ€™t respect isos&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Exploring that question with him has been very illuminating. Math is deeply about extentionality; two mathematical objects are equivalent if their abstract interfaces are indistinguishable. Computationâ€¦ doesnâ€™t have this property. When computing, we care a great deal about runtime performance, which depends on fiddly implementation details, even if those arenâ€™t externally observable.&lt;/p&gt; &lt;p&gt;In fact, as he goes on to state, this is the whole idea of denotational design. Figure out the extensional behavior first, and then figure out how to implement it.&lt;/p&gt; &lt;p&gt;This all harkens back to my review of another of Elliottâ€™s papers, &lt;a href=&quot;https://reasonablypolymorphic.com/blog/adders-and-arrows&quot;&gt;Adders and Arrows&lt;/a&gt;, which starts from the extensional behavior of natural addition (encoded as the Peano naturals), and then derives a chain of proofs showing that our everyday binary adders preserve this behavior.&lt;/p&gt; &lt;p&gt;Anyway, letâ€™s switch topics and consider a weird fact of the world. Why do so many parallel algorithms require gnarly array indexing? Hereâ€™s an example I found by googling for â€œparallel c algorithms cudaâ€�:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode cpp&quot;&gt;&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;__global__ &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; stencil_1d&lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;in&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;out&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  __shared__ &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; temp&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;BLOCK_SIZE &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; RADIUS&lt;span class=&quot;op&quot;&gt;];&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; gindex &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; threadIdx&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; blockIdx&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; blockDim&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; lindex &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; threadIdx&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; RADIUS&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  temp&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;lindex&lt;span class=&quot;op&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; in&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;gindex&lt;span class=&quot;op&quot;&gt;];&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;threadIdx&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; RADIUS&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    temp&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; RADIUS&lt;span class=&quot;op&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; in&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;gindex &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; RADIUS&lt;span class=&quot;op&quot;&gt;];&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    temp&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; BLOCK_SIZE&lt;span class=&quot;op&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    in&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;gindex &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; BLOCK_SIZE&lt;span class=&quot;op&quot;&gt;];&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  __syncthreads&lt;span class=&quot;op&quot;&gt;();&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; offset &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;RADIUS &lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; offset &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; RADIUS &lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; offset&lt;span class=&quot;op&quot;&gt;++)&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    result &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; temp&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; offset&lt;span class=&quot;op&quot;&gt;];&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  out&lt;span class=&quot;op&quot;&gt;[&lt;/span&gt;gindex&lt;span class=&quot;op&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;and hereâ€™s another, expressed as an â€œeasy inductionâ€� recurrence relation, from &lt;a href=&quot;http://personal.denison.edu/~bressoud/cs402-s11/Supplements/ParallelPrefix.pdf&quot;&gt;Richard E Ladner and Michael J Fischer. Parallel prefix computation&lt;/a&gt;:&lt;/p&gt; &lt;center&gt; &lt;img src=&quot;https://reasonablypolymorphic.com/images/generic-parallel-fp/indices.png&quot; /&gt; &lt;/center&gt; &lt;p&gt;Sweet lord. No wonder weâ€™re all stuck pretending our computer machines are single threaded behemoths from the 1960s. Taking full advantage of parallelism on modern CPUs must require a research team and five years!&lt;/p&gt; &lt;p&gt;But itâ€™s worth taking a moment and thinking about what all of this janky indexing must be doing. Whatever algorithm is telling the programmer which indices to write where necessarily must be providing a view on the data. That is, the programmer has some sort of â€œshapeâ€� in mind for how the problem should be subdivided, and the indexing is an implementation of accessing the raw array elements in the desired shape.&lt;/p&gt; &lt;p&gt;At risk of beating you on the head with it, this array indexing is &lt;em&gt;a bad implementation of a type system.&lt;/em&gt; Bad because itâ€™s something the implementer needed to invent by hand, and is not in any form that the compiler can help ensure the correctness of.&lt;/p&gt; &lt;p&gt;That returns us to the big contribution of &lt;em&gt;Generic Function Parallel Algorithms,&lt;/em&gt; which is a technique for decoupling the main thrust of an algorithm from extentionally-inconsequential encodings of things. The idea is to implement the algorithm on lots of trivial data structures, and then compose those small pieces together to get a &lt;em&gt;class&lt;/em&gt; of algorithms.&lt;/p&gt; &lt;h2 id=&quot;generic-representations&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#generic-representations&quot;&gt;Generic Representations&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;The first step is to determine which trivial data structures we need to support. Following the steps of Haskellâ€™s &lt;code&gt;GHC.Generics&lt;/code&gt; module, we can decompose any Haskell98 data type as compositions of the following pieces:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;5738&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;Rep&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5743&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5747&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;5749&quot;&gt;Setâ‚�&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;5754&quot;&gt;where&lt;/a&gt;   &lt;a id=&quot;Rep.V&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5762&quot; id=&quot;5762&quot;&gt;V&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5764&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5766&quot;&gt;Rep&lt;/a&gt;   &lt;a id=&quot;Rep.U&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5772&quot; id=&quot;5772&quot;&gt;U&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5774&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5776&quot;&gt;Rep&lt;/a&gt;   &lt;a id=&quot;Rep.K&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5782&quot; id=&quot;5782&quot;&gt;K&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5784&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;5786&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5790&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5792&quot;&gt;Rep&lt;/a&gt;   &lt;a id=&quot;Rep.Par&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;5798&quot;&gt;Par&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5802&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5804&quot;&gt;Rep&lt;/a&gt;   &lt;a id=&quot;Rep.Rec&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5810&quot; id=&quot;5810&quot;&gt;Rec&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5814&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5816&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;5817&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5821&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;5823&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5826&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5828&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5830&quot;&gt;Rep&lt;/a&gt;   &lt;a id=&quot;Rep._:+:_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5836&quot; id=&quot;5836&quot;&gt;_:+:_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5842&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5844&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5848&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5850&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5854&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5856&quot;&gt;Rep&lt;/a&gt;   &lt;a id=&quot;Rep._:*:_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5862&quot; id=&quot;5862&quot;&gt;_:*:_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5868&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5870&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5874&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5876&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5880&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5882&quot;&gt;Rep&lt;/a&gt;   &lt;a id=&quot;Rep._:âˆ˜:_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5888&quot; id=&quot;5888&quot;&gt;_:âˆ˜:_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5894&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5896&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5900&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5902&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5906&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;5908&quot;&gt;Rep&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;which we can embed in &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot;&gt;Set&lt;/a&gt;&lt;/span&gt; via &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot;&gt;Represent&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;5981&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;5986&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Empty.html&quot; id=&quot;5993&quot;&gt;Data.Empty&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6004&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6009&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.html&quot; id=&quot;6016&quot;&gt;Data.Sum&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6025&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6030&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Unit.html&quot; id=&quot;6037&quot;&gt;Data.Unit&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6047&quot;&gt;hiding&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6054&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Record Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Unit.Base.html#1023&quot; id=&quot;6055&quot;&gt;_â‰¤_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6058&quot;&gt;)&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;6061&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Compose&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6068&quot; id=&quot;6068&quot;&gt;Compose&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6076&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6077&quot; id=&quot;6077&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6079&quot; id=&quot;6079&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6081&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6083&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6087&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6089&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6092&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6094&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6095&quot; id=&quot;6095&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6097&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6099&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6102&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6104&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6106&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6110&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;6118&quot;&gt;constructor&lt;/a&gt; &lt;a id=&quot;compose&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6130&quot; id=&quot;6130&quot;&gt;compose&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;6140&quot;&gt;field&lt;/a&gt;     &lt;a id=&quot;Compose.composed&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6150&quot; id=&quot;6150&quot;&gt;composed&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6159&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6077&quot; id=&quot;6161&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6163&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6079&quot; id=&quot;6164&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6095&quot; id=&quot;6166&quot;&gt;A&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6167&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6169&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6068&quot; id=&quot;6174&quot;&gt;Compose&lt;/a&gt;  &lt;a id=&quot;Represent&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6183&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6193&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;6195&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6199&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6201&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6205&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6207&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6211&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5762&quot; id=&quot;6221&quot;&gt;V&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6223&quot; id=&quot;6223&quot;&gt;a&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;6233&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Empty.html#526&quot; id=&quot;6235&quot;&gt;âŠ¥&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6237&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5772&quot; id=&quot;6247&quot;&gt;U&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6249&quot; id=&quot;6249&quot;&gt;a&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;6259&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#164&quot; id=&quot;6261&quot;&gt;âŠ¤&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6263&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6273&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5782&quot; id=&quot;6274&quot;&gt;K&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6276&quot; id=&quot;6276&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6277&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6279&quot; id=&quot;6279&quot;&gt;a&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6285&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6276&quot; id=&quot;6287&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6289&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;6299&quot;&gt;Par&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6303&quot; id=&quot;6303&quot;&gt;a&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;6311&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6303&quot; id=&quot;6313&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6315&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6325&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5810&quot; id=&quot;6326&quot;&gt;Rec&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6330&quot; id=&quot;6330&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6331&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6333&quot; id=&quot;6333&quot;&gt;a&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;6337&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6330&quot; id=&quot;6339&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6333&quot; id=&quot;6341&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6343&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6353&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6354&quot; id=&quot;6354&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5836&quot; id=&quot;6356&quot;&gt;:+:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6360&quot; id=&quot;6360&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6361&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6363&quot; id=&quot;6363&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6365&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6367&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6354&quot; id=&quot;6377&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6363&quot; id=&quot;6379&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#734&quot; id=&quot;6381&quot;&gt;âŠ�&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6383&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6360&quot; id=&quot;6393&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6363&quot; id=&quot;6395&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6397&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6407&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6408&quot; id=&quot;6408&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5862&quot; id=&quot;6410&quot;&gt;:*:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6414&quot; id=&quot;6414&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6415&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6417&quot; id=&quot;6417&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6419&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6421&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6408&quot; id=&quot;6431&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6417&quot; id=&quot;6433&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;6435&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6437&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6414&quot; id=&quot;6447&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6417&quot; id=&quot;6449&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6451&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6461&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6462&quot; id=&quot;6462&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5888&quot; id=&quot;6464&quot;&gt;:âˆ˜:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6468&quot; id=&quot;6468&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6469&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6471&quot; id=&quot;6471&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6473&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6068&quot; id=&quot;6475&quot;&gt;Compose&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6483&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6484&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6462&quot; id=&quot;6494&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6495&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6497&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6498&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6468&quot; id=&quot;6508&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6509&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6471&quot; id=&quot;6511&quot;&gt;a&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;If youâ€™ve ever worked with &lt;code&gt;GHC.Generics&lt;/code&gt;, none of this should be very exciting. We can bundle everything together, plus an iso to transform to and from the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot;&gt;Represent&lt;/a&gt;&lt;/span&gt;ed type:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;6707&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Generic&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6714&quot; id=&quot;6714&quot;&gt;Generic&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6722&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6723&quot; id=&quot;6723&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6725&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6727&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6731&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6733&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6736&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6738&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6740&quot;&gt;Setâ‚�&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6745&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;6753&quot;&gt;field&lt;/a&gt;     &lt;a id=&quot;Generic.RepOf&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6763&quot; id=&quot;6763&quot;&gt;RepOf&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6769&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;6771&quot;&gt;Rep&lt;/a&gt;     &lt;a id=&quot;Generic.from&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6779&quot; id=&quot;6779&quot;&gt;from&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;6785&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6723&quot; id=&quot;6787&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;6789&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6791&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6793&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6763&quot; id=&quot;6803&quot;&gt;RepOf&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;6809&quot;&gt;A&lt;/a&gt;     &lt;a id=&quot;Generic.to&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6815&quot; id=&quot;6815&quot;&gt;to&lt;/a&gt;    &lt;a class=&quot;Symbol&quot; id=&quot;6821&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6823&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6763&quot; id=&quot;6833&quot;&gt;RepOf&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;6839&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6841&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6723&quot; id=&quot;6843&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;6845&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6847&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6714&quot; id=&quot;6852&quot;&gt;Generic&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6860&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6862&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6866&quot;&gt;â¦„&lt;/a&gt;  &lt;a id=&quot;GenericRep&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6869&quot; id=&quot;6869&quot;&gt;GenericRep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6880&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6882&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6883&quot; id=&quot;6883&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6885&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6887&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6891&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6893&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6896&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6898&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6900&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6714&quot; id=&quot;6902&quot;&gt;Generic&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6883&quot; id=&quot;6910&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6912&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6914&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6916&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6920&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;6922&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6869&quot; id=&quot;6926&quot;&gt;GenericRep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6937&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6939&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;6941&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6763&quot; id=&quot;6951&quot;&gt;RepOf&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Agda doesnâ€™t have any out-of-the-box notion of &lt;code&gt;-XDeriveGeneric&lt;/code&gt;, which seems like a headache at first blush. It means we need to explicitly write out a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6763&quot;&gt;RepOf&lt;/a&gt;&lt;/span&gt; and &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6779&quot;&gt;from&lt;/a&gt;&lt;/span&gt;/&lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6815&quot;&gt;to&lt;/a&gt;&lt;/span&gt; pairs by hand, &lt;em&gt;like peasants.&lt;/em&gt; Surprisingly however, needing to implement by hand is beneficial, as it reminds us that &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6763&quot;&gt;RepOf&lt;/a&gt;&lt;/span&gt; &lt;em&gt;is not uniquely determined!&lt;/em&gt;&lt;/p&gt; &lt;p&gt;A good metaphor here is the number 16, which stands for some type weâ€™d like to generify. A &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6763&quot;&gt;RepOf&lt;/a&gt;&lt;/span&gt; for 16 is an equivalent representation for 16. Here are a few:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;2+(2+(2+(2+(2+(2+(2+2))))))&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;2+(2+(2+(2+(2+(2+(2+2))))))&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;))))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;((2+2)âˆ—2)+(((2+2)+2)+2)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;((2+2)*2)+(((2+2)+2)+2)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;âˆ—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;2Ã—8&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;2 \times 8&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;8Ã—2&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;8 \times 2&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;(4Ã—2)Ã—2&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;(4 \times 2) \times 2&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;(2Ã—4)Ã—2&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;(2 \times 4) \times 2&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;4Ã—4&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;4 \times 4&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;24&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;2^4&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;222&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;2^{2^2}&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.9869em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.9869em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8913em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And there are lots more! Each of &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;+&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;+&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;Ã—&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;\times&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;Ã—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and exponentiation corresponds to a different way of building a type, so every one of these expressions is a distinct (if isomorphic) type with 16 values. Every single possible factoring of 16 corresponds to a different way of dividing-and-conquering, which is to say, a different (but related) algorithm.&lt;/p&gt; &lt;p&gt;The trick is to define our algorithm inductively over each &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot;&gt;Set&lt;/a&gt;&lt;/span&gt; that can result from &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot;&gt;Represent&lt;/a&gt;&lt;/span&gt;. We can then pick different algorithms from the class by changing the specific way of factoring our type.&lt;/p&gt; &lt;h2 id=&quot;left-scans&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#left-scans&quot;&gt;Left Scans&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Letâ€™s consider the case of left scans. I happen to know itâ€™s going to require &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8411&quot;&gt;Functor&lt;/a&gt;&lt;/span&gt; capabilities, so weâ€™ll also define that:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;8404&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Functor&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8411&quot; id=&quot;8411&quot;&gt;Functor&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8419&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8420&quot; id=&quot;8420&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8422&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8424&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#286&quot; id=&quot;8428&quot;&gt;ğ�“�&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8430&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8432&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#286&quot; id=&quot;8436&quot;&gt;ğ�“�&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8437&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8439&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8441&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8445&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#780&quot; id=&quot;8446&quot;&gt;lsuc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8428&quot; id=&quot;8451&quot;&gt;ğ�“�&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8452&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;8454&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;8462&quot;&gt;field&lt;/a&gt;     &lt;a id=&quot;Functor.fmap&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;8472&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8477&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8479&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8480&quot; id=&quot;8480&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8482&quot; id=&quot;8482&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8484&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8486&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8428&quot; id=&quot;8490&quot;&gt;ğ�“�&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8491&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8493&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8495&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8480&quot; id=&quot;8496&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8498&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8482&quot; id=&quot;8500&quot;&gt;B&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8501&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8503&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8420&quot; id=&quot;8505&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8480&quot; id=&quot;8507&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8509&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8420&quot; id=&quot;8511&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8482&quot; id=&quot;8513&quot;&gt;B&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;8516&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;LScan&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;8523&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8529&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8530&quot; id=&quot;8530&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8532&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8534&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8538&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8540&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8543&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8545&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8547&quot;&gt;Setâ‚�&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;8552&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;8560&quot;&gt;field&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;8570&quot;&gt;overlap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8578&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a id=&quot;LScan.func&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;8580&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8585&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8587&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8411&quot; id=&quot;8589&quot;&gt;Functor&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8530&quot; id=&quot;8597&quot;&gt;F&lt;/a&gt;     &lt;a id=&quot;LScan.lscan&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;8603&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8609&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8611&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;8613&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;8620&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8622&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8624&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8530&quot; id=&quot;8626&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;8628&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8630&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8530&quot; id=&quot;8632&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;8634&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;8636&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;8638&quot;&gt;A&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;8641&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8411&quot; id=&quot;8646&quot;&gt;Functor&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8654&quot;&gt;â¦ƒ&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;8657&quot;&gt;...&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;8662&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;8664&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;8669&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8675&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8677&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8681&quot;&gt;â¦„&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Whatâ€™s with the type of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot;&gt;lscan&lt;/a&gt;&lt;/span&gt;? This thing is an exclusive scan, so the first element is always &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#361&quot;&gt;mempty&lt;/a&gt;&lt;/span&gt;, and thus the last elemenet is always returned as &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#264&quot;&gt;projâ‚‚&lt;/a&gt;&lt;/span&gt; of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot;&gt;lscan&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;We need to implement &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot;&gt;LScan&lt;/a&gt;&lt;/span&gt; for each &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot;&gt;Represent&lt;/a&gt;&lt;/span&gt;ation, and because there is no global coherence requirement in Agda, we can define our &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8411&quot;&gt;Functor&lt;/a&gt;&lt;/span&gt; instances at the same time.&lt;/p&gt; &lt;p&gt;The simplest case is void which we can scan because we have a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Empty.html#526&quot;&gt;âŠ¥&lt;/a&gt;&lt;/span&gt; in negative position:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;9189&quot;&gt;instance&lt;/a&gt;   &lt;a id=&quot;lV&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9200&quot; id=&quot;9200&quot;&gt;lV&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9203&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;9205&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9211&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9213&quot; id=&quot;9213&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9215&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Empty.html#526&quot; id=&quot;9217&quot;&gt;âŠ¥&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9218&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9200&quot; id=&quot;9222&quot;&gt;lV&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9225&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;9226&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9231&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;9232&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9237&quot; id=&quot;9237&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9239&quot; id=&quot;9239&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9241&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Empty.html#628&quot; id=&quot;9243&quot;&gt;âŠ¥-elim&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9239&quot; id=&quot;9250&quot;&gt;x&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9200&quot; id=&quot;9254&quot;&gt;lV&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9257&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;9258&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9264&quot;&gt;()&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;&lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#164&quot;&gt;âŠ¤&lt;/a&gt;&lt;/span&gt; is also trivial. Notice that there isnâ€™t any &lt;code&gt;a&lt;/code&gt; inside of it, so our final accumulated value must be &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#361&quot;&gt;mempty&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;lU&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9409&quot; id=&quot;9409&quot;&gt;lU&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9412&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;9414&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9420&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9422&quot; id=&quot;9422&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9424&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#164&quot; id=&quot;9426&quot;&gt;âŠ¤&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9427&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9409&quot; id=&quot;9431&quot;&gt;lU&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9434&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;9435&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9440&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;9441&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9446&quot; id=&quot;9446&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9448&quot; id=&quot;9448&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9450&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9448&quot; id=&quot;9452&quot;&gt;x&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9409&quot; id=&quot;9456&quot;&gt;lU&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9459&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;9460&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9466&quot; id=&quot;9466&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9468&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9466&quot; id=&quot;9470&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;9472&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#361&quot; id=&quot;9474&quot;&gt;mempty&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The identity functor is also trivial. Except this time, we &lt;em&gt;do&lt;/em&gt; have a result, so it becomes the accumulated value, and we replace it with how much weâ€™ve scaned thus far (nothing):&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;lP&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9674&quot; id=&quot;9674&quot;&gt;lP&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9677&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;9679&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9685&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9687&quot; id=&quot;9687&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9689&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9687&quot; id=&quot;9691&quot;&gt;a&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9692&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9674&quot; id=&quot;9696&quot;&gt;lP&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9699&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;9700&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9705&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;9706&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9711&quot; id=&quot;9711&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9713&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9711&quot; id=&quot;9715&quot;&gt;f&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9674&quot; id=&quot;9719&quot;&gt;lP&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9722&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;9723&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9729&quot; id=&quot;9729&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9731&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#361&quot; id=&quot;9733&quot;&gt;mempty&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;9740&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9729&quot; id=&quot;9742&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Coproducts are uninteresting; we merely lift the tag:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;l+&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9810&quot; id=&quot;9810&quot;&gt;l+&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9813&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9815&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;9817&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;9823&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9825&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9827&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9829&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;9831&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#268&quot; id=&quot;9837&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9839&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9841&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;9843&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9849&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9851&quot; id=&quot;9851&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9853&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;9855&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9851&quot; id=&quot;9857&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#734&quot; id=&quot;9859&quot;&gt;âŠ�&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#268&quot; id=&quot;9861&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9851&quot; id=&quot;9863&quot;&gt;a&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9864&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9810&quot; id=&quot;9868&quot;&gt;l+&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9871&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;9872&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9877&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;9878&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9883&quot; id=&quot;9883&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9885&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;9886&quot;&gt;injâ‚�&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9891&quot; id=&quot;9891&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9892&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9894&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;9896&quot;&gt;injâ‚�&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9901&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;9902&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9883&quot; id=&quot;9907&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9891&quot; id=&quot;9909&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9910&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9810&quot; id=&quot;9914&quot;&gt;l+&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9917&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;9918&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9923&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;9924&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9929&quot; id=&quot;9929&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9931&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;9932&quot;&gt;injâ‚‚&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9937&quot; id=&quot;9937&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9938&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9940&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;9942&quot;&gt;injâ‚‚&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9947&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;9948&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9929&quot; id=&quot;9953&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9937&quot; id=&quot;9955&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9956&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9810&quot; id=&quot;9960&quot;&gt;l+&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9963&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;9964&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9970&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;9971&quot;&gt;injâ‚�&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9976&quot; id=&quot;9976&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9977&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9979&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;9985&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9989&quot; id=&quot;9989&quot;&gt;x'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;9992&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9994&quot; id=&quot;9994&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9996&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;9998&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9976&quot; id=&quot;10004&quot;&gt;x&lt;/a&gt;      &lt;a class=&quot;Keyword&quot; id=&quot;10011&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#784&quot; id=&quot;10014&quot;&gt;injâ‚�&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9989&quot; id=&quot;10019&quot;&gt;x'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10022&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9994&quot; id=&quot;10024&quot;&gt;y&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#9810&quot; id=&quot;10028&quot;&gt;l+&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10031&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;10032&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10038&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;10039&quot;&gt;injâ‚‚&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10044&quot; id=&quot;10044&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10045&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10047&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;10053&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10057&quot; id=&quot;10057&quot;&gt;x'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10060&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10062&quot; id=&quot;10062&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10064&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;10066&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10044&quot; id=&quot;10072&quot;&gt;x&lt;/a&gt;      &lt;a class=&quot;Keyword&quot; id=&quot;10079&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Sum.Base.html#809&quot; id=&quot;10082&quot;&gt;injâ‚‚&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10057&quot; id=&quot;10087&quot;&gt;x'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10090&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10062&quot; id=&quot;10092&quot;&gt;y&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;And then we come to the interesting cases. To scan the product of &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt;, we notice that every left scan of &lt;code&gt;F&lt;/code&gt; is a prefix of &lt;code&gt;F Ã— G&lt;/code&gt; (because &lt;code&gt;F&lt;/code&gt; is on the left.) Thus, we can use &lt;code&gt;lscan F&lt;/code&gt; directly in the result, and need only adjust the results of &lt;code&gt;lscan G&lt;/code&gt; with the accumulated value from &lt;code&gt;F&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;l*&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10410&quot; id=&quot;10410&quot;&gt;l*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10413&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10415&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;10417&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;10423&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10425&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10427&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10429&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;10431&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#268&quot; id=&quot;10437&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10439&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10441&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;10443&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10449&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10451&quot; id=&quot;10451&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10453&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;10455&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10451&quot; id=&quot;10457&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;10459&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#268&quot; id=&quot;10461&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10451&quot; id=&quot;10463&quot;&gt;a&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10464&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10410&quot; id=&quot;10468&quot;&gt;l*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10471&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;10472&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10477&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;10478&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10483&quot; id=&quot;10483&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10485&quot; id=&quot;10485&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10487&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#252&quot; id=&quot;10488&quot;&gt;projâ‚�&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10494&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;10496&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10483&quot; id=&quot;10501&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10503&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10485&quot; id=&quot;10504&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10506&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#252&quot; id=&quot;10507&quot;&gt;projâ‚�&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10512&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10410&quot; id=&quot;10516&quot;&gt;l*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10519&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;10520&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10525&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;10526&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10531&quot; id=&quot;10531&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10533&quot; id=&quot;10533&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10535&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#264&quot; id=&quot;10536&quot;&gt;projâ‚‚&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10542&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;10544&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10531&quot; id=&quot;10549&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10551&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10533&quot; id=&quot;10552&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10554&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#264&quot; id=&quot;10555&quot;&gt;projâ‚‚&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10560&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10410&quot; id=&quot;10564&quot;&gt;l*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10567&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;10568&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10574&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10575&quot; id=&quot;10575&quot;&gt;f-in&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10580&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10582&quot; id=&quot;10582&quot;&gt;g-in&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10586&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10588&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;10594&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10598&quot; id=&quot;10598&quot;&gt;f-out&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10604&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10606&quot; id=&quot;10606&quot;&gt;f-acc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10612&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;10614&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10575&quot; id=&quot;10620&quot;&gt;f-in&lt;/a&gt;         &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10633&quot; id=&quot;10633&quot;&gt;g-out&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10639&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10641&quot; id=&quot;10641&quot;&gt;g-acc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10647&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;10649&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10582&quot; id=&quot;10655&quot;&gt;g-in&lt;/a&gt;      &lt;a class=&quot;Keyword&quot; id=&quot;10665&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10668&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10598&quot; id=&quot;10669&quot;&gt;f-out&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10675&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;10677&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10682&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10606&quot; id=&quot;10683&quot;&gt;f-acc&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#376&quot; id=&quot;10689&quot;&gt;&amp;lt;&amp;gt;_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10692&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10633&quot; id=&quot;10694&quot;&gt;g-out&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10699&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;10701&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10606&quot; id=&quot;10703&quot;&gt;f-acc&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#376&quot; id=&quot;10709&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10641&quot; id=&quot;10712&quot;&gt;g-acc&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;&lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#10410&quot;&gt;l*&lt;/a&gt;&lt;/span&gt; is what makes the whole algorithm parallel. It says we can scan &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; in parallel, and need only a single join node at the end to stick &lt;code&gt;f-acc &amp;lt;&amp;gt;_&lt;/code&gt; on at the end. This parallelism is visible in the &lt;code&gt;let&lt;/code&gt; expression, where there is no data dependency between the two bindings.&lt;/p&gt; &lt;p&gt;Our final generic instance of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot;&gt;LScan&lt;/a&gt;&lt;/span&gt; is over composition. Howevef, we canâ€™t implement &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot;&gt;LScan&lt;/a&gt;&lt;/span&gt; for every composition of functors, since we require the ability to â€œzipâ€� two functors together. The paper is pretty cagey about exactly what &lt;code&gt;Zip&lt;/code&gt; is, but after some sleuthing, I think itâ€™s this:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;11328&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Zip&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11335&quot; id=&quot;11335&quot;&gt;Zip&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11339&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11340&quot; id=&quot;11340&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11342&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;11344&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11348&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;11350&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11353&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11355&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;11357&quot;&gt;Setâ‚�&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;11362&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;11370&quot;&gt;field&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;11380&quot;&gt;overlap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11388&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a id=&quot;Zip.func&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11390&quot; id=&quot;11390&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11395&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11397&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8411&quot; id=&quot;11399&quot;&gt;Functor&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11340&quot; id=&quot;11407&quot;&gt;F&lt;/a&gt;     &lt;a id=&quot;Zip.zip&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11413&quot; id=&quot;11413&quot;&gt;zip&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11417&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11419&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11420&quot; id=&quot;11420&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11422&quot; id=&quot;11422&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11424&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;11426&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11429&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11431&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11340&quot; id=&quot;11433&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11420&quot; id=&quot;11435&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11437&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11340&quot; id=&quot;11439&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11422&quot; id=&quot;11441&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11443&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11340&quot; id=&quot;11445&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11447&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11420&quot; id=&quot;11448&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;11450&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11422&quot; id=&quot;11452&quot;&gt;B&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11453&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;11455&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11335&quot; id=&quot;11460&quot;&gt;Zip&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11464&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11466&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11470&quot;&gt;â¦„&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;That looks a lot like being an applicative, but itâ€™s missing &lt;code&gt;pure&lt;/code&gt; and has some weird idempotent laws that are not particularly relevant today. We can define some helper functions as well:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;zipWith&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11674&quot; id=&quot;11674&quot;&gt;zipWith&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11682&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11684&quot;&gt;âˆ€&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11686&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11687&quot; id=&quot;11687&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11689&quot; id=&quot;11689&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11691&quot; id=&quot;11691&quot;&gt;C&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11692&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11694&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11696&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11335&quot; id=&quot;11698&quot;&gt;Zip&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11702&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11704&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11706&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11708&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11687&quot; id=&quot;11709&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11711&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11689&quot; id=&quot;11713&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11715&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11691&quot; id=&quot;11717&quot;&gt;C&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11718&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11720&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11722&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11687&quot; id=&quot;11724&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11726&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11728&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11689&quot; id=&quot;11730&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11732&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11734&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11691&quot; id=&quot;11736&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11674&quot; id=&quot;11738&quot;&gt;zipWith&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11746&quot; id=&quot;11746&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11748&quot; id=&quot;11748&quot;&gt;fa&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11751&quot; id=&quot;11751&quot;&gt;fb&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11754&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;11756&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11761&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#3422&quot; id=&quot;11762&quot;&gt;uncurry&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11746&quot; id=&quot;11770&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11771&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11773&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11413&quot; id=&quot;11774&quot;&gt;zip&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11748&quot; id=&quot;11778&quot;&gt;fa&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11751&quot; id=&quot;11781&quot;&gt;fb&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11783&quot;&gt;)&lt;/a&gt;  &lt;a id=&quot;unzip&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11786&quot; id=&quot;11786&quot;&gt;unzip&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11792&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11794&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8411&quot; id=&quot;11796&quot;&gt;Functor&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11804&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11806&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11808&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11810&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11811&quot; id=&quot;11811&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11813&quot; id=&quot;11813&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11815&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;11817&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11820&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11822&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11824&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11826&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11811&quot; id=&quot;11827&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;11829&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11813&quot; id=&quot;11831&quot;&gt;B&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11832&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11834&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11836&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11811&quot; id=&quot;11838&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;11840&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;11842&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11813&quot; id=&quot;11844&quot;&gt;B&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11786&quot; id=&quot;11846&quot;&gt;unzip&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11852&quot; id=&quot;11852&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11854&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;11856&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#252&quot; id=&quot;11861&quot;&gt;projâ‚�&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11852&quot; id=&quot;11867&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;11869&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;11871&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#264&quot; id=&quot;11876&quot;&gt;projâ‚‚&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11852&quot; id=&quot;11882&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Armed with all of this, we can give an implementation of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot;&gt;lscan&lt;/a&gt;&lt;/span&gt; over functor composition. The idea is to &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot;&gt;lscan&lt;/a&gt;&lt;/span&gt; each inner functor, which gives us an &lt;code&gt;G (F A Ã— A)&lt;/code&gt;. We can then &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11786&quot;&gt;unzip&lt;/a&gt;&lt;/span&gt; that, whose second projection is then the totals of each inner scan. If we scan these &lt;em&gt;totals&lt;/em&gt;, weâ€™ll get a running scan for the whole thing; and all thatâ€™s left is to adjust each.&lt;/p&gt;  &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;12442&quot;&gt;instance&lt;/a&gt;   &lt;a id=&quot;lâˆ˜&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12453&quot; id=&quot;12453&quot;&gt;lâˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12456&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12458&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;12460&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;12466&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12468&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12470&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12472&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;12474&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#268&quot; id=&quot;12480&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12482&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12484&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12486&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11335&quot; id=&quot;12488&quot;&gt;Zip&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#268&quot; id=&quot;12492&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12494&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12496&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;12498&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12504&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6068&quot; id=&quot;12505&quot;&gt;Compose&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#268&quot; id=&quot;12513&quot;&gt;G&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#266&quot; id=&quot;12515&quot;&gt;F&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12516&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12453&quot; id=&quot;12520&quot;&gt;lâˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12523&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8580&quot; id=&quot;12524&quot;&gt;func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12529&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;12530&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12535&quot; id=&quot;12535&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12537&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;12539&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12535&quot; id=&quot;12544&quot;&gt;f&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12453&quot; id=&quot;12548&quot;&gt;lâˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12551&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;12552&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12558&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6130&quot; id=&quot;12559&quot;&gt;compose&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12567&quot; id=&quot;12567&quot;&gt;gfa&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12570&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12572&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;12578&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12582&quot; id=&quot;12582&quot;&gt;gfa'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;12587&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12589&quot; id=&quot;12589&quot;&gt;tots&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12594&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11786&quot; id=&quot;12596&quot;&gt;unzip&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12602&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;12603&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;12608&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12567&quot; id=&quot;12614&quot;&gt;gfa&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12617&quot;&gt;)&lt;/a&gt;         &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12627&quot; id=&quot;12627&quot;&gt;tots'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;12633&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12635&quot; id=&quot;12635&quot;&gt;tot&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12639&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;12641&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12589&quot; id=&quot;12647&quot;&gt;tots&lt;/a&gt;         &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12660&quot; id=&quot;12660&quot;&gt;adjustl&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12668&quot; id=&quot;12668&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12670&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8472&quot; id=&quot;12672&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12677&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12668&quot; id=&quot;12678&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#376&quot; id=&quot;12680&quot;&gt;&amp;lt;&amp;gt;_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12683&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;12689&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6130&quot; id=&quot;12692&quot;&gt;compose&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12700&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#11674&quot; id=&quot;12701&quot;&gt;zipWith&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12660&quot; id=&quot;12709&quot;&gt;adjustl&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12627&quot; id=&quot;12717&quot;&gt;tots'&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12582&quot; id=&quot;12723&quot;&gt;gfa'&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12727&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;12729&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#12635&quot; id=&quot;12731&quot;&gt;tot&lt;/a&gt; &lt;/pre&gt;  &lt;p&gt;And weâ€™re done! We now have an algorithm defined piece-wise over the fundamental ADT building blocks. Letâ€™s put it to use.&lt;/p&gt; &lt;h2 id=&quot;dividing-and-conquering&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#dividing-and-conquering&quot;&gt;Dividing and Conquering&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Letâ€™s pretend that &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot;&gt;Vec&lt;/a&gt;&lt;/span&gt;s are random access arrays. Weâ€™d like to be able to build array algorithms out of our algorithmic building blocks. To that end, we can make a typeclass corresponding to types that are isomorphic to arrays:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;13548&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;13553&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.html&quot; id=&quot;13560&quot;&gt;Data.Nat&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;13569&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;13574&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.html&quot; id=&quot;13581&quot;&gt;Data.Vec&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;13590&quot;&gt;hiding&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13597&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3897&quot; id=&quot;13598&quot;&gt;zip&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13601&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3964&quot; id=&quot;13603&quot;&gt;unzip&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13608&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3418&quot; id=&quot;13610&quot;&gt;zipWith&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13617&quot;&gt;)&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;13620&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;ArrayIso&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13627&quot; id=&quot;13627&quot;&gt;ArrayIso&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13636&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13637&quot; id=&quot;13637&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13639&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13641&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13645&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13647&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13650&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13652&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13654&quot;&gt;Setâ‚�&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;13659&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;13667&quot;&gt;field&lt;/a&gt;     &lt;a id=&quot;ArrayIso.Size&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13677&quot; id=&quot;13677&quot;&gt;Size&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13682&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13684&quot;&gt;â„•&lt;/a&gt;     &lt;a id=&quot;ArrayIso.deserialize&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13690&quot; id=&quot;13690&quot;&gt;deserialize&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13702&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;13704&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;13708&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13677&quot; id=&quot;13710&quot;&gt;Size&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13715&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13637&quot; id=&quot;13717&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;13719&quot;&gt;A&lt;/a&gt;     &lt;a id=&quot;ArrayIso.serialize&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13725&quot; id=&quot;13725&quot;&gt;serialize&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13735&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13637&quot; id=&quot;13737&quot;&gt;F&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;13739&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13741&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;13743&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;13747&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13677&quot; id=&quot;13749&quot;&gt;Size&lt;/a&gt;     &lt;a class=&quot;Comment&quot; id=&quot;13758&quot;&gt;-- also prove it's an iso&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;13785&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13627&quot; id=&quot;13790&quot;&gt;ArrayIso&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13799&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13801&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13805&quot;&gt;â¦„&lt;/a&gt; &lt;/pre&gt;  &lt;p&gt;There are instances of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13627&quot;&gt;ArrayIso&lt;/a&gt;&lt;/span&gt; for the functor building blocks (though none for &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5836&quot;&gt;:+:&lt;/a&gt;&lt;/span&gt; since arrays are big records.) We can now use an &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13627&quot;&gt;ArrayIso&lt;/a&gt;&lt;/span&gt; and an &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot;&gt;LScan&lt;/a&gt;&lt;/span&gt; to get our desired parallel array algorithms:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;genericScan&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15033&quot; id=&quot;15033&quot;&gt;genericScan&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;15049&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15051&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;15053&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15060&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15062&quot;&gt;â¦„&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;15068&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15070&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15071&quot; id=&quot;15071&quot;&gt;rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15075&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;15077&quot;&gt;Rep&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15080&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;15086&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15088&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15090&quot; id=&quot;15090&quot;&gt;d&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15092&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13627&quot; id=&quot;15094&quot;&gt;ArrayIso&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15103&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;15104&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15071&quot; id=&quot;15114&quot;&gt;rep&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15117&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15119&quot;&gt;â¦„&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;15125&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15127&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot; id=&quot;15129&quot;&gt;LScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15135&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot; id=&quot;15136&quot;&gt;Represent&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15071&quot; id=&quot;15146&quot;&gt;rep&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15149&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15151&quot;&gt;â¦„&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;15157&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;15159&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15163&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15165&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13677&quot; id=&quot;15166&quot;&gt;Size&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15171&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15090&quot; id=&quot;15173&quot;&gt;d&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15175&quot;&gt;â¦„)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;15182&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;15184&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15188&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15190&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13677&quot; id=&quot;15191&quot;&gt;Size&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15196&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15090&quot; id=&quot;15198&quot;&gt;d&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15200&quot;&gt;â¦„)&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;15203&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15205&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15033&quot; id=&quot;15207&quot;&gt;genericScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15219&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15221&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Argument&quot; id=&quot;15223&quot;&gt;d&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15225&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15227&quot; id=&quot;15227&quot;&gt;d&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15229&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15231&quot; id=&quot;15231&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15233&quot;&gt;=&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;15237&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15241&quot; id=&quot;15241&quot;&gt;res&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;15245&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15247&quot; id=&quot;15247&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15249&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8603&quot; id=&quot;15251&quot;&gt;lscan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15257&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13690&quot; id=&quot;15258&quot;&gt;deserialize&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15231&quot; id=&quot;15270&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15271&quot;&gt;)&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;15276&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13725&quot; id=&quot;15279&quot;&gt;serialize&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15289&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15227&quot; id=&quot;15291&quot;&gt;d&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15293&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15241&quot; id=&quot;15295&quot;&gt;res&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Sigma.html#236&quot; id=&quot;15299&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15247&quot; id=&quot;15301&quot;&gt;a&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;I think this is the first truly dependent type Iâ€™ve ever written. We take a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot;&gt;Rep&lt;/a&gt;&lt;/span&gt; corresponding to how weâ€™d like to divvy up the problem, and then see if the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#6183&quot;&gt;Represent&lt;/a&gt;&lt;/span&gt; of that has &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13627&quot;&gt;ArrayIso&lt;/a&gt;&lt;/span&gt; and &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#8523&quot;&gt;LScan&lt;/a&gt;&lt;/span&gt; instances, and then give back an algorithm that scans over arrays of the correct &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#13677&quot;&gt;Size&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Finally weâ€™re ready to try this out. We can give the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1013&quot;&gt;RList&lt;/a&gt;&lt;/span&gt; implementation from earlier:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;â–·_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;15740&quot;&gt;â–·_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15743&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;15745&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15749&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;15751&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;15755&quot;&gt;â–·_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15758&quot; id=&quot;15758&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15760&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;15762&quot;&gt;Par&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5862&quot; id=&quot;15766&quot;&gt;:*:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15758&quot; id=&quot;15770&quot;&gt;a&lt;/a&gt;  &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15773&quot; id=&quot;15773&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15775&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15777&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;15779&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15786&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15788&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15790&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;15792&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15796&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;15798&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15800&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;15802&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15806&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;15808&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;15810&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15812&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15814&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15816&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15033&quot; id=&quot;15818&quot;&gt;genericScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15830&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;15831&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;15833&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;15835&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;15837&quot;&gt;Par&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15840&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;or the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#1497&quot;&gt;LList&lt;/a&gt;&lt;/span&gt; instance:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;_â—�&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;15884&quot;&gt;_â—�&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15887&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;15889&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15893&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot; id=&quot;15895&quot;&gt;Rep&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;15899&quot;&gt;_â—�&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15902&quot; id=&quot;15902&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15904&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15902&quot; id=&quot;15906&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5862&quot; id=&quot;15908&quot;&gt;:*:&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;15912&quot;&gt;Par&lt;/a&gt;  &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15917&quot; id=&quot;15917&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15919&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15921&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;15923&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15930&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15932&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15934&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;15936&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15940&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;15942&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15944&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;15946&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15950&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;15952&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;15954&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;15956&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15958&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15960&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15033&quot; id=&quot;15962&quot;&gt;genericScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15974&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;15975&quot;&gt;Par&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;15979&quot;&gt;â—�&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;15981&quot;&gt;â—�&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;15983&quot;&gt;â—�&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15984&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;But we can also come up with more interesting strategies as well. For example, we can divvy up the problem by left-associating the first half, and right-associating the second:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16173&quot; id=&quot;16173&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16175&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16177&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;16179&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16186&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16188&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16190&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;16192&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16196&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16198&quot;&gt;8&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16200&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;16202&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16206&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16208&quot;&gt;8&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;16210&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16212&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16214&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16216&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15033&quot; id=&quot;16218&quot;&gt;genericScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16230&quot;&gt;((&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;16232&quot;&gt;Par&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;16236&quot;&gt;â—�&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;16238&quot;&gt;â—�&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15884&quot; id=&quot;16240&quot;&gt;â—�&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16241&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5862&quot; id=&quot;16243&quot;&gt;:*:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16247&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;16248&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;16250&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15740&quot; id=&quot;16252&quot;&gt;â–·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;16254&quot;&gt;Par&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16257&quot;&gt;))&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;This one probably isnâ€™t an &lt;em&gt;efficient&lt;/em&gt; algorithm, but itâ€™s cool that we can express such a thing so succinctly. Probably of more interest is a balanced tree over our array:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16443&quot; id=&quot;16443&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16445&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16447&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;16449&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16456&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16458&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16460&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;16462&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16466&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16468&quot;&gt;16&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16471&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;16473&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16477&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16479&quot;&gt;16&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;16482&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16484&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16486&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16488&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16490&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16494&quot;&gt;âŒŠ_âŒ‹&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16498&quot; id=&quot;16498&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16500&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16498&quot; id=&quot;16502&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5862&quot; id=&quot;16504&quot;&gt;:*:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16498&quot; id=&quot;16508&quot;&gt;a&lt;/a&gt;      &lt;a class=&quot;Keyword&quot; id=&quot;16515&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15033&quot; id=&quot;16518&quot;&gt;genericScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16530&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16531&quot;&gt;âŒŠ&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16533&quot;&gt;âŒŠ&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16535&quot;&gt;âŒŠ&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16537&quot;&gt;âŒŠ&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;16539&quot;&gt;Par&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16543&quot;&gt;âŒ‹&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16545&quot;&gt;âŒ‹&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16547&quot;&gt;âŒ‹&lt;/a&gt; &lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot; id=&quot;16549&quot;&gt;âŒ‹&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16550&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The balanced tree over products is interesting, but what if we make a balanced tree over &lt;em&gt;composition?&lt;/em&gt; In essence, we can split the problem into chunks of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;2(2n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;2^(2^n)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.888em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mopen mtight&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.6644em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; amounts of work via &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16796&quot;&gt;Bush&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16763&quot;&gt;{-#&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16767&quot;&gt;NO_POSITIVITY_CHECK&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16787&quot;&gt;#-}&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16791&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;Bush&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16796&quot; id=&quot;16796&quot;&gt;Bush&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16801&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;16803&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16805&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;16807&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16811&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;16813&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16817&quot;&gt;where&lt;/a&gt;   &lt;a id=&quot;Bush.twig&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16825&quot; id=&quot;16825&quot;&gt;twig&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16830&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16832&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;16834&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16836&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16838&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16796&quot; id=&quot;16840&quot;&gt;Bush&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16845&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16847&quot;&gt;A&lt;/a&gt;   &lt;a id=&quot;Bush.bush&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16851&quot; id=&quot;16851&quot;&gt;bush&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16856&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16858&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16859&quot; id=&quot;16859&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16861&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;16863&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16864&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16866&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16796&quot; id=&quot;16868&quot;&gt;Bush&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16859&quot; id=&quot;16873&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16875&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16796&quot; id=&quot;16876&quot;&gt;Bush&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16859&quot; id=&quot;16881&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16883&quot;&gt;A&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16884&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16886&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16796&quot; id=&quot;16888&quot;&gt;Bush&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16893&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;16894&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16859&quot; id=&quot;16898&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16899&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16901&quot;&gt;A&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Which we wonâ€™t use directly, but can use itâ€™s &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5743&quot;&gt;Rep&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16973&quot; id=&quot;16973&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16975&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16977&quot;&gt;â¦ƒ&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#304&quot; id=&quot;16979&quot;&gt;Monoid&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16986&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16988&quot;&gt;â¦„&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16990&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;16992&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;16996&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16998&quot;&gt;16&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17001&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;17003&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;17007&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;17009&quot;&gt;16&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Product.html#1167&quot; id=&quot;17012&quot;&gt;Ã—&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#254&quot; id=&quot;17014&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17016&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17018&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;17020&quot;&gt;let&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#17024&quot; id=&quot;17024&quot;&gt;pair&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17029&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;17031&quot;&gt;Par&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5862&quot; id=&quot;17035&quot;&gt;:*:&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5798&quot; id=&quot;17039&quot;&gt;Par&lt;/a&gt;      &lt;a class=&quot;Keyword&quot; id=&quot;17048&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#15033&quot; id=&quot;17051&quot;&gt;genericScan&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17063&quot;&gt;((&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#17024&quot; id=&quot;17065&quot;&gt;pair&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5888&quot; id=&quot;17070&quot;&gt;:âˆ˜:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#17024&quot; id=&quot;17074&quot;&gt;pair&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;17078&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5888&quot; id=&quot;17080&quot;&gt;:âˆ˜:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17084&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#17024&quot; id=&quot;17085&quot;&gt;pair&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#5888&quot; id=&quot;17090&quot;&gt;:âˆ˜:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#17024&quot; id=&quot;17094&quot;&gt;pair&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;17098&quot;&gt;))&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The paper compares several of these strategies for dividing-and-conquering. In particular, it shows that we can minimize total work via a left-associated &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot;&gt;âŒŠ_âŒ‹&lt;/a&gt;&lt;/span&gt; strategy, but maximize parallelism with a &lt;em&gt;right&lt;/em&gt;-associated &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16494&quot;&gt;âŒŠ_âŒ‹&lt;/a&gt;&lt;/span&gt;. And using the &lt;code&gt;Bush&lt;/code&gt; from earlier, we can get a nice middle ground.&lt;/p&gt; &lt;h2 id=&quot;very-quick-ffts&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#very-quick-ffts&quot;&gt;Very Quick FFTs&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;The paper follows up, applying this approach to implementations of the fast fourier transform. There, the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html#16796&quot;&gt;Bush&lt;/a&gt;&lt;/span&gt; approach gives constant factor improvments for both &lt;em&gt;work&lt;/em&gt; and &lt;em&gt;parallelism,&lt;/em&gt; compared to all previously known algorithms.&lt;/p&gt; &lt;p&gt;Results like these are strong evidence that Elliott is &lt;em&gt;actually onto something&lt;/em&gt; with his seemingly crazy ideas that computation should be elegant and well principled. Giving significant constant factor improvements to well-known, extremely important algorithms &lt;em&gt;mostly for free&lt;/em&gt; is a true superpower, and is worth taking extremely seriously.&lt;/p&gt; &lt;h2 id=&quot;fighting-against-publication-bias&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#fighting-against-publication-bias&quot;&gt;Fighting Against Publication Bias&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Andrew McKnight and I tried to use this same approach to get a nice algorithm for sorting, hoping that we could get well-known sorting algorithms to fall out as special cases of our more general functor building blocks. We completely failed on this front, namely because we couldnâ€™t figure out how to give an instance for product types. Rather alarmingly, weâ€™re not entirely sure &lt;em&gt;why&lt;/em&gt; the approach failed there; maybe it was just not thinking hard enough.&lt;/p&gt; &lt;p&gt;Another plausible idea is that sorting requires branching, and that this approach only works for statically-known codepaths.&lt;/p&gt; &lt;h2 id=&quot;future-work&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#future-work&quot;&gt;Future Work&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Andrew and I spent a good chunk of the week thinking about this problem, and we figure there are solid odds that you could &lt;em&gt;automatically&lt;/em&gt; discover these generic algorithmic building blocks from a well-known algorithm. Hereâ€™s the sketch:&lt;/p&gt; &lt;p&gt;Use the well-known algorithm as a specification, instantiate all parameters at small types and see if you can find instances of the algorithm for the functor building blocks that agree with the spec. It seems like you should be able to use factorization of the input to target which instances youâ€™re looking for.&lt;/p&gt; &lt;p&gt;Of course, once you have the algorithmic building blocks, conventional search techniques can be used to optimize any particular goal you might have.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-12T00:00:00Z",
"URL":" https://reasonablypolymorphic.com/blog/generic-parallel-fp/index.html "
}
,
{
"title":"Tweag I/O: First release of Nickel",
"textBody":"&lt;p&gt;I am excited to announce the first release of &lt;a href=&quot;https://github.com/tweag/nickel/&quot;&gt;Nickel&lt;/a&gt;! In the original introductory &lt;a href=&quot;https://www.tweag.io/blog/2020-10-22-nickel-open-sourcing/&quot;&gt;blog post&lt;/a&gt;, I’ve written about why we, at Tweag, are developing yet another configuration language. Our goal is to empower people to write correct, programmable and maintainable configurations. Nickel targets Nix, Infrastructure-as-Code, build systems, and more. We think such a tool would greatly help taming the growing complexity of configuring systems.&lt;/p&gt; &lt;p&gt;Since the first blog post, we have made progress. We backed up and changed our mind sometimes. We had a lot of discussions, and we also experimented quite a bit. There is still a lot to do and there are many imperfect aspects of the language to improve.&lt;/p&gt; &lt;p&gt;Still, I think we have reached a point where Nickel is consistent enough for people to try it more seriously. That way we can get our target users involved and not lose sight of their actual issues and wishes.&lt;/p&gt; &lt;p&gt;Beware: this is a &lt;code class=&quot;language-text&quot;&gt;0.1&lt;/code&gt; release. We are making no backward-compatibility guarantees at this time, because we don’t want to tie our hands too early and get stuck with retrospectively unfortunate decisions. Of course, we’ll try to minimize breaking changes as much as possible. You shouldn’t use this version in production yet, however, we encourage you to try Nickel wherever you think makes sense: personal projects, experimenting outside of the production environment, etc.&lt;/p&gt; &lt;h2 id=&quot;whats-here&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#whats-here&quot;&gt;&lt;/a&gt;What’s here&lt;/h2&gt; &lt;p&gt;To try the examples from this section, you can use the &lt;a href=&quot;https://nickel-lang.org/playground/&quot;&gt;online playground&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&quot;basics&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#basics&quot;&gt;&lt;/a&gt;Basics&lt;/h3&gt; &lt;p&gt;Apart from a few syntax differences, basic Nickel is close to JSON. Here is an example of a service configuration:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nickel&quot;&gt;&lt;code class=&quot;language-nickel&quot;&gt;{   kind = &quot;Service&quot;,   apiVersion = &quot;v1&quot;,   route = &quot;/api/v1&quot;,   metadata.name = &quot;phabricator&quot;,    service = {     selector.name = &quot;phabricator&quot;,     ports = [       {port = 80, protocol = &quot;http&quot;},       {port = 443, protocol = &quot;https&quot;}     ]  } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Nickel has the same primitive data types as JSON: numbers, string, lists and records (objects in JSON).&lt;/p&gt; &lt;p&gt;Unlike JSON, Nickel is programmable. You can use variables to have a single source of truth for your data. You can use functions to transform and describe dependencies between data. The following example has some repetition, and while it is fabricated, such repetition is actually quite frequent in real-life configurations, for example in Kubernetes. Repetition can lead to inconsistencies and make modifying data a burden. Let’s see how we can get rid of repetition in Nickel:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nickel&quot;&gt;&lt;code class=&quot;language-nickel&quot;&gt;let app_name = &quot;phabricator&quot; in  let protocol_from_port = fun port =&amp;gt;   if port == 80 then &quot;http&quot;   else if port == 443 then &quot;https&quot;   else &quot;&quot; in  {   kind = &quot;Service&quot;,   apiVersion = &quot;v1&quot;,   route = &quot;%{app_name}/api/%{apiVersion}&quot;,   metadata.name = app_name,    service = {     selector.name = app_name,     ports = array.map       (fun p =&amp;gt; {port = p, protocol = protocol_from_port p})       [80, 443],   } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let app_name = &quot;phabricator&quot; in ...&lt;/code&gt; defines an immutable variable &lt;code class=&quot;language-text&quot;&gt;app_name&lt;/code&gt; with value &lt;code class=&quot;language-text&quot;&gt;&quot;phabricator&quot;&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;fun port =&amp;gt; ...&lt;/code&gt; defines a function of one argument named &lt;code class=&quot;language-text&quot;&gt;port&lt;/code&gt;. The string interpolation &lt;code class=&quot;language-text&quot;&gt;%{app_name}&lt;/code&gt; substitutes &lt;code class=&quot;language-text&quot;&gt;app_name&lt;/code&gt; by its value inside the string.&lt;/p&gt; &lt;p&gt;In this new version,&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The name &lt;code class=&quot;language-text&quot;&gt;phabricator&lt;/code&gt; is now centralized in &lt;code class=&quot;language-text&quot;&gt;app_name&lt;/code&gt;. It ensures that all the occurrences are the same, and that changing the name only amounts to updating &lt;code class=&quot;language-text&quot;&gt;app_name&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The array of records &lt;code class=&quot;language-text&quot;&gt;ports&lt;/code&gt; is now generated, and each &lt;code class=&quot;language-text&quot;&gt;protocol&lt;/code&gt; field is deduced automatically from the corresponding port number using the function &lt;code class=&quot;language-text&quot;&gt;protocol_from_port&lt;/code&gt;. Generating &lt;code class=&quot;language-text&quot;&gt;ports&lt;/code&gt; ensures each port number and its associated protocol are consistent, and make modification easy (just modify directly the port list).&lt;/li&gt; &lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;route&lt;/code&gt; field refers to another field of the same record, &lt;code class=&quot;language-text&quot;&gt;apiVersion&lt;/code&gt;. In Nickel, records are &lt;em&gt;recursive by default&lt;/em&gt;, meaning that fields can freely refer to each others. This makes it simple to express inter-dependencies of fields. Here, indeed, the &lt;code class=&quot;language-text&quot;&gt;route&lt;/code&gt; depends on the &lt;code class=&quot;language-text&quot;&gt;apiVersion&lt;/code&gt;. If we change the api version, the route will automatically stay in sync.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;typing&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#typing&quot;&gt;&lt;/a&gt;Typing&lt;/h3&gt; &lt;p&gt;The previous code is dynamically typed, which is the default in Nickel. This makes it easy to write a configuration. However, dynamic type errors can quickly become hard to debug, especially when using functions.&lt;/p&gt; &lt;p&gt;To help in writing bug free code, Nickel features a gradual type system. In practice, this means you can leverage static typing by simply annotating a particular block, typically a function, with a type. The typechecker will then rigorously verify this block. Here is a tweak of our previous &lt;code class=&quot;language-text&quot;&gt;protocol_from_port&lt;/code&gt; with a type annotation (I replaced the &lt;code class=&quot;language-text&quot;&gt;&quot;&quot;&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; on the last line):&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nickel&quot;&gt;&lt;code class=&quot;language-nickel&quot;&gt;# In file wrong.ncl let protocol_from_port : Num -&amp;gt; Str = fun port =&amp;gt;   if port == 80 then &quot;http&quot;   else if port == 443 then &quot;https&quot;   else null in&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;If we try to evaluate this program, the typechecker will rightfully reject it. Indeed, &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; is not a valid value for a string:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ nickel -f wrong.ncl error: incompatible types   ┌─ repl-input-7:4:8   │ 4 │   else null in   │        ^^^^ this expression   │   = The type of the expression was expected to be `Str`   = The type of the expression was inferred to be `Dyn`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;contracts-schemas&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#contracts-schemas&quot;&gt;&lt;/a&gt;Contracts (schemas)&lt;/h3&gt; &lt;p&gt;The end result of the evaluation of a Nickel program is typically a JSON file (or YAML, or TOML). This file is then fed to a system (e.g. Kubernetes). This file must certainly follow the requirements imposed by this system. Such requirements can usually be expressed as data schemas, specifying which fields are allowed, which are mandatory, and what kind of data can go in each field.&lt;/p&gt; &lt;p&gt;Some such requirements can be enforced by using types. However, a large number of them are out of reach of static typing. For example, take a &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/a41f9e976da10af28169cbbfebbce5ad4ba965f0/api/openapi-spec/v3/apis__networking.k8s.io_openapi.json#L83&quot;&gt;random field from the kubernetes openAPI specification&lt;/a&gt;:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;serverAddress&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;token property&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[..] This can be a hostname, hostname:port, IP or IP:port.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The last part of the description is a good example: being a string containing a hostname, hostname:port, IP or IP:port. Not only this is out of reach of most static type systems, but openAPI is not able to express this property either! The &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; field just indicates &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;, which is much less precise.&lt;/p&gt; &lt;p&gt;Nickel can express the full actual specification of &lt;code class=&quot;language-text&quot;&gt;serverAddress&lt;/code&gt; using contracts. Contracts are a validation system that can enforce arbitrary properties (you can provide your own validation functions). Contracts are designed to be written in an intuitive way, like schemas:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nickel&quot;&gt;&lt;code class=&quot;language-nickel&quot;&gt;# We assume the boolean functions is_hostname and is_ip are defined before let Address = contract.from_predicate (fun value =&amp;gt;   builtin.is_string value &amp;amp;&amp;amp;   (value == &quot;&quot; ||    is_hostname value ||    is_ip value) in  # Defines a simple schema for our configuration let Schema = {     serverAddress       | Address       | doc &quot;[..] This can be a hostname, hostname:port, IP or IP:port.&quot;       | default = &quot;&quot;,     # ... rest of the contract } in  {   serverAddress = &quot;192.168.0.0.0&quot;,   # ... rest of the configuration } | Schema&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;If we try to export this program, we get a contract violation, because our IP is not valid (there is one extra number):&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;error: contract broken by a value    ┌─ :1:1    │  1 │ Address    │ ------- expected type    │    ┌─ repl-input-2:11:19    │ 11 │   serverAddress = &quot;192.168.0.0.0&quot;,    │                   ^^^^^^^^^^^^^^^ applied to this expression    │ [..]  note:   ┌─ repl-input-2:3:9   │ 3 │       | Address   │         ^^^^^^^ bound here&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This was a simple example, but I could have used custom messages to make the error even more helpful. Thanks to contracts, invalid configurations can be caught early, instead of downstream in the pipeline when trying to deploy our services. Beyond just making our deployment work, we can even imagine using contracts for enforcing additional properties, such as security-related rules.&lt;/p&gt; &lt;h3 id=&quot;merging&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#merging&quot;&gt;&lt;/a&gt;Merging&lt;/h3&gt; &lt;p&gt;One last important aspect of Nickel is the merge operation, written &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&lt;/code&gt;. Merging combines records recursively and provides a way of writing modular configurations:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nickel&quot;&gt;&lt;code class=&quot;language-nickel&quot;&gt;# file service.ncl {   name = &quot;phabricator&quot;,   kind = `Service,   firewall.openPorts = [80, 443], }  # file security.ncl {   useFirewall = true,   firewall = {     use = &quot;iptables&quot;,     openPorts | default = [],     allowedProtocols = array.map protocol_from_port openPorts,   } }  # file main.ncl let service = import &quot;service.ncl&quot; in let security = import &quot;security.ncl&quot; in service &amp;amp; security&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Here we split security options from the service definition. The merge operator recursively combines the two resulting in the following JSON:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;token property&quot;&gt;&quot;firewall&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;token property&quot;&gt;&quot;use&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;iptables&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token property&quot;&gt;&quot;openPorts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token property&quot;&gt;&quot;allowedProtocols&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;       &lt;span class=&quot;token string&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;token string&quot;&gt;&quot;https&quot;&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token property&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;phabricator&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token property&quot;&gt;&quot;useFirewall&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;firewall&lt;/code&gt; has been specified by pieces in the two different files and combined by merging. The service needs to open some ports: the &lt;code class=&quot;language-text&quot;&gt;firewall.ncl&lt;/code&gt; closes them all by default (by defining &lt;code class=&quot;language-text&quot;&gt;openPorts = []&lt;/code&gt;, but makes this option overridable thanks to the &lt;code class=&quot;language-text&quot;&gt;default&lt;/code&gt; annotation. What’s more, merging plays well with recursive records, as it automatically updated the value of &lt;code class=&quot;language-text&quot;&gt;allowedProtocols&lt;/code&gt;, which depends on &lt;code class=&quot;language-text&quot;&gt;openPorts&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&quot;going-further&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#going-further&quot;&gt;&lt;/a&gt;Going further&lt;/h3&gt; &lt;p&gt;You can look at the main &lt;a href=&quot;https://github.com/tweag/nickel/&quot;&gt;README&lt;/a&gt; for a general description of the project. The first &lt;a href=&quot;https://www.tweag.io/blog/2020-10-22-nickel-open-sourcing/&quot;&gt;blog post series&lt;/a&gt; explains the inception of Nickel, and the following posts focus on specific aspects of the language. For a (very) condensed version of this blog post, see the &lt;a href=&quot;https://github.com/tweag/nickel/blob/master/RELEASES.md&quot;&gt;release notes&lt;/a&gt;. Finally, the most complete source remains the &lt;a href=&quot;https://nickel-lang.org/user-manual/&quot;&gt;user manual&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;whats-not-here-yet&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#whats-not-here-yet&quot;&gt;&lt;/a&gt;What’s not here (yet)&lt;/h2&gt; &lt;p&gt;We’ve been mostly focusing on designing and implementing the core language.&lt;/p&gt; &lt;h3 id=&quot;tooling-and-documentation&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#tooling-and-documentation&quot;&gt;&lt;/a&gt;Tooling and documentation&lt;/h3&gt; &lt;p&gt;Tooling and documentation are available, but not yet comprehensive. Still, check out the &lt;a href=&quot;https://github.com/nickel-lang/vim-nickel&quot;&gt;vim plugin&lt;/a&gt; or the &lt;a href=&quot;https://github.com/tweag/nickel/tree/master/lsp#vs-code&quot;&gt;VSCode&lt;/a&gt; plugin, and the editor-agnostic &lt;a href=&quot;https://github.com/tweag/nickel/tree/master/lsp&quot;&gt;LSP server&lt;/a&gt;. For documentation, you can look at the &lt;a href=&quot;https://www.nickel-lang.org&quot;&gt;website&lt;/a&gt;, and in particular the &lt;a href=&quot;https://nickel-lang.org/user-manual/&quot;&gt;user manual&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&quot;performance&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#performance&quot;&gt;&lt;/a&gt;Performance&lt;/h3&gt; &lt;p&gt;Not much effort has been put into making the interpreter fast or memory savvy. This is a subject we plan to work on in the future.&lt;/p&gt; &lt;h3 id=&quot;nickel-and-nix&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#nickel-and-nix&quot;&gt;&lt;/a&gt;Nickel and Nix&lt;/h3&gt; &lt;p&gt;Although Nickel is at heart a generalist configuration language, Nix has been a target application from day one, and was one of the original motivations for Nickel. We think Nickel could make an impact there and really improve the user experience.&lt;/p&gt; &lt;p&gt;There are several possible approaches to integrate Nickel with Nix, with varying power, ergonomics and required effort. Some approaches would require modifying either Nix itself, Nickel, or both.&lt;/p&gt; &lt;p&gt;For the time being, we haven’t yet worked out one robust, practical and powerful solution to use Nickel as a front-end for Nix development. However, we have been actively thinking about it. And now, Nix integration is the very next step on the roadmap, in parallel with collecting feedback and usage reports to help build the future of Nickel.&lt;/p&gt; &lt;p&gt;In the meantime, we open-sourced the result of our experiments of writing a simple Nix shell in Nickel. The idea has been to find the more direct route, involving only pure Nix and Nickel, and without augmenting either the Nix or the Nickel interpreter. The current code is experimental at best, but may serve as a basis for more Nickel in Nix, for the more adventurous among you: &lt;a href=&quot;https://github.com/nickel-lang/nickel-nix&quot;&gt;nickel-nix&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We are happy to announce the first release of the Nickel configuration language. You can use it wherever you would normally use JSON, YAML or TOML, but feel limited by using static text or ad-hoc templating languages.&lt;/p&gt; &lt;p&gt;This release is both usable and not yet ready for production. Your feedback, ideas and opinions are invaluable: please use Nickel, break it, do cool things we haven’t even imagined, and most importantly, please let us know about it!&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-11T00:00:00Z",
"URL":" https://tweag.io/blog/2022-03-11-nickel-first-release/ "
}
,
{
"title":"Matthew Sackman: Programming with async / await",
"textBody":"&lt;p&gt;After 15 years of building back-end and middleware server-side software, I currently find myself writing a phone app using &lt;a href=&quot;https://dart.dev/&quot;&gt;Dart&lt;/a&gt; and &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;. I’m a little surprised, but there’s plenty to learn, and some of it is quite interesting. I’ve previously built some fairly complex websites using &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; with &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, in the single-page-app style. That ecosystem is let down by both the terrible foundation that is JavaScript, and the unnecessarily dreadful and complex tool chains. So although I’m sure there are very important differences between React and &lt;a href=&quot;https://reactnative.dev/&quot;&gt;React Native&lt;/a&gt; which I don’t know about, I nevertheless decided to try out the Dart/Flutter combo this time. But both Dart and JavaScript share very similar concurrency models (&lt;a href=&quot;https://en.wikipedia.org/wiki/Async/await&quot;&gt;async/await&lt;/a&gt;), which has also recently been added to Rust.&lt;/p&gt;  &lt;p&gt;After spending nearly 8 years working mainly in &lt;a href=&quot;https://go.dev/&quot;&gt;Go&lt;/a&gt;, learning Dart has been interesting. Syntactically it’s much noisier. Lots of extra complexity, keywords, and slightly questionable features. More parenthesis, brackets and semicolons than in Go. More operators to learn. It’s made me really appreciate how sparse and simple Go is (absolutely, there are warts in Go: the nil/non-nil interface issue, and some subtle semantics around slices (amongst others) can certainly be foot-guns and detract from the simplicity of the language). The Go code formatter is much better than Dart’s; for one thing, it allows much more flexibility over blank lines than Dart, which I find essential for writing comprehensible code. That said, I’m very well aware this is just me having to get used to different ideas, and different design decisions. Without doubt, Dart is a much better language than the JavaScript world, and the tooling works without having to sacrifice a whole farmyard of goats first.&lt;/p&gt;  &lt;p&gt;There are some absolutely magical things. I can put my phone in developer mode, connect it to my computer, and type &lt;code&gt;flutter run&lt;/code&gt;. The app gets compiled on my computer, installed on my phone and started, and then I can use my browser on my computer to debug the app running on my phone, setting breakpoints and all. I’m sure to people who do this every day this is nothing exciting, and I’ve no doubt that React Native can do all this same stuff (and other phone-app-ecosystems too). But to me, it does seem utterly magical; my mind boggles at the millions of hours of effort that must have gone into making this work. Hot reloads/restarts all work too. So the developer experience is all pretty good: the tooling seems to be reliable and extensive.&lt;/p&gt;  &lt;h2 id=&quot;entering-the-rabbit-hole&quot;&gt;Entering the Rabbit hole&lt;/h2&gt;  &lt;p&gt;Because I didn’t start by reading the &lt;a href=&quot;https://dart.dev/guides/language/spec&quot;&gt;language spec&lt;/a&gt;, this section is going to feature me making a fair few assumptions, and being wrong. I will point them out as we go!&lt;/p&gt;  &lt;p&gt;As an aside, although I do enjoy beautifully presented documents typeset with LaTeX, I feel that a language spec should not be a PDF generated from LaTeX. Especially when the &lt;a href=&quot;https://dart.dev/guides/language/language-tour&quot;&gt;language tour&lt;/a&gt; is rather poor. For example, as I’ll soon cover, I wanted to check to see if logical operators are &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-circuit_evaluation&quot;&gt;short-circuiting&lt;/a&gt;. In the relevant section of the &lt;a href=&quot;https://go.dev/ref/spec#Logical_operators&quot;&gt;HTML Go language spec&lt;/a&gt;, it states:&lt;/p&gt;  &lt;blockquote&gt; &lt;p&gt;The right operand is evaluated conditionally.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;These six words are enough to make the semantics clear. It’s fast to find the text and fairly simple to understand: yes, perhaps it’s a little terse, but it’s pretty good. The &lt;a href=&quot;https://dart.dev/guides/language/language-tour#logical-operators&quot;&gt;relevant section&lt;/a&gt; of the Dart language tour says nothing useful on the subject. In the relevant section (which I can’t link to because it’s a sodding PDF document) of the &lt;a href=&quot;https://spec.dart.dev/DartLangSpecDraft.pdf&quot;&gt;Dart language spec&lt;/a&gt;, it says:&lt;/p&gt;  &lt;blockquote&gt; &lt;p&gt;Evaluation of a logical boolean expression &lt;code&gt;b&lt;/code&gt; of the form &lt;code&gt;e1||e2&lt;/code&gt; causes the evaluation of &lt;code&gt;e1&lt;/code&gt; to an object &lt;code&gt;o1&lt;/code&gt;. It is a dynamic error if the run-time type of &lt;code&gt;o1&lt;/code&gt; is not &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;o1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the result of evaluating &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;e2&lt;/code&gt; is evaluated to an object &lt;code&gt;o2&lt;/code&gt;. It is a dynamic error if the run-time type of &lt;code&gt;o2&lt;/code&gt; is not &lt;code&gt;bool&lt;/code&gt;. Otherwise the result of evaluating &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;o2&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Evaluation of a logical boolean expression &lt;code&gt;b&lt;/code&gt; of the form &lt;code&gt;e1&amp;amp;&amp;amp;e2&lt;/code&gt; causes the evaluation of &lt;code&gt;e1&lt;/code&gt; producing an object &lt;code&gt;o1&lt;/code&gt;. It is a dynamic error if the run-time type of &lt;code&gt;o1&lt;/code&gt; is not &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;o1&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the result of evaluating &lt;code&gt;b&lt;/code&gt; is false, otherwise &lt;code&gt;e2&lt;/code&gt; is evaluated to an object &lt;code&gt;o2&lt;/code&gt;. It is a dynamic error if the run-time type of &lt;code&gt;o2&lt;/code&gt; is not &lt;code&gt;bool&lt;/code&gt;. Otherwise the result of evaluating &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;o2&lt;/code&gt;.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Yes, it covers more details about the requirements on evaluating the arguments. And it implies that the operators are short-circuiting (although in the both cases it does not state the conditions when the right-hand-side is &lt;em&gt;not&lt;/em&gt; evaluated; it could be the right-hand-side is always evaluated and the result is thrown away when not needed). But I find it much harder to comprehend.&lt;/p&gt;  &lt;p&gt;English is a dreadful language to specify the semantics of a language (for example, in the above quoted text, I do not feel that the word “&lt;em&gt;otherwise&lt;/em&gt;” is an exclusive-or / if-and-only-if). But it’s incredibly important that your users understand the semantics of your language if you want them to trust the behaviour of the compiler/interpreter and be able to build programs. So putting huge effort into your use of English to describe semantics is really very important, and pays off.&lt;/p&gt;  &lt;p&gt;Whilst I’m having a minor rant, the fact that the Dart code labs (e.g. &lt;a href=&quot;https://dart.dev/codelabs/async-await&quot;&gt;async-await&lt;/a&gt;) only work if you allow 3rd-party cookies is pretty offensive. It’s 2022. People block 3rd-party cookies. Sort yourselves out!&lt;/p&gt;  &lt;p&gt;Anyway, on to some code.&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This is a constructor, and it sets the field name. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The field. The ? means it can be null. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;c1&quot;&gt;// some code &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Running &lt;code&gt;dart analyze&lt;/code&gt; on this code gives an error:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;The property 'name' can't be unconditionally accessed because the receiver can be 'null'. &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It’s complaining about the &lt;code&gt;name.isNotEmpty&lt;/code&gt; code on the right-hand-side of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. Because I’m often an idiot, I didn’t follow the link that is &lt;a href=&quot;http://dart.dev/go/non-promo-property&quot;&gt;printed alongside the error message&lt;/a&gt;. Having now done so, it’s not particularly helpful: it suggests how to fix it, but it doesn’t explain why this is an error. To find that out, you have to follow another link to &lt;a href=&quot;https://dart.dev/null-safety/understanding-null-safety#working-with-nullable-fields&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;So the first thought that went through my head is: &lt;em&gt;“huh, is &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; not short-circuiting?”&lt;/em&gt;. I.e. I’m wondering if it’s evaluating the right-hand-side even if the left-hand-side has given &lt;code&gt;false&lt;/code&gt;. Hence the journey of trying to find out if Dart’s logical operators are short-circuiting or not. Eventually, I find that they are, as normal, short-circuiting. I also spot that if I change the code as follows then the error goes away:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameCopy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nameCopy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameCopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;c1&quot;&gt;// some code &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The fact that this is now OK suggests that &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is definitely short-circuiting: if it wasn’t, then this code should still generate the same error. So next my head turns to concurrency: in the original code, there are (potentially) two reads of the field &lt;code&gt;name&lt;/code&gt;. Could the field’s value change between these reads? What &lt;em&gt;exactly&lt;/em&gt; are the semantics of this async/await concurrency model?&lt;/p&gt;  &lt;p&gt;As far as I can tell, in this particular case, no, &lt;em&gt;concurrency&lt;/em&gt; cannot be responsible for the field &lt;code&gt;name&lt;/code&gt; changing its value between the two reads. Slightly different code can, as I shall show in a moment. In this particular case though, the real danger is this:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;c1&quot;&gt;// some code &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySubClass&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MySubClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;n&quot;&gt;_got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a real string&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MySubClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That subclass still has the method &lt;code&gt;myMethod&lt;/code&gt;, and when it reads &lt;code&gt;name&lt;/code&gt;, it’s now calling the &lt;a href=&quot;https://dart.dev/guides/language/language-tour#getters-and-setters&quot;&gt;programmatic getter&lt;/a&gt; &lt;code&gt;name&lt;/code&gt; in the subclass, which has pathological semantics: the second read of &lt;code&gt;name&lt;/code&gt;, on the right-hand-side of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; now really will get a different value back. I’m pretty sure at this point that programmatic getters and setters are a misfeature that add only confusion. Cleverness never leads to readable code (he says confidently, having lost count of the number of times he’s written &lt;em&gt;clever&lt;/em&gt; code).&lt;/p&gt;  &lt;h2 id=&quot;going-deeper-underground&quot;&gt;Going deeper underground&lt;/h2&gt;  &lt;p&gt;A while ago, I read the &lt;a href=&quot;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&quot;&gt;red-blue&lt;/a&gt; blog post on callback-hell. Despite generally not liking the futures/callbacks model, the author does accept that async/await makes the situation better than bare futures or callbacks. I personally don’t find the syntax terrible, and I’ve not yet suffered from an &lt;em&gt;“oh dear, this library method I’m relying on has changed from non-async to async and I now need to adjust this huge call chain”&lt;/em&gt; situation. What I’ve not read a lot about before though, is the semantics of this concurrency model: &lt;em&gt;how do you use it safely?&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;For Dart, there is &lt;a href=&quot;https://dart.dev/codelabs/async-await&quot;&gt;this code lab&lt;/a&gt; and &lt;a href=&quot;https://dart.dev/guides/language/concurrency#asynchrony-types-and-syntax&quot;&gt;this section&lt;/a&gt; of the language guide. But I do wish certain details were given a lot more prominence. For example, &lt;a href=&quot;https://dart.dev/codelabs/async-await#execution-flow-with-async-and-await&quot;&gt;these two sentences&lt;/a&gt; seem to me like something that’s kinda important to know about:&lt;/p&gt;  &lt;blockquote&gt; &lt;p&gt;An async function runs synchronously until the first await keyword. This means that within an async function body, all synchronous code before the first await keyword executes immediately.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;It would be perfectly understandable (to me!) to believe that as soon as you call an &lt;code&gt;async&lt;/code&gt; method, you immediately get a &lt;em&gt;future&lt;/em&gt; returned, and &lt;em&gt;all&lt;/em&gt; of the code of the &lt;code&gt;async&lt;/code&gt; method gets put in a new task on the event queue.&lt;/p&gt;  &lt;p&gt;For some reason, in my head, I had the impression that in single-threaded async/await languages like Dart or JavaScript (yes, ignoring Isolates and Web-workers because of the limitations on what you can share between them), you don’t need to use locks or worry about mutual exclusion. It kinda makes sense right? (I refer back to my earlier admission of being an idiot from time to time). Whether I’ve misunderstood, or made my own assumptions, or been misled, I just don’t know. It’s wrong: you absolutely need to worry about mutual exclusion.&lt;/p&gt;  &lt;p&gt;If you’re old enough to remember CPUs before the age of SMT, or Hyper-Threading, or multi-core, well it was a very similar situation back then: sure, the CPU could only do one thing at a time (ostensibly), but you could have multiple threads in your program, and because of preemption, you absolutely needed to worry about mutual exclusion: at any point, the OS could decide to stop running one of your threads and start running a different one. A particularly good moment for an OS to do that would be when your running thread starts blocking on I/O, waiting for data to be sent or received. Sounds familiar right?&lt;/p&gt;  &lt;p&gt;So every time in my program I’m calling an &lt;code&gt;async&lt;/code&gt; method, I’m doing the equivalent of launching a new thread that is being run on a single-core CPU. Every time my program calls &lt;code&gt;await&lt;/code&gt; on a &lt;em&gt;future&lt;/em&gt;, it’s yielding this CPU and allowing a different thread to run. It’s kinda like a really weird form of cooperative multi-tasking.&lt;/p&gt;  &lt;p&gt;Getting back to some code, consider this:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Condition was true. &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Condition was false. &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If I run this code, it prints &lt;code&gt;Condition was false. null&lt;/code&gt;. Because of those two sentences I quoted above, and because there is no use of &lt;code&gt;await&lt;/code&gt;, &lt;code&gt;reset()&lt;/code&gt; will be run synchronously (even though it’s marked as &lt;code&gt;async&lt;/code&gt;), and so &lt;code&gt;null&lt;/code&gt; will get assigned to &lt;code&gt;name&lt;/code&gt; before &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; and the &lt;code&gt;else&lt;/code&gt;-block is entered. But let’s change &lt;code&gt;reset()&lt;/code&gt; to do an &lt;code&gt;await&lt;/code&gt; before the assignment:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I’m awaiting on an empty anonymous async function. But it’s enough to push the rest of &lt;code&gt;reset()&lt;/code&gt; into a task which is added to the event queue: the &lt;code&gt;name = null&lt;/code&gt; is now going to be run in a new thread (I know &lt;em&gt;“not really”&lt;/em&gt;, but the semantics are the same: it’s a new thread which is now waiting to be run on our single-core CPU). The &lt;code&gt;test()&lt;/code&gt; method is the same as before and doesn’t care about waiting for &lt;code&gt;reset()&lt;/code&gt;. If I run this, the assignment of &lt;code&gt;name = null&lt;/code&gt; now happens &lt;em&gt;after&lt;/em&gt; &lt;code&gt;test()&lt;/code&gt; has returns, and so &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, so the program prints out &lt;code&gt;Condition was true. foo&lt;/code&gt;. No code has changed in &lt;code&gt;myMethod&lt;/code&gt;. If I reversed those two lines of code in &lt;code&gt;reset()&lt;/code&gt;, the assignment to &lt;code&gt;name&lt;/code&gt; would happen synchronously.&lt;/p&gt;  &lt;p&gt;In a nutshell, I have a data race between &lt;code&gt;myMethod()&lt;/code&gt; reading &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;reset()&lt;/code&gt; writing &lt;code&gt;name&lt;/code&gt;.  What is needed is a good old mutex:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;package:mutex/mutex.dart&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Condition was true. &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Condition was false. &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;    &lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because &lt;code&gt;myMethod&lt;/code&gt; acquires the lock before the &lt;code&gt;if&lt;/code&gt; condition, the async &lt;code&gt;reset&lt;/code&gt; has to wait until &lt;code&gt;myMethod&lt;/code&gt; releases the lock before it can do the assignment to &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;  &lt;h2 id=&quot;coming-up-for-air&quot;&gt;Coming up for air&lt;/h2&gt;  &lt;p&gt;How can any of this have any bearing on real life, normal non-pathological code?&lt;/p&gt;  &lt;p&gt;In my app, let’s say the user taps a button. Some event handler I’ve set up starts running. That event handler makes an HTTP call to my server, which is async. So at this point the rest of the event handler goes into a new task that gets added to the event queue, thus freeing up the thread and the UI can continue to be rendered and respond with low-latency. Before the reply comes back from the server, the user taps on something else, and some other event handler starts running. If both event handlers are mutating the same state, I’ve quite likely got a race condition. It doesn’t matter that Dart/JavaScript is &lt;em&gt;single threaded&lt;/em&gt;. That merely means I don’t have parallelism going on. I still have concurrency going on, and that needs to be managed.&lt;/p&gt;  &lt;p&gt;If none of this is news to you then I genuinely apologise for wasting your time: this could well just be a confusion in my head caused by not thinking and reading enough in the first place. But I’ve never really heard people who write single-page-apps, or write mobile apps, talking about locks, mutual exclusion, data races, or concurrency. So it’s possible it’s not just me who’s failed to realise all this.&lt;/p&gt;  &lt;p&gt;Although the error message early on in this post caused me to start wondering about all of this, it was only when I was reading the docs for &lt;a href=&quot;https://bloclibrary.dev/#/whybloc&quot;&gt;bloc&lt;/a&gt; that the penny started to drop. Having built one big(gish) thing in React, I can definitely appreciate the problem that BLoC is trying to solve: decoupling building the widget tree from any business logic around your state. Having spent some time working with this model, I quite like it.&lt;/p&gt;  &lt;p&gt;Quite early on, it started to feel to me like the BLoC object is rather like an actor: it receives events from various different sources (the user, the network, timers etc), and needs to combine these events to come up with some consistent state that is then made available as the widget tree gets built. Actors are always single threaded things. They process one message completely, updating their own state as necessary, before going back to their mailbox and getting the next message. But in the docs I started &lt;a href=&quot;https://pub.dev/documentation/bloc/latest/bloc/Bloc/on.html&quot;&gt;coming across statements&lt;/a&gt; like:&lt;/p&gt;  &lt;blockquote&gt; &lt;p&gt;By default, events will be processed concurrently.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&lt;em&gt;“Huh?! What does that mean? This is single-threaded isn’t it?!”&lt;/em&gt; And so slowly I dug in, and started to learn, and remember. In the specific case of flutter’s bloc, there’s a &lt;a href=&quot;https://verygood.ventures/blog/how-to-use-bloc-with-streams-and-concurrency&quot;&gt;good blog post&lt;/a&gt; on this subject which shows it’s even more subtle than I anticipated. For bloc, I don’t need to explicitly use mutexes: there are other mechanisms available. Whether you’re using bloc, or &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; or something else, the key thing to think about is this: when handling one event, if your code awaits a future, does that allow the next event to be dequeued and start being processed? If it does, then you might be in need of some locks, or other changes.&lt;/p&gt;  &lt;p&gt;In general, I don’t think you can avoid having to protect all mutable state in some way, because as soon as you await anything, you’ve yielded the CPU. So any event handler which reads some state, sets off some async action, awaits the result of that and &lt;em&gt;then&lt;/em&gt; mutates state, has to be prepared for the possibility that everything mutable it read before the async action, may have changed in the meantime. To be clear, I’m absolutely not suggesting that it’s necessary to block UI rendering whilst you wait for some network request to complete: it’s not necessary. But I am saying that the interleaving of preempted and partially complete event handlers can easily lead to data races and nonsensical state if you don’t take care to create regions of mutual exclusion where necessary.&lt;/p&gt;  &lt;p&gt;Thus I don’t think async/await spares us from any of the dangers of concurrency. I’m not sure anyone really claimed it did, it’s more that I’ve just not seen them manifest before. At least as far as Dart and JavaScript are concerned, it merely limits parallelism. It’s probably not the case that a correctly written Dart/Flutter program would still be correct if every task really was run in parallel in its own thread on a multi-core CPU, but I don’t think it’s particularly wide of the mark. Although I accept this may just be my experiences/biases talking, I personally would rather see explicit rather than implicit management of threads, and ideally green-threads as in Go/Erlang etc. Still, having now learnt more, hopefully there’ll be fewer surprises to come.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-07T18:35:09Z",
"URL":" https://wellquite.org/posts/async_await/ "
}
,
{
"title":"Sandy Maguire: Review: Lightweight Semiformal Time Complexity Analysis for Purely Functional Data Structures",
"textBody":"&lt;p&gt;What a mouthful of a title! &lt;a href=&quot;https://www.cse.chalmers.se/~nad/publications/danielsson-popl2008.pdf&quot;&gt;LWTCAfPFDS&lt;/a&gt; is our paper for the week, written by Nils Anders Danielsson. At a high level, the idea is to introduce a graded monad which counts computation steps, whose bind adds those steps together. By constructing our program in this monad, we can use the type-system to track its runtime asymptotics.&lt;/p&gt; &lt;h2 id=&quot;core-definitions&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#core-definitions&quot;&gt;Core Definitions&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;We might as well dive in. Since all of this complexity analysis stuff shouldnâ€™t &lt;em&gt;change&lt;/em&gt; anything at runtime, we really only need to stick the analysis in the types, and can erase it all at runtime.&lt;/p&gt; &lt;p&gt;The paper thus presents its main tools in an &lt;code&gt;abstract&lt;/code&gt; block, which is a new Agda feature for me. And wow, does Agda ever feel like itâ€™s Haskell but from the future. An &lt;code&gt;abstract&lt;/code&gt; block lets us give some definitions, which &lt;em&gt;inside&lt;/em&gt; the &lt;code&gt;abstract&lt;/code&gt; block can be normalized. But outside the block, they are opaque symbols that are just what they are. This is a delightful contrast to Haskell, where we need to play a game of making a new module, and carefully not exporting things in order to get the same behavior. And even then, in Haskell, we canâ€™t give opaque &lt;code&gt;type&lt;/code&gt; synonyms or anything like that.&lt;/p&gt; &lt;p&gt;Anyway, the main type in the paper is &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt;, which tracks how many computation steps are necessary to produce an eventual value:&lt;/p&gt;  &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;1914&quot;&gt;abstract&lt;/a&gt;   &lt;a id=&quot;Thunk&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;1925&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1931&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;1933&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1935&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1937&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1941&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;1943&quot;&gt;Set&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;1949&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1955&quot; id=&quot;1955&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1957&quot; id=&quot;1957&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;1959&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1957&quot; id=&quot;1961&quot;&gt;a&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Because none of this exists at runtime, we can just ignore the &lt;code&gt;n&lt;/code&gt; argument, and use the &lt;code&gt;abstract&lt;/code&gt;ion barrier to ensure nobody can use this fact in anger. &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; is a &lt;em&gt;graded&lt;/em&gt; monad, that is, a monad parameterized by a monoid, which uses &lt;code&gt;mempty&lt;/code&gt; for &lt;code&gt;pure&lt;/code&gt;, and &lt;code&gt;mappend&lt;/code&gt; for binding. We can show that &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; does form a graded monad:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;pure&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;2328&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2333&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2335&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2337&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2339&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;2345&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2347&quot;&gt;a&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;2351&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2356&quot; id=&quot;2356&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2358&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2356&quot; id=&quot;2360&quot;&gt;x&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;2365&quot;&gt;infixl&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;2372&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2382&quot; id=&quot;2374&quot;&gt;_&amp;gt;&amp;gt;=_&lt;/a&gt;   &lt;a id=&quot;_&amp;gt;&amp;gt;=_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2382&quot; id=&quot;2382&quot;&gt;_&amp;gt;&amp;gt;=_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2388&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2390&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;2396&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2398&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2400&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2402&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2403&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2405&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2407&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;2413&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1883&quot; id=&quot;2415&quot;&gt;b&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2416&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2418&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2420&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2426&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;2427&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;2429&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;2431&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2432&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1883&quot; id=&quot;2434&quot;&gt;b&lt;/a&gt;   &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2438&quot; id=&quot;2438&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2382&quot; id=&quot;2440&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2444&quot; id=&quot;2444&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2446&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2444&quot; id=&quot;2448&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2438&quot; id=&quot;2450&quot;&gt;x&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;2455&quot;&gt;infixr&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;2462&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;2464&quot;&gt;_=&amp;lt;&amp;lt;_&lt;/a&gt;   &lt;a id=&quot;_=&amp;lt;&amp;lt;_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;2472&quot;&gt;_=&amp;lt;&amp;lt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2478&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2480&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2481&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2483&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2485&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;2491&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1883&quot; id=&quot;2493&quot;&gt;b&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2494&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2496&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2498&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;2504&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2506&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2508&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2510&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2516&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;2517&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;2519&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;2521&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2522&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1883&quot; id=&quot;2524&quot;&gt;b&lt;/a&gt;   &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2528&quot; id=&quot;2528&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;2530&quot;&gt;=&amp;lt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2534&quot; id=&quot;2534&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2536&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2528&quot; id=&quot;2538&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2534&quot; id=&quot;2540&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Weâ€™ll omit the proofs that &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; really is a monad, but itâ€™s not hard to see; &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; is truly just the identity monad.&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; is also equipped with two further operations; the ability to mark a computation cycle, and the ability to extract the underlying value by throwing away the complexity analysis:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;2883&quot;&gt;infixr&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;2890&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;2892&quot;&gt;!_&lt;/a&gt;   &lt;a id=&quot;!_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;2897&quot;&gt;!_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2900&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2902&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;2908&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2910&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2912&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2914&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2920&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;2921&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;2925&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2926&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;2928&quot;&gt;a&lt;/a&gt;   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;2932&quot;&gt;!_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2935&quot; id=&quot;2935&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2937&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2935&quot; id=&quot;2939&quot;&gt;a&lt;/a&gt;    &lt;a id=&quot;force&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2944&quot; id=&quot;2944&quot;&gt;force&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2950&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2952&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2953&quot; id=&quot;2953&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2955&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;2957&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;2960&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2962&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;2964&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;2970&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2953&quot; id=&quot;2972&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2974&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2953&quot; id=&quot;2976&quot;&gt;a&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2944&quot; id=&quot;2980&quot;&gt;force&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2986&quot; id=&quot;2986&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;2988&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2986&quot; id=&quot;2990&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Here, &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot;&gt;!_&lt;/a&gt;&lt;/span&gt; is given a low, right-spanning precedence, which means itâ€™s relatively painless to annotate with:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#3118&quot; id=&quot;3118&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3120&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;3122&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;3128&quot;&gt;3&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;3130&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3132&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3134&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;3136&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;3138&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;3140&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;3142&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;3147&quot;&gt;0&lt;/a&gt; &lt;/pre&gt; &lt;h2 id=&quot;conventions&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#conventions&quot;&gt;Conventions&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Our definitions are â€œopt-in,â€� in the sense that the compiler wonâ€™t yell at you if you forget to call &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot;&gt;!_&lt;/a&gt;&lt;/span&gt; somewhere a computational step happens. Thus, we require users to follow the following conventions:&lt;/p&gt; &lt;ol type=&quot;1&quot;&gt; &lt;li&gt;Every function body must begin with a call to &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot;&gt;!_&lt;/a&gt;&lt;/span&gt;.&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2944&quot;&gt;force&lt;/a&gt;&lt;/span&gt; may not be used in a function body.&lt;/li&gt; &lt;li&gt;None of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot;&gt;pure&lt;/a&gt;&lt;/span&gt;, &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2382&quot;&gt;_&amp;gt;&amp;gt;=_&lt;/a&gt;&lt;/span&gt; nor &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot;&gt;!_&lt;/a&gt;&lt;/span&gt; may be called partially applied.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The first convention ensures we count everything that should be counted. The second ensures we donâ€™t cheat by discarding complexity information before itâ€™s been counted. And the third ensures we donâ€™t accidentally introduce uncounted computation steps.&lt;/p&gt; &lt;p&gt;The first two are pretty obvious, but the third is a little subtler. Under the hood, partial application gets turned into a lambda, which introduces a computation step to evaluate. But that step wonâ€™t be ticked via &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot;&gt;!_&lt;/a&gt;&lt;/span&gt;, so we will have lost the bijection between our programs and their analyses.&lt;/p&gt; &lt;h2 id=&quot;lazy-data-types&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#lazy-data-types&quot;&gt;Lazy Data Types&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;The paper shows us how to define a lazy vector. &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot;&gt;VecL&lt;/a&gt;&lt;/span&gt; &lt;code&gt;a c n&lt;/code&gt; is a vector of &lt;code&gt;n&lt;/code&gt; elements of type &lt;code&gt;a&lt;/code&gt;, where the cost of forcing each subsequent tail is &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4346&quot;&gt;{-#&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;4350&quot;&gt;NO_POSITIVITY_CHECK&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4370&quot;&gt;#-}&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;4374&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;VecL&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;4379&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4384&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4385&quot; id=&quot;4385&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4387&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;4389&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4392&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4394&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4395&quot; id=&quot;4395&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4397&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4399&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4400&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4402&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4404&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4406&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;4408&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;4412&quot;&gt;where&lt;/a&gt;   &lt;a id=&quot;VecL.[]&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;4420&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4423&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;4425&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4385&quot; id=&quot;4430&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4395&quot; id=&quot;4432&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;4434&quot;&gt;0&lt;/a&gt;   &lt;a id=&quot;VecL._âˆ·_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;4438&quot;&gt;_âˆ·_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4442&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4385&quot; id=&quot;4444&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4446&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;4448&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4395&quot; id=&quot;4454&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4456&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;4457&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4385&quot; id=&quot;4462&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4395&quot; id=&quot;4464&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;4466&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4467&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4469&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;4471&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4385&quot; id=&quot;4476&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4395&quot; id=&quot;4478&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4480&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;4481&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;4485&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4486&quot;&gt;)&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;4489&quot;&gt;infixr&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;4496&quot;&gt;5&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;4498&quot;&gt;_âˆ·_&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Letâ€™s try to write &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5467&quot;&gt;fmap&lt;/a&gt;&lt;/span&gt; for &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot;&gt;VecL&lt;/a&gt;&lt;/span&gt;. Weâ€™re going to need a helper function, which delays a computation by artificially inflating its number of steps:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;4678&quot;&gt;abstract&lt;/a&gt;   &lt;a id=&quot;wait&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot; id=&quot;4689&quot;&gt;wait&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4694&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4696&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4697&quot; id=&quot;4697&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4699&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;4701&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4702&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4704&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;4706&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;4712&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;4714&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4716&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;4718&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4724&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4697&quot; id=&quot;4725&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;4727&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;4729&quot;&gt;m&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4730&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;4732&quot;&gt;a&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot; id=&quot;4736&quot;&gt;wait&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4741&quot; id=&quot;4741&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4743&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4741&quot; id=&quot;4745&quot;&gt;m&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;(the paper follows its own rules and ensures that we call &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot;&gt;!_&lt;/a&gt;&lt;/span&gt; every time we &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot;&gt;wait&lt;/a&gt;&lt;/span&gt;, thus it comes with an extra &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot;&gt;suc&lt;/a&gt;&lt;/span&gt; in the type of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot;&gt;wait&lt;/a&gt;&lt;/span&gt;. It gets confusing, so weâ€™ll use this version instead.)&lt;/p&gt; &lt;p&gt;Unfortunately, the paper also plays fast and loose with its math. Itâ€™s fine, because the math is right, but the code presented in the paper doesnâ€™t typecheck in Agda. As a workaround, we need to enable rewriting:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;5196&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;5201&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.Rewrite.html&quot; id=&quot;5208&quot;&gt;Agda.Builtin.Equality.Rewrite&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5238&quot;&gt;{-#&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;5242&quot;&gt;REWRITE&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#12854&quot; id=&quot;5250&quot;&gt;+-suc&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#13218&quot; id=&quot;5256&quot;&gt;+-identityÊ³&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5268&quot;&gt;#-}&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Weâ€™ll also need to be able to lift equalities over the &lt;code&gt;Thunk&lt;/code&gt; time bounds:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;cast&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5358&quot; id=&quot;5358&quot;&gt;cast&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5363&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;5365&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#151&quot; id=&quot;5367&quot;&gt;â‰¡&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;5369&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5371&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;5373&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1893&quot; id=&quot;5379&quot;&gt;m&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;5381&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5383&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;5385&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;5391&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;5393&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5358&quot; id=&quot;5395&quot;&gt;cast&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5400&quot; id=&quot;5400&quot;&gt;eq&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5403&quot; id=&quot;5403&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;5405&quot;&gt;rewrite&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5400&quot; id=&quot;5413&quot;&gt;eq&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5416&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5403&quot; id=&quot;5418&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Finally, we can write &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5467&quot;&gt;fmap&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;fmap&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5467&quot; id=&quot;5467&quot;&gt;fmap&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;5474&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5476&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5477&quot; id=&quot;5477&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5479&quot; id=&quot;5479&quot;&gt;fc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5482&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;5484&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5485&quot;&gt;}&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;5489&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5491&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;5492&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5494&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;5496&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5479&quot; id=&quot;5502&quot;&gt;fc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1883&quot; id=&quot;5505&quot;&gt;b&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5506&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;5510&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;5512&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;5517&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5477&quot; id=&quot;5519&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;5521&quot;&gt;n&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;5525&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;5527&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5533&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;5534&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;5536&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5479&quot; id=&quot;5538&quot;&gt;fc&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5540&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5542&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;5543&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1883&quot; id=&quot;5548&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5550&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;5551&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;5553&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5479&quot; id=&quot;5555&quot;&gt;fc&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;5558&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5477&quot; id=&quot;5560&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5561&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;5563&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5564&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5467&quot; id=&quot;5566&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5571&quot; id=&quot;5571&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;5573&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5576&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot; id=&quot;5578&quot;&gt;wait&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5583&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;5584&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;5589&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5591&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5467&quot; id=&quot;5593&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5598&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Argument&quot; id=&quot;5599&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5601&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5603&quot; id=&quot;5603&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5604&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5606&quot; id=&quot;5606&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5608&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5609&quot; id=&quot;5609&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;5611&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5613&quot; id=&quot;5613&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5615&quot;&gt;)&lt;/a&gt;           &lt;a class=&quot;Symbol&quot; id=&quot;5627&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;5629&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5606&quot; id=&quot;5631&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5609&quot; id=&quot;5633&quot;&gt;x&lt;/a&gt;   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2382&quot; id=&quot;5637&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5641&quot;&gt;\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5642&quot; id=&quot;5642&quot;&gt;x'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5645&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;5647&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;5649&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5654&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5642&quot; id=&quot;5655&quot;&gt;x'&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;5658&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5358&quot; id=&quot;5660&quot;&gt;cast&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5665&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#13395&quot; id=&quot;5666&quot;&gt;+-comm&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5603&quot; id=&quot;5673&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5675&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5678&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5613&quot; id=&quot;5679&quot;&gt;xs&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2382&quot; id=&quot;5682&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5467&quot; id=&quot;5686&quot;&gt;fmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#5606&quot; id=&quot;5691&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5692&quot;&gt;))&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;This took me about an hour to write; Iâ€™m not convinced the approach here is as â€œlightweightâ€� as claimed. Of particular challenge was figuring out the actual time bounds on this thing. The problem is that we usually reason about asymptotics via Big-O notation, which ignores all of these constant factors. What would be nicer is the hypothetical type:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; {c fc &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; â„•}&lt;/span&gt; &lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  â†’ (a â†’ &lt;span class=&quot;dt&quot;&gt;Thunk&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; fc) b)&lt;/span&gt; &lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  â†’ &lt;span class=&quot;dt&quot;&gt;VecL&lt;/span&gt; a c n&lt;/span&gt; &lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb1-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  â†’ &lt;span class=&quot;dt&quot;&gt;Thunk&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; c) (&lt;span class=&quot;dt&quot;&gt;VecL&lt;/span&gt; b (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; (fc &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; c)) n)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;where every thunk is now parameterized by &lt;code&gt;O x&lt;/code&gt; saying our asymptotics are bounded by &lt;code&gt;x&lt;/code&gt;. Weâ€™ll see about fleshing this idea out later. For now, we can power through on the paper, and write vector insertion. Letâ€™s assume we have a constant time comparison function for &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot;&gt;a&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;6455&quot;&gt;postulate&lt;/a&gt;   &lt;a id=&quot;_&amp;lt;=_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Postulate Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6467&quot; id=&quot;6467&quot;&gt;_&amp;lt;=_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6472&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;6474&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6476&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;6478&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6480&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;6482&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6488&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#163&quot; id=&quot;6490&quot;&gt;Bool&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;First things first, we need another waiting function to inflate the times on every tail:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;waitL&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6594&quot; id=&quot;6594&quot;&gt;waitL&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6604&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6606&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6607&quot; id=&quot;6607&quot;&gt;c'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6610&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;6612&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6613&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6615&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6616&quot; id=&quot;6616&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6618&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;6620&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6621&quot;&gt;}&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6627&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;6629&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;6634&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6607&quot; id=&quot;6636&quot;&gt;c'&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;6639&quot;&gt;n&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6645&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;6647&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6653&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6655&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;6656&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;6661&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6663&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;6664&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;6666&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6616&quot; id=&quot;6668&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;6670&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6607&quot; id=&quot;6672&quot;&gt;c'&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6674&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;6676&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6677&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6594&quot; id=&quot;6679&quot;&gt;waitL&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;6685&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6688&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;6690&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;6692&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;6697&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6594&quot; id=&quot;6700&quot;&gt;waitL&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6706&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6707&quot; id=&quot;6707&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;6709&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6711&quot; id=&quot;6711&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6713&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6715&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;6717&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;6719&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6724&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6707&quot; id=&quot;6725&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;6727&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot; id=&quot;6729&quot;&gt;wait&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6734&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6594&quot; id=&quot;6735&quot;&gt;waitL&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;6741&quot;&gt;=&amp;lt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6711&quot; id=&quot;6745&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6747&quot;&gt;))&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and a helper version of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot;&gt;if_then_else_&lt;/a&gt;&lt;/span&gt; which accounts in &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;if_then_else_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6841&quot;&gt;if_then_else_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6855&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#163&quot; id=&quot;6857&quot;&gt;Bool&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6862&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;6864&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6866&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;6868&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6870&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;6872&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6878&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;6880&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6882&quot;&gt;if&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#182&quot; id=&quot;6885&quot;&gt;false&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6891&quot;&gt;then&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6896&quot; id=&quot;6896&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6898&quot;&gt;else&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6903&quot; id=&quot;6903&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6905&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;6907&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;6909&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6903&quot; id=&quot;6914&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6916&quot;&gt;if&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Bool.html#188&quot; id=&quot;6919&quot;&gt;true&lt;/a&gt;  &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6925&quot;&gt;then&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6930&quot; id=&quot;6930&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6932&quot;&gt;else&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6937&quot; id=&quot;6937&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6939&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;6941&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;6943&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6930&quot; id=&quot;6948&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;6950&quot;&gt;infixr&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6957&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;6959&quot;&gt;if_then_else_&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;we can thus write vector insertion:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;insert&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7019&quot; id=&quot;7019&quot;&gt;insert&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;7030&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7032&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7033&quot; id=&quot;7033&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7035&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;7037&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7038&quot;&gt;}&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;7044&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7046&quot;&gt;a&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;7052&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;7054&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7059&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7033&quot; id=&quot;7061&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7063&quot;&gt;n&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;7069&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;7071&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7077&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7079&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;7080&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7085&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7087&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;7088&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;7090&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7033&quot; id=&quot;7092&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7093&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7095&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;7096&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7100&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7101&quot;&gt;))&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7019&quot; id=&quot;7104&quot;&gt;insert&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7111&quot; id=&quot;7111&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;7113&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7116&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot; id=&quot;7118&quot;&gt;wait&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7123&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;7124&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7129&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7111&quot; id=&quot;7130&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;7132&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot; id=&quot;7134&quot;&gt;wait&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7139&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;7140&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;7145&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7147&quot;&gt;)))&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7019&quot; id=&quot;7151&quot;&gt;insert&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7158&quot; id=&quot;7158&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7160&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7161&quot; id=&quot;7161&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;7163&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7165&quot; id=&quot;7165&quot;&gt;ys&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7167&quot;&gt;)&lt;/a&gt;          &lt;a class=&quot;Symbol&quot; id=&quot;7178&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;7180&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7158&quot; id=&quot;7182&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Postulate Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6467&quot; id=&quot;7184&quot;&gt;&amp;lt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7161&quot; id=&quot;7187&quot;&gt;y&lt;/a&gt;   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2382&quot; id=&quot;7191&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7195&quot;&gt;\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7196&quot; id=&quot;7196&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7198&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;7200&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;7202&quot;&gt;if&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7196&quot; id=&quot;7205&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;7207&quot;&gt;then&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7158&quot; id=&quot;7212&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;7214&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot; id=&quot;7216&quot;&gt;wait&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7221&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6594&quot; id=&quot;7222&quot;&gt;waitL&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7228&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7161&quot; id=&quot;7229&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;7231&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7165&quot; id=&quot;7233&quot;&gt;ys&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7235&quot;&gt;))&lt;/a&gt;                   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#6841&quot; id=&quot;7256&quot;&gt;else&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7161&quot; id=&quot;7261&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;7263&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7265&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7019&quot; id=&quot;7266&quot;&gt;insert&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7158&quot; id=&quot;7273&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;7275&quot;&gt;=&amp;lt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7165&quot; id=&quot;7279&quot;&gt;ys&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7281&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The obvious followup to &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7019&quot;&gt;insert&lt;/a&gt;&lt;/span&gt; is insertion &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7410&quot;&gt;sort&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;7361&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;7366&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.html&quot; id=&quot;7373&quot;&gt;Data.Vec&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;7382&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7388&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;7389&quot;&gt;Vec&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7392&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;7394&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7396&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;7398&quot;&gt;_âˆ·_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7401&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1546&quot; id=&quot;7403&quot;&gt;tail&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7407&quot;&gt;)&lt;/a&gt;  &lt;a id=&quot;sort&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7410&quot; id=&quot;7410&quot;&gt;sort&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7415&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;7417&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7421&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7423&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7425&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;7427&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7433&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;7434&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;7436&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7438&quot;&gt;5&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;7440&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7442&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7443&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7445&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;7446&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7451&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7453&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;7454&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;7456&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7458&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7459&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7461&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7462&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7410&quot; id=&quot;7464&quot;&gt;sort&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;7469&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7472&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;7474&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;7476&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;7481&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7410&quot; id=&quot;7484&quot;&gt;sort&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7489&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7490&quot; id=&quot;7490&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;7492&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7494&quot; id=&quot;7494&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7496&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7498&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;7500&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7019&quot; id=&quot;7502&quot;&gt;insert&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7490&quot; id=&quot;7509&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;7511&quot;&gt;=&amp;lt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7410&quot; id=&quot;7515&quot;&gt;sort&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7494&quot; id=&quot;7520&quot;&gt;xs&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;This thing looks linear, but insertion sort is &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n2)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n^2)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt; so what gives? The thing to notice is that the cost of each &lt;em&gt;tail&lt;/em&gt; is linear, but we have &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; tails, so forcing the whole thing indeed works out to &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n2)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n^2)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/span&gt; We can now show &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7804&quot;&gt;head&lt;/a&gt;&lt;/span&gt; runs in constant time:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;head&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7804&quot; id=&quot;7804&quot;&gt;head&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7809&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7811&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7812&quot; id=&quot;7812&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7814&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;7816&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7817&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7819&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;7821&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7826&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7812&quot; id=&quot;7828&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7830&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;7831&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7835&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7836&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7838&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;7840&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7846&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7848&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7804&quot; id=&quot;7850&quot;&gt;head&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7855&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7856&quot; id=&quot;7856&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;7858&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7860&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7863&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;7865&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;7867&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7856&quot; id=&quot;7872&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and that we can find the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7951&quot;&gt;minimum&lt;/a&gt;&lt;/span&gt; element in linear time:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;minimum&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7951&quot; id=&quot;7951&quot;&gt;minimum&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7959&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;7961&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7965&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7967&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;7968&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7972&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7973&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7975&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;7977&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7983&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;7984&quot;&gt;8&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;7986&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7988&quot;&gt;5&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;7990&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;7992&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7993&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;7995&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7951&quot; id=&quot;7997&quot;&gt;minimum&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8005&quot; id=&quot;8005&quot;&gt;xs&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8008&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;8010&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7804&quot; id=&quot;8012&quot;&gt;head&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;8017&quot;&gt;=&amp;lt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7410&quot; id=&quot;8021&quot;&gt;sort&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8005&quot; id=&quot;8026&quot;&gt;xs&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Interestingly, Agda can figure out the bounds on &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7951&quot;&gt;minimum&lt;/a&gt;&lt;/span&gt; by itself, but not any of our other functions.&lt;/p&gt; &lt;p&gt;The paper goes on to show that we can define &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8264&quot;&gt;last&lt;/a&gt;&lt;/span&gt;, and then get a quadratic-time &lt;code&gt;maximum&lt;/code&gt; using it:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;last&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8264&quot; id=&quot;8264&quot;&gt;last&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8269&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8271&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8272&quot; id=&quot;8272&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8274&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;8276&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8277&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8279&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;8281&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;8286&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8272&quot; id=&quot;8288&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8290&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;8291&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;8295&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8296&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8298&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;8300&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8306&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;8307&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;8309&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;8311&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;8315&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;8317&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;8319&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8272&quot; id=&quot;8323&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8324&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;8326&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8264&quot; id=&quot;8328&quot;&gt;last&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8333&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8334&quot; id=&quot;8334&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;8336&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8338&quot; id=&quot;8338&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8340&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8342&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;8344&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8373&quot; id=&quot;8346&quot;&gt;last'&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8334&quot; id=&quot;8352&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;8354&quot;&gt;=&amp;lt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8338&quot; id=&quot;8358&quot;&gt;xs&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;8363&quot;&gt;where&lt;/a&gt;     &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8373&quot; id=&quot;8373&quot;&gt;last'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8379&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8381&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8382&quot; id=&quot;8382&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8384&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;8386&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8387&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8389&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;8391&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8393&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4379&quot; id=&quot;8395&quot;&gt;VecL&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;8400&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8382&quot; id=&quot;8402&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;8404&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8406&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;8408&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8414&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;8415&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;8417&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1895&quot; id=&quot;8419&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;8421&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;8423&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8382&quot; id=&quot;8427&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8428&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Generalizable&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1881&quot; id=&quot;8430&quot;&gt;a&lt;/a&gt;     &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8373&quot; id=&quot;8436&quot;&gt;last'&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8442&quot; id=&quot;8442&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4420&quot; id=&quot;8444&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8447&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;8449&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2328&quot; id=&quot;8451&quot;&gt;pure&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8442&quot; id=&quot;8456&quot;&gt;a&lt;/a&gt;     &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8373&quot; id=&quot;8462&quot;&gt;last'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8468&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8470&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8471&quot; id=&quot;8471&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4438&quot; id=&quot;8473&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8475&quot; id=&quot;8475&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;8477&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8479&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2897&quot; id=&quot;8481&quot;&gt;!&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8373&quot; id=&quot;8483&quot;&gt;last'&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8471&quot; id=&quot;8489&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#2472&quot; id=&quot;8491&quot;&gt;=&amp;lt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#8475&quot; id=&quot;8495&quot;&gt;xs&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Trying to define &lt;code&gt;maximum&lt;/code&gt; makes Agda spin, probably because of one of my rewrite rules. But hereâ€™s what it should be:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb2-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Vec&lt;/span&gt; a (suc n) â†’ &lt;span class=&quot;dt&quot;&gt;Thunk&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) a&lt;/span&gt; &lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb2-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;maximum&lt;/span&gt; xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sort&lt;/span&gt; xs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The paper goes on to say some thinks about partially evaluating thunks, and then shows its use to measure some popular libraries. But Iâ€™m more interested in making the experience better.&lt;/p&gt; &lt;h2 id=&quot;extra-curricular-big-o&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#extra-curricular-big-o&quot;&gt;Extra-curricular Big O&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Clearly this is all too much work. When we do complexity analysis by hand, we are primarily concerned with &lt;em&gt;complexity classes,&lt;/em&gt; not exact numbers of steps. How hard would it be to generalize all of this so that &lt;code&gt;Thunk&lt;/code&gt; takes a function bounding the runtime necessary to produce its value?&lt;/p&gt; &lt;p&gt;First, a quick refresher on what big-O means. A function &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;f:Nâ†’N&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;f : \mathbb{N} \to \mathbb{N}&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6889em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â†’&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6889em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is said to be in &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(g)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(g)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; for some &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;g:Nâ†’N&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;g : \mathbb{N} \to \mathbb{N}&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6889em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â†’&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6889em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; iff:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;âˆƒ(Ck:N).âˆ€(n:N,kâ‰¤n).f(n)â‰¤Câ‹…g(n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \exists (C k : \mathbb{N}). \forall (n : \mathbb{N}, k \leq n). f(n) \leq C \cdot g(n) &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;âˆƒ&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.âˆ€&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â‰¤&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â‰¤&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;â‹…&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;That is, there is some point &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;k&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;k&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; at which &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;g(n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;g(n)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; stays above &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;f(n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;f(n)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/span&gt; This is the formal definition, but in practice we usually play rather fast and loose with our notation. For example, we say â€œquicksort is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(nâ‹…logâ�¡n)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n\cdot\log{n})&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;â‹…&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mop&quot;&gt;lo&lt;span&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in the length of the listâ€�, or â€œ&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(nâ‹…logâ�¡m)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n\cdot\log{m})&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;â‹…&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mop&quot;&gt;lo&lt;span&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; , where &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;m&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;m&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.4306em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is the size of the first argument.â€�&lt;/p&gt; &lt;p&gt;We need to do a bit of elaboration here to turn these informal statements into a formal claim. In both cases, there should are implicit binders inside the &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(âˆ’)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(-)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt; binding &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;n&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;n&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.4306em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in the first, and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;m,n&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;m, n&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in the second. These functions then get instantiated with the actual sizes of the lists. Itâ€™s a subtle point, but it needs to be kept in mind.&lt;/p&gt; &lt;p&gt;The other question is how the hell do we generalize that definition to multiple variables? Easy! We replace &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;n:N,kâ‰¤n&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;n : \mathbb{N}, k \leq n&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.4306em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â‰¤&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.4306em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; with a vector of natural numbers, subject to the constraint that theyâ€™re &lt;em&gt;all&lt;/em&gt; bigger than &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;k&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;k&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;OK, letâ€™s write some code. We can give the definition of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot;&gt;O&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;10468&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;10473&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html&quot; id=&quot;10480&quot;&gt;Data.Vec.Relation.Unary.All&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;10512&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10518&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1073&quot; id=&quot;10519&quot;&gt;All&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10522&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1165&quot; id=&quot;10524&quot;&gt;_âˆ·_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10527&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1148&quot; id=&quot;10529&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10531&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;10537&quot;&gt;renaming&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10546&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1447&quot; id=&quot;10547&quot;&gt;tail&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10552&quot;&gt;to&lt;/a&gt; &lt;a class=&quot;Function&quot; id=&quot;10555&quot;&gt;tailAll&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10562&quot;&gt;)&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;10565&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;O&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot; id=&quot;10572&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10574&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10575&quot; id=&quot;10575&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10580&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10582&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10583&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10585&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10586&quot; id=&quot;10586&quot;&gt;g&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10588&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;10590&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10594&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10575&quot; id=&quot;10596&quot;&gt;vars&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;10602&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10604&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10605&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10607&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;10609&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;10613&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;10621&quot;&gt;field&lt;/a&gt;     &lt;a id=&quot;O.f&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;10631&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10633&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;10635&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10639&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10575&quot; id=&quot;10641&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10646&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10648&quot;&gt;â„•&lt;/a&gt;     &lt;a id=&quot;O.C&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;10654&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10656&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10658&quot;&gt;â„•&lt;/a&gt;     &lt;a id=&quot;O.k&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10664&quot; id=&quot;10664&quot;&gt;k&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10666&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10668&quot;&gt;â„•&lt;/a&gt;     &lt;a id=&quot;O.def&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10674&quot; id=&quot;10674&quot;&gt;def&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10678&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10680&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10681&quot; id=&quot;10681&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10683&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;10685&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10689&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10575&quot; id=&quot;10691&quot;&gt;vars&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10695&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10697&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1073&quot; id=&quot;10699&quot;&gt;All&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10703&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10664&quot; id=&quot;10704&quot;&gt;k&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1535&quot; id=&quot;10706&quot;&gt;â‰¤_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10708&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10681&quot; id=&quot;10710&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10712&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;10714&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10681&quot; id=&quot;10716&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1535&quot; id=&quot;10718&quot;&gt;â‰¤&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;10720&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;10722&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10586&quot; id=&quot;10724&quot;&gt;g&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10681&quot; id=&quot;10726&quot;&gt;n&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The generality of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot;&gt;O&lt;/a&gt;&lt;/span&gt; is a bit annoying for the common case of being a function over one variable, so we can introduce a helper function &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot;&gt;O'&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;hoist&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10895&quot; id=&quot;10895&quot;&gt;hoist&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10901&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10903&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10904&quot; id=&quot;10904&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10906&quot; id=&quot;10906&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10908&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;10910&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10913&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10915&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10917&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10904&quot; id=&quot;10918&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10920&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10906&quot; id=&quot;10922&quot;&gt;b&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10923&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10925&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;10927&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10904&quot; id=&quot;10931&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10933&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10935&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10906&quot; id=&quot;10937&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10895&quot; id=&quot;10939&quot;&gt;hoist&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10945&quot; id=&quot;10945&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10947&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10948&quot; id=&quot;10948&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;10950&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10952&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10954&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10956&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10945&quot; id=&quot;10958&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10948&quot; id=&quot;10960&quot;&gt;x&lt;/a&gt;  &lt;a id=&quot;O'&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;10963&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10966&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10968&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10969&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10971&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;10973&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10974&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10976&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;10978&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;10982&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10985&quot; id=&quot;10985&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10987&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot; id=&quot;10989&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10991&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10895&quot; id=&quot;10992&quot;&gt;hoist&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10985&quot; id=&quot;10998&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10999&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;We can trivially lift any function &lt;code&gt;f&lt;/code&gt; into &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot;&gt;O&lt;/a&gt;&lt;/span&gt; &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;O-build&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11071&quot; id=&quot;11071&quot;&gt;O-build&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11079&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11081&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11082&quot; id=&quot;11082&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11087&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;11089&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11090&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11092&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11094&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11095&quot; id=&quot;11095&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11097&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;11099&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;11103&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11082&quot; id=&quot;11105&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11110&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;11112&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11113&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11115&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot; id=&quot;11117&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11095&quot; id=&quot;11119&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11071&quot; id=&quot;11121&quot;&gt;O-build&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11129&quot; id=&quot;11129&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11131&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;11132&quot;&gt;O.f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11136&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11129&quot; id=&quot;11138&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11071&quot; id=&quot;11140&quot;&gt;O-build&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11148&quot; id=&quot;11148&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11150&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11151&quot;&gt;O.C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11155&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;11157&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11071&quot; id=&quot;11159&quot;&gt;O-build&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11167&quot; id=&quot;11167&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11169&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10664&quot; id=&quot;11170&quot;&gt;O.k&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11174&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;11176&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11071&quot; id=&quot;11178&quot;&gt;O-build&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11186&quot; id=&quot;11186&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11188&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10674&quot; id=&quot;11189&quot;&gt;O.def&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11195&quot; id=&quot;11195&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11197&quot; id=&quot;11197&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11199&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#4565&quot; id=&quot;11201&quot;&gt;â‰¤-refl&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and also trivially weaken an &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot;&gt;O&lt;/a&gt;&lt;/span&gt; into using more variables:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;O-weaken&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11285&quot; id=&quot;11285&quot;&gt;O-weaken&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11294&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11296&quot;&gt;âˆ€&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11298&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11299&quot; id=&quot;11299&quot;&gt;vars&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11303&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11305&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11306&quot; id=&quot;11306&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11308&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;11310&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;11314&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11299&quot; id=&quot;11316&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11321&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;11323&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11324&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11326&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot; id=&quot;11328&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11306&quot; id=&quot;11330&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11332&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot; id=&quot;11334&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11336&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11306&quot; id=&quot;11337&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1031&quot; id=&quot;11339&quot;&gt;âˆ˜&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1546&quot; id=&quot;11341&quot;&gt;tail&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11345&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11285&quot; id=&quot;11347&quot;&gt;O-weaken&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11356&quot; id=&quot;11356&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11358&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;11359&quot;&gt;O.f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11363&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11356&quot; id=&quot;11365&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11367&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;11368&quot;&gt;O.f&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1031&quot; id=&quot;11372&quot;&gt;âˆ˜&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1546&quot; id=&quot;11374&quot;&gt;tail&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11285&quot; id=&quot;11379&quot;&gt;O-weaken&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11388&quot; id=&quot;11388&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11390&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11391&quot;&gt;O.C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11395&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11388&quot; id=&quot;11397&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11399&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11400&quot;&gt;O.C&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11285&quot; id=&quot;11404&quot;&gt;O-weaken&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11413&quot; id=&quot;11413&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11415&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10664&quot; id=&quot;11416&quot;&gt;O.k&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11420&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11413&quot; id=&quot;11422&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11424&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10664&quot; id=&quot;11425&quot;&gt;O.k&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11285&quot; id=&quot;11429&quot;&gt;O-weaken&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11438&quot; id=&quot;11438&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11440&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10674&quot; id=&quot;11441&quot;&gt;O.def&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11447&quot;&gt;(_&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;11450&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11452&quot; id=&quot;11452&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11453&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11455&quot;&gt;(_&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1165&quot; id=&quot;11458&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11460&quot; id=&quot;11460&quot;&gt;eq&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11462&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11464&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11438&quot; id=&quot;11466&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11468&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10674&quot; id=&quot;11469&quot;&gt;O.def&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11452&quot; id=&quot;11475&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11460&quot; id=&quot;11477&quot;&gt;eq&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;More interestingly, we can lift a given &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot;&gt;O'&lt;/a&gt;&lt;/span&gt; into a higher power, witnessing the fact that eg, something of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n2)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n^2)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is also &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;O(n3)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;O(n^3)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;O-^-suc&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11632&quot; id=&quot;11632&quot;&gt;O-^-suc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11640&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11642&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11643&quot; id=&quot;11643&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11645&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;11647&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11648&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11650&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;11652&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11655&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;11656&quot;&gt;_^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11643&quot; id=&quot;11659&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11660&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11662&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;11664&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11667&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;11668&quot;&gt;_^&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;11671&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11643&quot; id=&quot;11675&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11676&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11632&quot; id=&quot;11678&quot;&gt;O-^-suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11686&quot; id=&quot;11686&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11688&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;11689&quot;&gt;O.f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11693&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11686&quot; id=&quot;11695&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11697&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;11698&quot;&gt;O.f&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11632&quot; id=&quot;11702&quot;&gt;O-^-suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11710&quot; id=&quot;11710&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11712&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11713&quot;&gt;O.C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11717&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11710&quot; id=&quot;11719&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11721&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11722&quot;&gt;O.C&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11632&quot; id=&quot;11726&quot;&gt;O-^-suc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11734&quot; id=&quot;11734&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11736&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10664&quot; id=&quot;11737&quot;&gt;O.k&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11741&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#223&quot; id=&quot;11743&quot;&gt;suc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11747&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11734&quot; id=&quot;11748&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11750&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10664&quot; id=&quot;11751&quot;&gt;O.k&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11754&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11632&quot; id=&quot;11756&quot;&gt;O-^-suc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11764&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11765&quot; id=&quot;11765&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11766&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11768&quot; id=&quot;11768&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11770&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10674&quot; id=&quot;11771&quot;&gt;O.def&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11777&quot; id=&quot;11777&quot;&gt;xs&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11779&quot;&gt;@(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11781&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;11783&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;11785&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11787&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11789&quot; id=&quot;11789&quot;&gt;ps&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11791&quot;&gt;@(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1600&quot; id=&quot;11793&quot;&gt;sâ‰¤s&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11797&quot; id=&quot;11797&quot;&gt;px&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1165&quot; id=&quot;11800&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1148&quot; id=&quot;11802&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11804&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11806&quot;&gt;=&lt;/a&gt;   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#3010&quot; id=&quot;11810&quot;&gt;begin&lt;/a&gt;     &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;11820&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11777&quot; id=&quot;11822&quot;&gt;xs&lt;/a&gt;               &lt;span class=&quot;reasoning-step&quot;&gt;&lt;span class=&quot;as-written Function&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#3745&quot; id=&quot;11839&quot;&gt;â‰¤âŸ¨&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10674&quot; id=&quot;11842&quot;&gt;def&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11777&quot; id=&quot;11846&quot;&gt;xs&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11849&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#7182&quot; id=&quot;11850&quot;&gt;â‰¤-step&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11797&quot; id=&quot;11857&quot;&gt;px&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1165&quot; id=&quot;11860&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Relation.Unary.All.html#1148&quot; id=&quot;11862&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11864&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#3745&quot; id=&quot;11866&quot;&gt;âŸ©&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;alternate Function&quot;&gt;â‰¤&lt;/span&gt;&lt;/span&gt;     &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11872&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;11874&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11876&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11877&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;11879&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11765&quot; id=&quot;11881&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11882&quot;&gt;)&lt;/a&gt;        &lt;span class=&quot;reasoning-step&quot;&gt;&lt;span class=&quot;as-written Function&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#3745&quot; id=&quot;11891&quot;&gt;â‰¤âŸ¨&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#25321&quot; id=&quot;11894&quot;&gt;*-monoË¡-â‰¤&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11904&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11905&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;11907&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11765&quot; id=&quot;11909&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11910&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11912&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#26034&quot; id=&quot;11913&quot;&gt;mâ‰¤m*n&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11919&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11921&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1600&quot; id=&quot;11922&quot;&gt;sâ‰¤s&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1558&quot; id=&quot;11926&quot;&gt;zâ‰¤n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11929&quot;&gt;))&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#3745&quot; id=&quot;11932&quot;&gt;âŸ©&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;alternate Function&quot;&gt;â‰¤&lt;/span&gt;&lt;/span&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;11938&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11939&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;11941&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11943&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11944&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;11946&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11948&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11949&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;11951&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11765&quot; id=&quot;11953&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11954&quot;&gt;)&lt;/a&gt;  &lt;span class=&quot;reasoning-step&quot;&gt;&lt;span class=&quot;as-written Function&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#4518&quot; id=&quot;11957&quot;&gt;â‰¡âŸ¨&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#21046&quot; id=&quot;11960&quot;&gt;*-assoc&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11968&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11970&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11972&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11973&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;11975&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11765&quot; id=&quot;11977&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11978&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#4518&quot; id=&quot;11980&quot;&gt;âŸ©&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;alternate Function&quot;&gt;â‰¡&lt;/span&gt;&lt;/span&gt;     &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10654&quot; id=&quot;11986&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;11988&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11990&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11991&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;11993&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11995&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11781&quot; id=&quot;11996&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;11998&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11765&quot; id=&quot;12000&quot;&gt;n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12001&quot;&gt;))&lt;/a&gt;   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Reasoning.Base.Triple.html#5119&quot; id=&quot;12006&quot;&gt;âˆ�&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;12010&quot;&gt;where&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;12020&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot; id=&quot;12025&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11768&quot; id=&quot;12027&quot;&gt;o&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;12033&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#12478&quot; id=&quot;12038&quot;&gt;â‰¤-Reasoning&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;However, the challenge is and has always been to simplify the construction of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; bounds. Thus, weâ€™d like the ability to remove low-order terms from &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot;&gt;O&lt;/a&gt;&lt;/span&gt;s. We can do this by eliminating &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;nk&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;n^k&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.8491em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8491em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; whenever there is a &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;nkâ€²&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;n^{k'}&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.9425em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.9425em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8278em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;â€²&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; term around with &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;kâ‰¤kâ€²&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;k \leq k'&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â‰¤&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.7519em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.7519em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;â€²&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;12328&quot;&gt;postulate&lt;/a&gt;   &lt;a id=&quot;O-drop-low&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12340&quot; id=&quot;12340&quot;&gt;O-drop-low&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;12355&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12357&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12358&quot; id=&quot;12358&quot;&gt;z&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12360&quot; id=&quot;12360&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12362&quot; id=&quot;12362&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12364&quot; id=&quot;12364&quot;&gt;k&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12366&quot; id=&quot;12366&quot;&gt;k'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12369&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;12371&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12372&quot;&gt;}&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;12378&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12364&quot; id=&quot;12380&quot;&gt;k&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1535&quot; id=&quot;12382&quot;&gt;â‰¤&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12366&quot; id=&quot;12384&quot;&gt;k'&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;12391&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;12393&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12396&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12398&quot; id=&quot;12398&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12400&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12358&quot; id=&quot;12402&quot;&gt;z&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;12404&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12360&quot; id=&quot;12406&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;12408&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12398&quot; id=&quot;12410&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;12412&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12364&quot; id=&quot;12414&quot;&gt;k&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;12416&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12362&quot; id=&quot;12418&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;12420&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12398&quot; id=&quot;12422&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;12424&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12366&quot; id=&quot;12426&quot;&gt;k'&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12428&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;12434&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;12436&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12439&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12441&quot; id=&quot;12441&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12443&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12358&quot; id=&quot;12445&quot;&gt;z&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;12447&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12441&quot; id=&quot;12449&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;12451&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12366&quot; id=&quot;12453&quot;&gt;k'&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12455&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;z&lt;/code&gt; variable here lets us compose &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12340&quot;&gt;O-drop-low&lt;/a&gt;&lt;/span&gt; terms, by subsequently instantiating&lt;/p&gt; &lt;p&gt;As a special case, we can eliminate constant terms via &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12340&quot;&gt;O-drop-low&lt;/a&gt;&lt;/span&gt; by first expanding constant terms to be coefficients of &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;n0&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;n^0&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;O-drop-1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12701&quot; id=&quot;12701&quot;&gt;O-drop-1&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;12712&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12714&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12715&quot; id=&quot;12715&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12717&quot; id=&quot;12717&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12719&quot; id=&quot;12719&quot;&gt;k&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12721&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;12723&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12724&quot;&gt;}&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;12728&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;12730&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12733&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12735&quot; id=&quot;12735&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12737&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12715&quot; id=&quot;12739&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;12741&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12717&quot; id=&quot;12743&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;12745&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12735&quot; id=&quot;12747&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;12749&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12719&quot; id=&quot;12751&quot;&gt;k&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12752&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;12756&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;12758&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12761&quot;&gt;(\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12763&quot; id=&quot;12763&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12765&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12763&quot; id=&quot;12767&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;12769&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12719&quot; id=&quot;12771&quot;&gt;k&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12772&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12701&quot; id=&quot;12774&quot;&gt;O-drop-1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12783&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12784&quot; id=&quot;12784&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12785&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12787&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12788&quot; id=&quot;12788&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12789&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12791&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12792&quot; id=&quot;12792&quot;&gt;k&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12793&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12795&quot; id=&quot;12795&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;12797&quot;&gt;rewrite&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;12805&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12809&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Properties.html#20010&quot; id=&quot;12810&quot;&gt;*-identityÊ³&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12784&quot; id=&quot;12822&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12823&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12825&quot;&gt;=&lt;/a&gt;   &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12340&quot; id=&quot;12829&quot;&gt;O-drop-low&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12840&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;12841&quot;&gt;0&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12842&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12844&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12784&quot; id=&quot;12845&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12846&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12848&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12788&quot; id=&quot;12849&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12850&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12852&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Argument&quot; id=&quot;12853&quot;&gt;k&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12855&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12857&quot;&gt;0&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12858&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12860&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12792&quot; id=&quot;12861&quot;&gt;k&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12862&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1558&quot; id=&quot;12864&quot;&gt;zâ‰¤n&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12795&quot; id=&quot;12868&quot;&gt;o&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;With these functions, we can now easily construct &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot;&gt;O'&lt;/a&gt;&lt;/span&gt; values for arbitrary one-variable functions:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12987&quot; id=&quot;12987&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12989&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;12991&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12994&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;12995&quot;&gt;_^&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12998&quot;&gt;1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12999&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13001&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13003&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12701&quot; id=&quot;13005&quot;&gt;O-drop-1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13014&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13015&quot;&gt;4&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13016&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13018&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13019&quot;&gt;5&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13020&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13022&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13023&quot;&gt;1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13024&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1919&quot; id=&quot;13026&quot;&gt;$&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11071&quot; id=&quot;13028&quot;&gt;O-build&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1919&quot; id=&quot;13036&quot;&gt;$&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10895&quot; id=&quot;13038&quot;&gt;hoist&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13044&quot;&gt;\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13045&quot; id=&quot;13045&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13047&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13049&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;13051&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13053&quot;&gt;5&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;13055&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13045&quot; id=&quot;13057&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;13059&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13061&quot;&gt;1&lt;/a&gt;  &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13064&quot; id=&quot;13064&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13066&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10963&quot; id=&quot;13068&quot;&gt;O'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13071&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;13072&quot;&gt;_^&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13075&quot;&gt;2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13076&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13078&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13080&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12701&quot; id=&quot;13082&quot;&gt;O-drop-1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13091&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13092&quot;&gt;4&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13093&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13095&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13096&quot;&gt;1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13097&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13099&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13100&quot;&gt;2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13101&quot;&gt;}&lt;/a&gt;   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1919&quot; id=&quot;13105&quot;&gt;$&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#12340&quot; id=&quot;13107&quot;&gt;O-drop-low&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13118&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13119&quot;&gt;4&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13120&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13122&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13123&quot;&gt;5&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13124&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13126&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13127&quot;&gt;3&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13128&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13130&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13131&quot;&gt;1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13132&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13134&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Number&quot; id=&quot;13135&quot;&gt;2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13136&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13138&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1600&quot; id=&quot;13139&quot;&gt;sâ‰¤s&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#1558&quot; id=&quot;13143&quot;&gt;zâ‰¤n&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13146&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1919&quot; id=&quot;13150&quot;&gt;$&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#11071&quot; id=&quot;13152&quot;&gt;O-build&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Function.Base.html#1919&quot; id=&quot;13160&quot;&gt;$&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10895&quot; id=&quot;13162&quot;&gt;hoist&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13168&quot;&gt;\&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13169&quot; id=&quot;13169&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13171&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13173&quot;&gt;4&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;13175&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13177&quot;&gt;5&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;13179&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13169&quot; id=&quot;13181&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;13183&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13185&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#325&quot; id=&quot;13187&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13189&quot;&gt;3&lt;/a&gt; &lt;a class=&quot;Primitive Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#528&quot; id=&quot;13191&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13169&quot; id=&quot;13193&quot;&gt;n&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.Base.html#3471&quot; id=&quot;13195&quot;&gt;^&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;13197&quot;&gt;2&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Finally, we just need to build a version of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; that is adequately lifted over the same functions we use for &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot;&gt;O&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;13341&quot;&gt;abstract&lt;/a&gt;   &lt;a id=&quot;OThunk&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13352&quot; id=&quot;13352&quot;&gt;OThunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13359&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13361&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13362&quot; id=&quot;13362&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13367&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13369&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13370&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13372&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13374&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;13375&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13379&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13362&quot; id=&quot;13381&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13386&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13388&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13389&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13391&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13393&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13397&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13399&quot;&gt;Set&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13352&quot; id=&quot;13405&quot;&gt;OThunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13412&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13414&quot; id=&quot;13414&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13416&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13414&quot; id=&quot;13418&quot;&gt;a&lt;/a&gt;    &lt;a id=&quot;OThunk'&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13423&quot; id=&quot;13423&quot;&gt;OThunk'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13431&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13433&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13434&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13436&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13438&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13439&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13441&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13443&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13447&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13449&quot;&gt;Set&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13423&quot; id=&quot;13455&quot;&gt;OThunk'&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13463&quot; id=&quot;13463&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13465&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13352&quot; id=&quot;13467&quot;&gt;OThunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13474&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10895&quot; id=&quot;13475&quot;&gt;hoist&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13463&quot; id=&quot;13481&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13482&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13586&quot;&gt;limit&lt;/a&gt;&lt;/span&gt; function can be used to lift a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot;&gt;Thunk&lt;/a&gt;&lt;/span&gt; into an &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13352&quot;&gt;OThunk&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;limit&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13586&quot; id=&quot;13586&quot;&gt;limit&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;13596&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13598&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13599&quot; id=&quot;13599&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13604&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13606&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13607&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13609&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13610&quot; id=&quot;13610&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13612&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;13614&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13618&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13599&quot; id=&quot;13620&quot;&gt;vars&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13625&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13627&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13628&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13630&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13631&quot; id=&quot;13631&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13633&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;13635&quot;&gt;Set&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13638&quot;&gt;}&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;13644&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13646&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13647&quot; id=&quot;13647&quot;&gt;v&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13649&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;13651&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;13655&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13599&quot; id=&quot;13657&quot;&gt;vars&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13661&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;13667&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13669&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13670&quot; id=&quot;13670&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13672&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot; id=&quot;13674&quot;&gt;O&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13610&quot; id=&quot;13676&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13677&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;13683&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#1925&quot; id=&quot;13685&quot;&gt;Thunk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13691&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13670&quot; id=&quot;13692&quot;&gt;o&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13694&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10631&quot; id=&quot;13695&quot;&gt;O.f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13647&quot; id=&quot;13699&quot;&gt;v&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;13700&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13631&quot; id=&quot;13702&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13704&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13352&quot; id=&quot;13706&quot;&gt;OThunk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13610&quot; id=&quot;13713&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13631&quot; id=&quot;13715&quot;&gt;a&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13586&quot; id=&quot;13719&quot;&gt;limit&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13725&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13727&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13729&quot; id=&quot;13729&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;13731&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13729&quot; id=&quot;13733&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and we can now give an asymptotic bound over &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#7410&quot;&gt;sort&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb3-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;o2 &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;O'&lt;/span&gt; (_&lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt; &lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb3-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;o2 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; {&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;} {&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;} {&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;} &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;build &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; hoist \n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; n&lt;/span&gt; &lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb3-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb3-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;linearHeadSort &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Vec&lt;/span&gt; a n â†’ &lt;span class=&quot;dt&quot;&gt;OThunk'&lt;/span&gt; (_&lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;VecL&lt;/span&gt; a (&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; n) n)&lt;/span&gt; &lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb3-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;linearHeadSort {n &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; n} v &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; limit (n âˆ· []) o2 &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sort&lt;/span&gt; v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#conclusions&quot;&gt;Conclusions&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Iâ€™m traveling right now, and ran out of internet on publication day, which means I donâ€™t have a copy of the paper in front of me as I write this (foolish!) Overall, the paper is slightly interesting, though I donâ€™t think thereâ€™s anything especially novel here. Sticking the runtime behavior into the type is pretty much babbyâ€™s first example of graded monads, and we donâ€™t even get asymptotics out of it! Instead we need to push big polynomials around, and explicitly call &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#4689&quot;&gt;wait&lt;/a&gt;&lt;/span&gt; to make different branches work out.&lt;/p&gt; &lt;p&gt;The &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#10572&quot;&gt;O&lt;/a&gt;&lt;/span&gt; stuff Iâ€™ve presented here alleviates a few of those problems; as it allows us to relatively-easily throw away the polynomials and just work with the highest order terms. A probably better approach would be to throw away the functions, and use a canonical normalizing-form to express the asymptotes. Then we could define a &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;\lub&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;\lub&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot; style=&quot;color: #cc0000;&quot;&gt;&lt;span class=&quot;mord&quot; style=&quot;color: #cc0000;&quot;&gt;\lub&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operator over &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/complexity-analysis/index.html#13352&quot;&gt;OThunk&lt;/a&gt;&lt;/span&gt;s, and define:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://reasonablypolymorphic.com/atom.xml#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;_&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;_ &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OThunk&lt;/span&gt; f a â†’ (a â†’ &lt;span class=&quot;dt&quot;&gt;OThunk&lt;/span&gt; g b) â†’ &lt;span class=&quot;dt&quot;&gt;OThunk&lt;/span&gt; (f âŠ” g) b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;to let us work compositionally in the land of big O.&lt;/p&gt; &lt;p&gt;My biggest takeaway here is that the techniques described in this paper are probably not powerful enough to be used in anger. Or, at least, not if you actually want to get any work done. Between the monads, polynomials, and waiting, the experience could use a lot of TLC.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-06T00:00:00Z",
"URL":" https://reasonablypolymorphic.com/blog/complexity-analysis/index.html "
}
,
{
"title":"GHC Developer Blog: GHC 9.2.2 is now available",
"textBody":"&lt;h1&gt;GHC 9.2.2 is now available&lt;/h1&gt; &lt;h4 class=&quot;text-muted&quot;&gt;bgamari - 2022-03-06&lt;/h4&gt;  &lt;p&gt;The GHC developers are very happy to at announce the availability of GHC 9.2.2. Binary distributions, source distributions, and documentation are available at &lt;a href=&quot;https://downloads.haskell.org/ghc/9.2.2&quot;&gt;&lt;code&gt;downloads.haskell.org&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This release includes many bug-fixes and other improvements to 9.2.1 including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;A number of bug-fixes in the new AArch64 native code generator&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Fixes ensuring that the &lt;code&gt;indexWord8ArrayAs*#&lt;/code&gt; family of primops is handled correctly on platforms lacking support for unaligned memory accesses (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/21015&quot;&gt;#21015&lt;/a&gt;, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/20987&quot;&gt;#20987&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Improvements to the compatibility story in GHCâ€™s migration to the XDG Base Directory Specification (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/20684&quot;&gt;#20684&lt;/a&gt;, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/20669&quot;&gt;#20669&lt;/a&gt;, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/20660&quot;&gt;#20660&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Restored compatibility with Windows 7&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;A new &lt;code&gt;-fcompact-unwind&lt;/code&gt; flag, improving compatibility with C++ libraries on Apple Darwin (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11829&quot;&gt;#11829&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Introduction of a new flag, &lt;code&gt;-fcheck-prim-bounds&lt;/code&gt;, enabling runtime bounds checking of array primops (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/20769&quot;&gt;#20769&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Unboxing of unlifted types (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/20663&quot;&gt;#20663&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Numerous improvements in compiler performance.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Many, many others. See the &lt;a href=&quot;https://downloads.haskell.org/ghc/9.2.2/docs/html/users_guide/9.2.2-notes.html&quot;&gt;release notes&lt;/a&gt; for a full list.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As some of the fixed issues do affect correctness users are encouraged to upgrade promptly.&lt;/p&gt; &lt;p&gt;Finally, thank you to Microsoft Research, GitHub, IOHK, the Zw3rk stake pool, Tweag I/O, Serokell, Equinix, SimSpace, and other anonymous contributors whose on-going financial and in-kind support has facilitated GHC maintenance and release management over the years. Moreover, this release would not have been possible without the hundreds of open-source contributors whose work comprise this release.&lt;/p&gt; &lt;p&gt;As always, do open a &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/new&quot;&gt;ticket&lt;/a&gt; if you see anything amiss.&lt;/p&gt; &lt;p&gt;Happy compiling,&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Ben&lt;/li&gt; &lt;/ul&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-06T00:00:00Z",
"URL":" http://haskell.org/ghc/blog/20220305-ghc-9.2.2-released.html "
}
,
{
"title":"Gabriel Gonzalez: Advice for aspiring bloggers",
"textBody":"writing2    &lt;p&gt;I’m writing this post to summarize blogging advice that I’ve shared with multiple people interested in blogging. My advice (and this post) won’t be very coherent, but I hope people will still find this useful.&lt;/p&gt;&lt;p&gt;Also, this advice is targeted towards blogging and not necessarily writing in general. For example, I have 10 years of experience blogging, but less experience with other forms of writing, such as writing books or academic publications.&lt;/p&gt;&lt;h4 id=&quot;motivation&quot;&gt;Motivation&lt;/h4&gt;&lt;p&gt;Motivation is everything when it comes to blogging. I believe you should focus on motivation before working on improving anything else about your writing. In particular, if you always force yourself to set aside time to write then (in my opinion) you’re needlessly making things hard on yourself.&lt;/p&gt;&lt;p&gt;Motivation can be &lt;em&gt;found&lt;/em&gt; or &lt;em&gt;cultivated&lt;/em&gt;. Many new writers start off by &lt;em&gt;finding&lt;/em&gt; motivation; inspiration strikes and they feel compelled to share what they learned with others. However, long-term consistent writers learn how to &lt;em&gt;cultivate&lt;/em&gt; motivation so that their writing process doesn’t become “feast or famine”.&lt;/p&gt;&lt;p&gt;There is no one-size-fits-all approach to cultivating motivation, because not everybody shares the same motivation for writing. However, the first step is always reflecting upon what motivates you to write, which could be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;sharing exciting new things you learn&lt;/li&gt;&lt;li&gt;making money&lt;/li&gt;&lt;li&gt;evangelizing a new technology or innovation&lt;/li&gt;&lt;li&gt;launching or switching to a new career&lt;/li&gt;&lt;li&gt;changing the way people think&lt;/li&gt;&lt;li&gt;improving your own understanding by teaching others&lt;/li&gt;&lt;li&gt;settling a debate or score&lt;/li&gt;&lt;li&gt;sorting out your own thoughts&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The above list is not comprehensive, and people can blog for more than one reason. For example, I find that I’m most motivated to blog when I have just finished teaching someone something new or arguing with someone. When I conclude these conversations I feel highly inspired to write.&lt;/p&gt;&lt;p&gt;Once you clue in to what motivates you, use that knowledge to cultivate your motivation. For example, if teaching people inspires me then I’ll put myself in positions where I have more opportunities to mentor others, such as becoming an engineering manager, volunteering for Google Summer of Code, or mentoring friends earlier in their careers. Similarly, if arguing with people inspires me then I could hang out on social media with an axe to grind (although I don’t do that as much these days for obvious reasons…).&lt;/p&gt;&lt;h4 id=&quot;when-inspiration-strikes&quot;&gt;When inspiration strikes&lt;/h4&gt;&lt;p&gt;That doesn’t mean that you should never write when you’re not motivated. I still sometimes write when it doesn’t strike my fancy. Why? Because inspiration doesn’t always strike at a convenient time.&lt;/p&gt;&lt;p&gt;For example, sometimes I will get “hot” to write something in the middle of my workday (such as right after a 1-on-1 conversation) and I have to put a pin in it until I have more free time later.&lt;/p&gt;&lt;p&gt;One of the hardest things about writing is that inspiration doesn’t always strike at convenient times. There are a few ways to deal with this, all of which are valid:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Write anyway, despite the inconvenience&lt;/p&gt;&lt;p&gt;Sometimes writing entails reneging on your obligations and writing anyway. This can happen when you just know the idea has to come out one way or another and it won’t necessarily happen on a convenient schedule.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Write later&lt;/p&gt;&lt;p&gt;Some topics will always inspire you every time you revisit them, so even if your excitement wears off it will come back the next time you revisit the subject.&lt;/p&gt;&lt;p&gt;For example, sometimes I will start to write about something that I’m not excited about at the moment but I remember I was excited about it before. Then as I start to write everything comes flooding back and I recapture my original excitement.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Abandon the idea&lt;/p&gt;&lt;p&gt;Sometimes you just have to completely give up on writing something.&lt;/p&gt;&lt;p&gt;I’ve thrown away a lot of writing ideas that I was really attached to because I knew I would never have the time. It happens, it’s sad when it happens, but it’s a harsh reality of life.&lt;/p&gt;&lt;p&gt;Sometimes “abandon the idea” can become “write later” if I happen to revisit the subject years later at a more opportune time, but I generally try to abandon ideas completely, otherwise they will keep distracting me and do more harm than good.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I personally have done all of the above in roughly equal measure. There is no right answer to which approach is correct and I treat it as a judgment call.&lt;/p&gt;&lt;h4 id=&quot;quantity-over-quality&quot;&gt;Quantity over quality&lt;/h4&gt;&lt;p&gt;One common pattern I see is that new bloggers tend to “over-produce” some of their initial blog posts, especially for ideas they are exceptionally attached to. This is not necessarily a bad thing, but I usually advise against it. You don’t want to put all of your eggs in one basket and you should focus on writing more frequent and less ambitious posts rather than a few overly ambitious posts, especially when starting out.&lt;/p&gt;&lt;p&gt;One reason why is that people tend to be poor judges of their own work, in my experience. Not only do you not know when inspiration will strike, but you will also not know &lt;em&gt;when inspiration has truly struck&lt;/em&gt;. There will be some times when you think something you produce is your masterpiece, your magnum opus, and other people are like “meh”. There will be other times when you put out something that feels half-baked or like a shitpost and other people will tell you that it changed their life.&lt;/p&gt;&lt;p&gt;That’s not to say that you shouldn’t focus on quality at all. Quite the opposite: the quality of your writing will improve more quickly if you write more often instead of polishing a few posts to death. You’ll get more frequent feedback from a wider audience if you keep putting your work out there regularly.&lt;/p&gt;&lt;p&gt;Great writing is learning how to build empathy for the reader and you can’t do that if you’re not regularly interacting with your audience. The more they read your work and provide feedback the better your intuition will get for what your audience needs to hear and how your writing will resonate with them. As time goes on your favorite posts will become more likely to succeed, but there will always remain a substantial element of luck to the process.&lt;/p&gt;&lt;h4 id=&quot;constraints&quot;&gt;Constraints&lt;/h4&gt;&lt;p&gt;Writing is hard, even for experienced writers like me, because writing is so underconstrained.&lt;/p&gt;&lt;p&gt;Programming is so much easier than writing for me because I get:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Tooling support&lt;/p&gt;&lt;p&gt;… such as an IDE, syntax highlighting or type-checker&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Fast feedback loop&lt;/p&gt;&lt;p&gt;For many application domains I can run my code to see if it works or not&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Clearer demonstration of value&lt;/p&gt;&lt;p&gt;I can see firsthand that my program actually does what I created it to do&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Writing, on the other hand, is orders of magnitude more freeform and nebulous than code. There are so many ways to say or present the exact same idea, because you can vary things like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Choice of words&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Conceptual approach&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Sentence / paragraph structure&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Scope&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Diagrams / figures&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Examples&lt;/p&gt;&lt;p&gt;Oh, don’t get me started on examples. I can spend hours or even days mulling over which example to use that is &lt;em&gt;just right&lt;/em&gt;. A &lt;strong&gt;LOT&lt;/strong&gt; of my posts in my drafts have run aground on the choice of example.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There also isn’t a best way to present an idea. One way of explaining things will resonate with some people better than others.&lt;/p&gt;&lt;p&gt;On top of that the feedback loop is sloooooow. Soliciting reviews from others can take days. Or you can publish blind and hope that your own editing process and intution is good enough.&lt;/p&gt;&lt;p&gt;The way I cope is to add artificial constraints to my writing, especially when first learning to write. I came up with a very opinionated way of structuring everything and saying everything so that I could focus more on &lt;em&gt;what&lt;/em&gt; I wanted to say instead of &lt;em&gt;how&lt;/em&gt; to say it.&lt;/p&gt;&lt;p&gt;The constraints I created for myself touched upon many of the above freeform aspects of writing. Here are some examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Choice of words&lt;/p&gt;&lt;p&gt;I would use a very limited vocabulary for common writing tasks. In fact, I still do in some ways. For example, I still use “For example,” when introducing an example, a writing habit which still lingers to this day.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Sentence / paragraph structure&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.americanscientist.org/blog/the-long-view/the-science-of-scientific-writing&quot;&gt;The Science of Scientific Writing&lt;/a&gt; is an excellent resource for how to improve writing structure in order to aid reader comprehension.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Diagrams / figures&lt;/p&gt;&lt;p&gt;I created ASCII diagrams for all of my technical writing. It was extremely low-tech, but it got the job done.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Examples&lt;/p&gt;&lt;p&gt;I had to have three examples. Not two. Not four. Three is the magic number.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In particular, one book stood out as exceptionally helpful in this regard:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548&quot;&gt;On Writing Well: The Classic Guide to Writing Nonfiction&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The above book provides several useful rules of thumb for writing that new writers can use as constraints to help better focus their writing. You might notice that this post touches only very lightly on the technical aspects of authoring and editing writing, and that’s because all of my advice would boil down to: “go read that book”.&lt;/p&gt;&lt;p&gt;As time went on and I got more comfortable I began to deviate from these rules I had created for myself and then I could more easily find my own “voice” and writing style. However, having those guardrails in place made a big difference to me early on to keep my writing on track.&lt;/p&gt;&lt;h4 id=&quot;stamina&quot;&gt;Stamina&lt;/h4&gt;&lt;p&gt;Sometimes you need to write something over an extended period of time, long after you are motivated to do so. Perhaps this because you are obligated to do so, such as writing a blog post for work.&lt;/p&gt;&lt;p&gt;My trick to sustaining interest in posts like these is to always begin each writing session by editing what I’ve written so far. This often puts me back in the same frame of mind that I had when I first wrote the post and gives me the momentum I need to continue writing.&lt;/p&gt;&lt;h4 id=&quot;editing&quot;&gt;Editing&lt;/h4&gt;&lt;p&gt;Do not underestimate the power of editing your writing! Editing can easily transform a mediocre post into a great post.&lt;/p&gt;&lt;p&gt;However, it’s hard to edit the post after you’re done writing. By that point you’re typically eager to publish to get it off your plate, but you should really take time to still edit what you’ve written. My rule of thumb is to sleep on a post at least once and edit in the morning before I publish, but if I have extra stamina then I keep editing each day until I feel like there’s nothing left to edit.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;I’d like to conclude this post by acknowledging the blog that inspired me to start blogging:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://blog.sigfpe.com/&quot;&gt;A neighborhood of infinity&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That blog got me excited about the intersection of mathematics and programming and I’ve been blogging ever since trying to convey the same sense of wonder I got from reading about that.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-03T23:41:42Z",
"URL":" https://www.haskellforall.com/2021/10/advice-for-aspiring-bloggers.html "
}
,
{
"title":"Philip Wadler: Optics vs Lenses, Operationally",
"textBody":"&lt;p&gt; &lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://www.brunogavranovic.com/images/optic_comp.gif&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;378&quot; src=&quot;https://www.brunogavranovic.com/images/optic_comp.gif&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A great &lt;a href=&quot;https://www.brunogavranovic.com/posts/2022-02-10-optics-vs-lenses-operationally.html&quot;&gt;blog post&lt;/a&gt; by Bruno GavranoviÄ‡, with a clear and beautifully illustrated explanation of why lenses and optics are equivalent denotationally, but optics are superior operationally. There is also a &lt;a href=&quot;https://www.youtube.com/watch?v=BNHVySBzR3M&quot;&gt;video&lt;/a&gt; of a corresponding talk.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-03T22:01:57Z",
"URL":" https://wadler.blogspot.com/2022/03/optics-vs-lenses-operationally.html "
}
,
{
"title":"Gabriel Gonzalez: Applicatives should usually implement Semigroup and Monoid",
"textBody":"lift-monoid            &lt;p&gt;The gist of this post is that any type constructor &lt;code&gt;F&lt;/code&gt; that implements &lt;code&gt;Applicative&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… should &lt;em&gt;usually&lt;/em&gt; also implement the following &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;F&lt;/span&gt; a) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; liftA2 (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;F&lt;/span&gt; a) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which one can also derive using &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Monoid.html#t:Ap&quot;&gt;the &lt;code&gt;Data.Monoid.Ap&lt;/code&gt; type&lt;/a&gt;, which was created for this purpose:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt;) via (&lt;span class=&quot;dt&quot;&gt;Ap&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;F&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since each type constructor that implements &lt;code&gt;Monad&lt;/code&gt; also implements &lt;code&gt;Applicative&lt;/code&gt;, this recommendation also applies for all &lt;code&gt;Monad&lt;/code&gt;s, too.&lt;/p&gt;&lt;h4 id=&quot;why-are-these-instances-useful&quot;&gt;Why are these instances useful?&lt;/h4&gt;&lt;p&gt;The above instances come in handy in conjunction with utilities from Haskell’s standard library that work with &lt;code&gt;Monoid&lt;/code&gt;s.&lt;/p&gt;&lt;p&gt;For example, a common idiom I see when doing code review is something like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    …&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; process ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        process a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            …&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; bs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; inputs ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        inputs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; …&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    bss &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mapM&lt;/span&gt; process inputs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;concat&lt;/span&gt; bss)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but if you implemented the suggested &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances then you could replace this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    bss &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mapM&lt;/span&gt; process inputs&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;concat&lt;/span&gt; bss)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… with this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;foldMap&lt;/span&gt; process inputs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These instances also come in handy when you need to supply an empty action or empty handler for some callback.&lt;/p&gt;&lt;p&gt;For example, the &lt;code&gt;lsp&lt;/code&gt; package provides a &lt;code&gt;sendRequest&lt;/code&gt; utility which has the following type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sendRequest&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MonadLsp&lt;/span&gt; config f&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SServerMethod&lt;/span&gt; m&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MessageParams&lt;/span&gt; m&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ResponseError&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;ResponseResult&lt;/span&gt; m) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ())&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ This is the callback function&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f (&lt;span class=&quot;dt&quot;&gt;LspId&lt;/span&gt; m)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I won’t go into too much detail about what the type means other than to point out that this function lets a language server send a request to the client and then execute a callback function when the client responds. The callback function you provide has type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ResponseError&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;ResponseResult&lt;/span&gt; m) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sometimes you’re not interested in the client’s response, meaning that you want to supply an empty callback that does nothing. Well, if the type constructor &lt;code&gt;f&lt;/code&gt; implements the suggested &lt;code&gt;Monoid&lt;/code&gt; instance then the empty callback is: &lt;code&gt;mempty&lt;/code&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Error&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;ResponseResult&lt;/span&gt; m) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and this works because of the following three &lt;code&gt;Monoid&lt;/code&gt; instances that are automatically chained together by the compiler:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- The suggested Monoid instance that `f` would ideally provide&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (f a)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, certain &lt;code&gt;Applicative&lt;/code&gt;/&lt;code&gt;Monad&lt;/code&gt;-related utilites become special cases of simpler &lt;code&gt;Monoid&lt;/code&gt;-related utilities once you have this instance. For example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You can sometimes replace &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Foldable.html#v:traverse_&quot;&gt;&lt;code&gt;traverse_&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Control-Monad.html#v:mapM_&quot;&gt;&lt;code&gt;mapM_&lt;/code&gt;&lt;/a&gt; with the simpler &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Foldable.html#v:foldMap&quot;&gt;&lt;code&gt;foldMap&lt;/code&gt;&lt;/a&gt; utility&lt;/p&gt;&lt;p&gt;Specifically, if you specialize the type of &lt;code&gt;traverse_&lt;/code&gt; / &lt;code&gt;mapM_&lt;/code&gt; to:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; t, &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;mapM_&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; t, &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;       f) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then &lt;code&gt;foldMap&lt;/code&gt; behaves the same way when the &lt;code&gt;Applicative&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; implements the suggested instances:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;foldMap&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; t, &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; m) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You can sometimes replace &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Foldable.html#v:sequenceA_&quot;&gt;sequenceA_&lt;/a&gt; / &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Control-Monad.html#v:sequence_&quot;&gt;&lt;code&gt;sequence_&lt;/code&gt;&lt;/a&gt; with the simpler &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Foldable.html#v:fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; utility&lt;/p&gt;&lt;p&gt;Specifically, if you specialize the type of &lt;code&gt;sequenceA_&lt;/code&gt; / &lt;code&gt;sequence_&lt;/code&gt; to:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;sequenceA_ ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; t, &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; t (f ()) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;sequence_&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;  ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; t, &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt;       f) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; t (f ()) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then &lt;code&gt;fold&lt;/code&gt; behaves the same way when the &lt;code&gt;Applicative&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; implements the’ suggested instances:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fold ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; t, &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; m) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; t m &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You can sometimes replace &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Control-Monad.html#v:replicateM_&quot;&gt;&lt;code&gt;replicateM_&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Semigroup.html#v:mtimesDefault&quot;&gt;&lt;code&gt;mtimesDefault&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Specifically, if you specialize the type of &lt;code&gt;replicateM_&lt;/code&gt; to:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb15-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;replicateM_ ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f () &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then &lt;code&gt;mtimesDefault&lt;/code&gt; behaves the same way when the &lt;code&gt;Applicative&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; implements the suggested instances:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb16-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;mtimesDefault ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; m &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And you also gain access to new functionality which doesn’t currently exist in &lt;code&gt;Control.Monad&lt;/code&gt;. For example, the following specializations hold when &lt;code&gt;f&lt;/code&gt; implements the suggested instances:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- This specialization is similar to the original `foldMap` example&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fold ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; [f [b]] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f [b]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- You can combine two handlers into a single handler&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;(&amp;lt;&amp;gt;) ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ()) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f ())&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- a.k.a. `pass` in the `relude` package&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb17-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;when-should-one-not-do-this&quot;&gt;When should one not do this?&lt;/h4&gt;&lt;p&gt;You sometimes don’t want to implement the suggested &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances when other law-abiding instances are possible. For example, sometimes the &lt;code&gt;Applicative&lt;/code&gt; type constructor permits a different &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instance.&lt;/p&gt;&lt;p&gt;The classic example is lists, where the &lt;code&gt;Semigroup&lt;/code&gt; / &lt;code&gt;Monoid&lt;/code&gt; instances behave like list concatenation. Also, most of the exceptions that fall in this category are list-like, in the sense that they use the &lt;code&gt;Semigroup&lt;/code&gt; / &lt;code&gt;Monoid&lt;/code&gt; instances to model some sort of element-agnostic concatenation.&lt;/p&gt;&lt;p&gt;I view these “non-lifted” &lt;code&gt;Monoid&lt;/code&gt; instances as a missed opportunity, because these same type constructors will typically also implement the exact same behavior for their &lt;code&gt;Alternative&lt;/code&gt; instance, too, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SomeListLikeType&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    empty &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb18-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which means that you have two instances doing the exact same thing, when one of those instances could have potentially have been used to support different functionality. I view the &lt;code&gt;Alternative&lt;/code&gt; instance as the more natural instance for element-agnostic concatenation since that is the only behavior the &lt;code&gt;Alternative&lt;/code&gt; class signature permits. By process of elimination, the &lt;code&gt;Monoid&lt;/code&gt; and &lt;code&gt;Semigroup&lt;/code&gt; instances should in principle be reserved for the “lifted” implementation suggested by this post.&lt;/p&gt;&lt;p&gt;However, I also understand it would be far too disruptive at this point to change these list-like &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances and expectations around them, so I think the pragmatic approach is to preserve the current Haskell ecosystem conventions, even if they strike me as less elegant.&lt;/p&gt;&lt;h4 id=&quot;why-not-use-ap-exclusively&quot;&gt;Why not use &lt;code&gt;Ap&lt;/code&gt; exclusively?&lt;/h4&gt;&lt;p&gt;The most commonly cited objection to these instances is that you technically don’t need to add these lifted &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances because you can access them “on the fly” by wrapping expressions in the &lt;code&gt;Ap&lt;/code&gt; newtype before combining them.&lt;/p&gt;&lt;p&gt;For example, even if we didn’t have a &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instance, we could still write our original example using &lt;code&gt;foldMap&lt;/code&gt;, albeit with more newtype-coercion boilerplate:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb19-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; getAp (&lt;span class=&quot;fu&quot;&gt;foldMap&lt;/span&gt; process (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ap&lt;/span&gt; inputs))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or perhaps using the &lt;code&gt;newtype&lt;/code&gt; package on Hackage:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb20-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ala &lt;span class=&quot;dt&quot;&gt;Ap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;foldMap&lt;/span&gt; process inputs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solution is not convincing to me for a few reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;It’s unergonomic in general&lt;/p&gt;&lt;p&gt;There are some places where &lt;code&gt;Ap&lt;/code&gt; works just fine (such as in conjunction with &lt;code&gt;deriving via&lt;/code&gt;), but typically using &lt;code&gt;Ap&lt;/code&gt; directly within term-level code is a solution worse than the original problem; the newtype wrapping and unwrapping boilerplate more than counteracts the ergonomic improvements from using the &lt;code&gt;Semigroup&lt;/code&gt; / &lt;code&gt;Monoid&lt;/code&gt; instances.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;In my view, there’s no downside to adding &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances&lt;/p&gt;&lt;p&gt;… when only one law-abiding implementation of these instances is possible. See the caveat in the previous section.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;This line of reasoning would eliminate many other useful instances&lt;/p&gt;&lt;p&gt;For example, one might remove the &lt;code&gt;Applicative&lt;/code&gt; instance for list since it’s not the only possible instance and you could in theory always use a &lt;code&gt;newtype&lt;/code&gt; to select the desired instance.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;proof-of-laws&quot;&gt;Proof of laws&lt;/h4&gt;&lt;p&gt;For completeness, I should also mention that the suggested &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; instances are guaranteed to always be law-abiding instances. You can find the proof in Appendix B of my &lt;a href=&quot;https://www.haskellforall.com/2014/07/equational-reasoning-at-scale.html&quot;&gt;Equational reasoning at scale&lt;/a&gt; post.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-03T19:56:51Z",
"URL":" https://www.haskellforall.com/2022/03/applicatives-should-usually-implement.html "
}
,
{
"title":"Tweag I/O: Improving Criterion.rs",
"textBody":"&lt;p&gt;TLDR; Benchmarking in Rust is now faster, easier, and runs in your browser.&lt;/p&gt; &lt;p&gt;My name is David and for the past three months, Tweag has generously sponsored my work on criterion.rs&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://www.tweag.io/rss.xml#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Criterion.rs is a widely used (with nearly 1.4 million downloads in the last 90 days) benchmarking library for the Rust programming language which helps you measure the performance of your code and was inspired by its Haskell namesake&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://www.tweag.io/rss.xml#fn-2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt; &lt;p&gt;I’m a heavy user of criterion.rs as well as one of its maintainers, and three particular pain points have been sticking out like a sore thumb to me. These pain points affect a significant number of people while still being relatively easy to fix, making them, in my opinion, a great fit for Tweag’s Fellowship&lt;sup id=&quot;fnref-3&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://www.tweag.io/rss.xml#fn-3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; programme which aims to fund Open Source contributions. Luckily Tweag thought the same and sent me on a three month journey to solve the three pain points:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Running benchmarks takes too much time.&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Comparing results is awkward.&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;No first-class WASM support.&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;trading-accuracy-for-speed-quick-mode&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#trading-accuracy-for-speed-quick-mode&quot;&gt;&lt;/a&gt;Trading accuracy for speed: Quick Mode&lt;/h2&gt; &lt;p&gt;Benchmarking is notoriously difficult to get right and criterion.rs takes many precautions to tease every bit of signal out of very noisy data. Unfortunately, this means spending at least 8 seconds per benchmark which adds up when you have hundreds of benchmarks. This problem is not a new one, though, and there are many ways to sacrifice a little accuracy for better speed. In particular, the tasty-bench&lt;sup id=&quot;fnref-4&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://www.tweag.io/rss.xml#fn-4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; library uses an approach that terminates early when it deems the results to be sufficiently reliable. This seems to work great in tasty-bench so I’ve implemented the same in criterion.rs.&lt;/p&gt; &lt;p&gt;So, how much faster is the new quick-mode? Well, using the &lt;code class=&quot;language-text&quot;&gt;hex&lt;/code&gt; crate&lt;sup id=&quot;fnref-5&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://www.tweag.io/rss.xml#fn-5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; for testing, running in quick mode is 50 times faster:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;code class=&quot;language-text&quot;&gt;cargo bench --bench=hex&lt;/code&gt;&lt;/th&gt; &lt;th&gt;&lt;code class=&quot;language-text&quot;&gt;cargo bench --bench=hex -- --quick&lt;/code&gt;&lt;/th&gt; &lt;th&gt;Speed-up&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;92.9 s&lt;/td&gt; &lt;td&gt;1.8 s&lt;/td&gt; &lt;td&gt;~50x&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Running benchmarks 50 times faster sounds great but it would be useless if the results are completely inaccurate. Let’s compare the two sets of results and see how much they differ. In the table below, the absolute runtime and relative performance are given for each benchmark in both &lt;code class=&quot;language-text&quot;&gt;normal&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;quick&lt;/code&gt; mode:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;group                            normal                      quick -----                            ------                      ----- faster_hex_decode                1.00     41.2±0.44µs        1.00     41.1±0.06µs faster_hex_decode_fallback       1.00      9.9±0.05µs        1.00      9.9±0.00µs faster_hex_decode_unchecked      1.00      9.9±0.05µs        1.00      9.9±0.02µs faster_hex_encode                1.01      8.2±0.11µs        1.00      8.1±0.01µs faster_hex_encode_fallback       1.00     10.2±0.06µs        1.00     10.2±0.01µs hex_decode                       1.00     90.4±0.49µs        1.00     90.3±0.07µs hex_encode                       1.02     66.6±0.36µs        1.00     65.3±0.08µs rustc_hex_decode                 1.00     90.3±0.37µs        1.00     90.3±0.12µs rustc_hex_encode                 1.00     66.5±0.69µs        1.01     67.1±0.12µs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;As you can see, the difference between the two modes is tiny and falls within the normal variance on the computer I’m using. Does this mean you can rely on quick-mode always being accurate? No, unfortunately not. There’s no free lunch and quick-mode makes your benchmarks much more susceptible to frequency-scaling, heat throttling, context switches, and JIT/interpreter overhead.&lt;/p&gt; &lt;p&gt;To summarise, quick-mode can significantly shorten your iteration time but you should be aware of the trade-offs/pitfalls.&lt;/p&gt; &lt;h2 id=&quot;tabulating-and-comparing-results&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#tabulating-and-comparing-results&quot;&gt;&lt;/a&gt;Tabulating and Comparing Results&lt;/h2&gt; &lt;p&gt;Notice how the results in the &lt;a href=&quot;https://www.tweag.io/rss.xml##trading-accuracy-for-speed-quick-mode&quot;&gt;previous section&lt;/a&gt; are neatly tabulated? Yeah, that is actually a new feature. Previously, comparing results would look like this:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;faster_hex_decode       time:   [41.061 us 41.083 us 41.105 us]                         change: [-0.2499% +0.0044% +0.2702%] (p = 0.67 &amp;gt; 0.05)                         No change in performance detected. Found 5 outliers among 100 measurements (5.00%)   2 (2.00%) high mild   3 (3.00%) high severe  [snipped 56 lines]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This format isn’t all that readable and it’s difficult to quickly get an idea of how two sets of results differ. &lt;a href=&quot;https://github.com/BurntSushi&quot;&gt;BurntSushi&lt;/a&gt; was so annoyed by this that he wrote a tool for formatting results in a more concise manner: &lt;a href=&quot;https://github.com/BurntSushi/critcmp&quot;&gt;critcmp&lt;/a&gt;. This tool is excellent but few people know about it, so, with the author’s permission, I’ve integrated it into criterion.rs and documented it in the user’s guide.&lt;/p&gt; &lt;h2 id=&quot;first-class-wasm-support&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#first-class-wasm-support&quot;&gt;&lt;/a&gt;First-class WASM support&lt;/h2&gt; &lt;p&gt;Rust can easily be compiled to WebAssembly and executed in interesting environments such as wasmer, nodejs, or even a browser. The performance in these environments can be wildly different from native execution, though, and predicting how fast your code will run is nearly impossible.&lt;/p&gt; &lt;p&gt;The solution, of course, is to compile criterion.rs to WebAssembly and measure the performance empirically. While this was easier said than done, the WASM support is finally complete and it works nearly out of the box. The only requirement is to disable criterion’s default features as some of them (eg. &lt;code class=&quot;language-text&quot;&gt;rayon&lt;/code&gt;) are not supported on WASM. To do this, simply modify your &lt;code class=&quot;language-text&quot;&gt;Cargo.toml&lt;/code&gt; file like this:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;[dev-dependencies] &lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;criterion = &quot;0.4&quot; &lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;criterion = { version = &quot;0.4&quot;, default-features = false }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;With that out of the way, we can now start benchmarking a wide range of WebAssembly environments. Let’s compare a native binary on my AMD Zen 2, &lt;a href=&quot;https://wasmer.io&quot;&gt;wasmer&lt;/a&gt;, &lt;a href=&quot;https://wasmtime.dev&quot;&gt;wasmtime&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;nodejs&lt;/a&gt;, &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;firefox&lt;/a&gt;, and &lt;a href=&quot;https://www.chromium.org/chromium-projects/&quot;&gt;chromium&lt;/a&gt;. Note: These results are purely indicative and should be taken with a pinch of salt. Your mileage may vary and should do your own benchmarking to draw your own conclusions. That being said, let’s see the results for the &lt;code class=&quot;language-text&quot;&gt;hex&lt;/code&gt; crate:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;hex_decode ---------- native       1.00     244.6±2.36µs       ? ?/sec firefox      1.66    405.7±14.22µs       ? ?/sec wasmer       1.72     421.4±9.65µs       ? ?/sec wasmtime     1.73     423.0±3.00µs       ? ?/sec nodejs       2.00     490.3±3.49µs       ? ?/sec chromium     2.81    688.5±12.23µs       ? ?/sec  hex_encode ---------- native       1.00      69.2±0.40µs       ? ?/sec wasmtime     1.18      81.7±0.38µs       ? ?/sec wasmer       1.46     100.9±1.22µs       ? ?/sec nodejs       2.20     152.5±1.93µs       ? ?/sec firefox      3.25     224.8±7.53µs       ? ?/sec chromium     4.08     282.7±4.19µs       ? ?/sec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The native executable is the fastest but not by much. I’m too often surprised by how relatively efficient WASM can be.&lt;/p&gt; &lt;p&gt;There are a bunch of pitfalls that can cause you grief when benchmarking WASM code. For one, you definitely have to avoid using quick-mode when targeting WASM. JIT compilers benefit enormously from a warm-up phase and you’re all but guaranteed to get incorrect results in quick-mode. Furthermore, browser support for the WASI standard is not 100% robust and you may have to reload your browser window from time to time. All in all, the vision for running Rust in your browser is there but the implementations are lacking a bit behind.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor before&quot; href=&quot;https://www.tweag.io/rss.xml#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt; &lt;p&gt;PRs for solving the three pain points (faster benchmarks, comparing results, WASM support) have been submitted and will hopefully make it into the next release of criterion.rs. If you want to test these features early, you can do so by depending directly on the release branch:&lt;/p&gt; &lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;[dev-dependencies] &lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;criterion = &quot;0.3&quot; &lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;criterion = { git = &quot;https://github.com/bheisler/criterion.rs&quot;, branch = &quot;version-0.4&quot; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Before the release of &lt;code class=&quot;language-text&quot;&gt;criterion-0.4&lt;/code&gt;, documentation can be found here: &lt;a href=&quot;https://github.com/bheisler/criterion.rs/blob/version-0.4/book/src/user_guide/quick_mode.md&quot;&gt;quick-mode&lt;/a&gt;, &lt;a href=&quot;https://github.com/bheisler/criterion.rs/blob/version-0.4/book/src/user_guide/tabulating_results.md&quot;&gt;tabulating results&lt;/a&gt;, and &lt;a href=&quot;https://github.com/bheisler/criterion.rs/blob/version-0.4/book/src/user_guide/wasi.md&quot;&gt;WASM support&lt;/a&gt;. After the upcoming release, those pages will be available in the user’s guide.&lt;/p&gt; &lt;p&gt;I’d like to thank Tweag for giving me the freedom to work on what I felt was important, and I’d like to thank Ilya and Yann for guiding me throughout this process. I can wholeheartedly recommend the Tweag Fellowship program.&lt;/p&gt; &lt;div class=&quot;footnotes&quot;&gt; &lt;hr /&gt; &lt;ol&gt; &lt;li id=&quot;fn-1&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/bheisler/criterion.rs&quot;&gt;https://github.com/bheisler/criterion.rs&lt;/a&gt;&lt;/p&gt; &lt;a class=&quot;footnote-backref&quot; href=&quot;https://www.tweag.io/rss.xml#fnref-1&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; &lt;li id=&quot;fn-2&quot;&gt; &lt;p&gt;&lt;a href=&quot;http://www.serpentine.com/criterion/&quot;&gt;http://www.serpentine.com/criterion/&lt;/a&gt;&lt;/p&gt; &lt;a class=&quot;footnote-backref&quot; href=&quot;https://www.tweag.io/rss.xml#fnref-2&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; &lt;li id=&quot;fn-3&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://boards.greenhouse.io/tweag/jobs/4638654002&quot;&gt;https://boards.greenhouse.io/tweag/jobs/4638654002&lt;/a&gt;&lt;/p&gt; &lt;a class=&quot;footnote-backref&quot; href=&quot;https://www.tweag.io/rss.xml#fnref-3&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; &lt;li id=&quot;fn-4&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Bodigrim/tasty-bench&quot;&gt;https://github.com/Bodigrim/tasty-bench&lt;/a&gt;&lt;/p&gt; &lt;a class=&quot;footnote-backref&quot; href=&quot;https://www.tweag.io/rss.xml#fnref-4&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; &lt;li id=&quot;fn-5&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://crates.io/crates/hex&quot;&gt;https://crates.io/crates/hex&lt;/a&gt;&lt;/p&gt; &lt;a class=&quot;footnote-backref&quot; href=&quot;https://www.tweag.io/rss.xml#fnref-5&quot;&gt;↩&lt;/a&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-03T00:00:00Z",
"URL":" https://tweag.io/blog/2022-03-03-criterion-rs/ "
}
,
{
"title":"Gabriel Gonzalez: What is a monad morphism (in Haskell)?",
"textBody":"monad-morphism    &lt;p&gt;This post briefly explains what a monad morphism is in the context of Haskell, since I wanted a succinct explanation that I could refer to for other posts. In order to keep things short, I will assume that you are already comfortable with Haskell’s &lt;code&gt;Monad&lt;/code&gt; class and &lt;code&gt;do&lt;/code&gt; notation.&lt;/p&gt;&lt;p&gt;A monad morphism is:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;… a natural transformation&lt;/li&gt;&lt;li&gt;… that obeys two laws&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… so first I’ll explain what a natural transformation is followed by an explanation of the two monad morphism laws.&lt;/p&gt;&lt;h4 id=&quot;natural-transformations&quot;&gt;Natural transformations&lt;/h4&gt;&lt;p&gt;A natural transformation in Haskell is a function whose type can be expressed in terms of the following type-level operator:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RankNTypes    #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb1-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; m &lt;span class=&quot;op&quot;&gt;~&amp;gt;&lt;/span&gt; n &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; m a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, a natural transformation is a function that converts a value of type &lt;code&gt;m a&lt;/code&gt; into a value of type &lt;code&gt;n a&lt;/code&gt; such that it works for any possible type &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Here are some examples of natural transformations in the wild whose types could be written in terms of the above &lt;code&gt;(~&amp;gt;)&lt;/code&gt; type-level operator:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Control.Error.Util.hush&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; e a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- Either e ~&amp;gt; Maybe&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Data.Maybe.listToMaybe&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; [a] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- [] ~&amp;gt; Maybe&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;UnliftIO.Exception.fromEither&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Exception&lt;/span&gt; e &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; e a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- Exception e =&amp;gt; Either e ~&amp;gt; IO&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Control.Monad.State.UnificationExtras.liftReaderT&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; m &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ReaderT&lt;/span&gt; e m a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; e m a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb2-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- Monad m =&amp;gt; ReaderT e m ~&amp;gt; StateT e m&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;laws&quot;&gt;Laws&lt;/h4&gt;&lt;p&gt;Now that we’ve defined what a natural transformation is we can define what a monad morphism is.&lt;/p&gt;&lt;p&gt;A monad morphism is a special case of a natural transformation (which we will denote &lt;code&gt;nat&lt;/code&gt;) that satisfies the following two laws, known as the monad morphism laws:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat (&lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb3-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat (&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; m; f x }) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; nat m; nat (f x) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, a monad morphism “distributes over” &lt;code&gt;Monad&lt;/code&gt; operations, leaving them undisturbed, which is a useful guarantee.&lt;/p&gt;&lt;p&gt;Three of the above example natural transformations (&lt;code&gt;hush&lt;/code&gt;, &lt;code&gt;fromEither&lt;/code&gt;, and &lt;code&gt;liftReaderT&lt;/code&gt;) are also monad morphisms, since they satisfy those two monad morphism laws.  In contrast, &lt;code&gt;listToMaybe&lt;/code&gt; is an example of a natural transformation that is not a monad morphism.&lt;/p&gt;&lt;h4 id=&quot;example-proof-of-laws&quot;&gt;Example proof of laws&lt;/h4&gt;&lt;p&gt;Here is an example of how you would prove the monad morphism laws for the &lt;code&gt;hush&lt;/code&gt; function, which is defined like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;hush ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; e a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;hush (&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt;  _) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb4-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;hush (&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’ll begin by proving the first monad morphism law:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;hush (&lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Add a type annotation to note that `hush` only accepts an `Either` as input&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (&lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; e a)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- return x :: Either e a = Right x&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `hush`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- return x :: Maybe a = Just x&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Drop the type annotation&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb5-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and here is how we prove the second monad morphism law:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;hush (&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; m; f x })&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Desugar `do` notation&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;hush (m &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- There are two possible cases: `m = Left l` or `m = Right r`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;↳ &lt;span class=&quot;co&quot;&gt;-- Case: `m = Left l`:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;gt;&amp;gt;=)` for `Either e` `Monad`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; l)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Definition of `hush`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;gt;&amp;gt;=)` for `Maybe` `Monad`, but in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; hush (f x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Definition of `hush`, but in reverse  &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; l) &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; hush (f x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Resugar `do` notation&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; l); hush (f x) }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- `m = Left l` in this case&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; hush m; hush (f x) }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;↳ &lt;span class=&quot;co&quot;&gt;-- Case: `m = Right r`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-30&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-30&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-31&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-31&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-32&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-32&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;gt;&amp;gt;=)` for `Either e` `Monad`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-33&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-33&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (f r)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-34&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-34&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-35&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-35&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;gt;&amp;gt;=)` for `Maybe` `Monad`, but in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-36&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-36&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; hush (f x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-37&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-37&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-38&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-38&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Definition of `hush`, but in reverse&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-39&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-39&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; r) &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; hush (f x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-40&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-40&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-41&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-41&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Resugar `do` notation&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-42&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-42&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; hush (&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; r); hush (f x) }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-43&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-43&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-44&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-44&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- `m = Right r` in this case&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-45&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb6-45&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; hush m; hush (f x) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;rationale-behind-the-laws&quot;&gt;Rationale behind the laws&lt;/h4&gt;&lt;p&gt;The reason we choose those laws is because they are similar to the &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/The_Functor_class#The_functor_laws&quot;&gt;functor laws&lt;/a&gt; when viewed through the appropriate lens.&lt;/p&gt;&lt;p&gt;As a recap, the functor laws say that any implementation of Haskell’s &lt;code&gt;Functor&lt;/code&gt; class must obey these two laws:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; g&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb7-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the category theory notion of a functor is more general than the Haskell notion of a functor. Specifically, the more general notion of a functor lets you replace &lt;code&gt;(.)&lt;/code&gt; with any associative operator, meaning that the following law still holds:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb8-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; h &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (g &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; h)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and also lets you replace &lt;code&gt;id&lt;/code&gt; with any expression that is the identity of the corresponding &lt;code&gt;(.)&lt;/code&gt; operator, meaning that the following two laws still hold:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb9-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we allow ourselves to introduce more exotic analogs to &lt;code&gt;(.)&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; then we can similarly introduce more exotic analogs to &lt;code&gt;fmap&lt;/code&gt; that don’t fit into the mold of Haskell’s &lt;code&gt;Functor&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;A monad morphism is one such exotic analog to &lt;code&gt;fmap&lt;/code&gt;, where we:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;… substitute &lt;code&gt;(.)&lt;/code&gt; with the &lt;code&gt;(&amp;gt;=&amp;gt;)&lt;/code&gt; operator from &lt;code&gt;Control.Monad&lt;/code&gt;&lt;/li&gt;&lt;li&gt;… substitute &lt;code&gt;id&lt;/code&gt; with &lt;code&gt;return&lt;/code&gt; from the &lt;code&gt;Monad&lt;/code&gt; class&lt;/li&gt;&lt;li&gt;… substitute &lt;code&gt;fmap&lt;/code&gt; with &lt;code&gt;(nat .)&lt;/code&gt; where &lt;code&gt;nat&lt;/code&gt; is any monad morphism&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This works out because the &lt;code&gt;(&amp;gt;=&amp;gt;)&lt;/code&gt; operator is associative:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb10-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; g) &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; h &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; (g &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; h)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and &lt;code&gt;return&lt;/code&gt; is the identity of the &lt;code&gt;(&amp;gt;=&amp;gt;)&lt;/code&gt; operator:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb11-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… so if we restate the functor laws with those substitutions, we get:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) (f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; g) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) g&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb12-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and those are the monad morphism laws, just stated in a different way.&lt;/p&gt;&lt;p&gt;We can see the correspondence to the original monad morphism laws if we simplify things a bit. We’ll begin by simplifying the first equation to get back the original first monad morphism law:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) (f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; g) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) g&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Reparenthesize things, for clarity:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (f &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; g) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; f) &lt;span class=&quot;op&quot;&gt;&amp;gt;=&amp;gt;&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(&amp;gt;=&amp;gt;)`:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- f &amp;gt;=&amp;gt; g = \x -&amp;gt; f x &amp;gt;&amp;gt;= \y -&amp;gt; g y&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; f) x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g) y&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Apply both sides to `x`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g y)) x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; f) x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g) y&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-13&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-14&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(.)`:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-15&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-16&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (f . g) x = f (g x)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-17&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat ((\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g y) x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; nat (f x) &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; nat (g y)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-18&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-19&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- β-reduce&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-20&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat (f x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; nat (f x) &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; nat (g y)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-21&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-22&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Replace `f x` with `m`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-23&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat (m &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; nat m &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; nat (g y)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-24&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-25&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Resugar using `do` notation&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-26&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat (&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { y &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; m; g y }) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { y &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; nat m; nat (g y) }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-27&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-27&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-28&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-28&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Rename `y` to `x` and rename `g` to `f`, for consistency with original laws&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-29&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb13-29&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat (&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; m; f x }) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; { x &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; nat m; nat (f x) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, we can simplify the second equation to get back the original second monad morphism law:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Remove unnecessary parentheses&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Apply both sides to `x`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(nat &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;) x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-8&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-9&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `(.)`:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-10&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-11&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (f . g) x = f (g x)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-12&quot;&gt;&lt;a href=&quot;https://www.haskellforall.com/feeds/posts/default#cb14-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nat (&lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, the monad morphism laws are functor laws in disguise.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-02T02:25:08Z",
"URL":" https://www.haskellforall.com/2022/02/what-is-monad-morphism-in-haskell.html "
}
,
{
"title":"Chris Reade: Graphs, Kites and Darts",
"textBody":"&lt;h1 id=&quot;graphs-kites-and-darts&quot;&gt;Graphs, Kites and Darts&lt;/h1&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 1: Three Coloured Patches&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/threeshapessample.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 1: Three Coloured Patches&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;&lt;strong&gt;Non-periodic tilings with Penrose’s kites and darts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We continue our investigation of the tilings using Haskell with Haskell Diagrams. What is new is the introduction of a planar graph representation. This allows us to define more operations on finite tilings, in particular &lt;strong&gt;forcing&lt;/strong&gt; and &lt;strong&gt;composing&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Previously in &lt;a href=&quot;https://readerunner.wordpress.com/2021/03/20/diagrams-for-penrose-tiles/&quot;&gt;Diagrams for Penrose Tiles&lt;/a&gt; we implemented tools to create and draw finite patches of Penrose kites and darts (such as the samples depicted in figure 1). The code for this and for the new graph representation and tools described here can be found on GitHub &lt;a href=&quot;https://github.com/chrisreade/PenroseKiteDart&quot;&gt;https://github.com/chrisreade/PenroseKiteDart&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe the tiling operations it is convenient to work with the half-tiles: &lt;code&gt;LD&lt;/code&gt; (left dart), &lt;code&gt;RD&lt;/code&gt; (right dart), &lt;code&gt;LK&lt;/code&gt; (left kite), &lt;code&gt;RK&lt;/code&gt; (right kite) using a polymorphic type &lt;code&gt;HalfTile&lt;/code&gt; (defined in a module &lt;code&gt;HalfTile&lt;/code&gt;)&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; HalfTile rep   &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; LD rep &lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt; RD rep &lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt; LK rep &lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt; RK rep   &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;deriving&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Show&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Eq&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here &lt;code&gt;rep&lt;/code&gt; is a type variable for a representation to be chosen. For drawing purposes, we chose two-dimensional vectors (&lt;code&gt;V2 Double&lt;/code&gt;) and called these &lt;code&gt;Pieces&lt;/code&gt;.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; Piece &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; HalfTile &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;V2 Double&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The vector represents the join edge of the half tile (see figure 2) and thus the scale and orientation are determined (the other tile edges are derived from this when producing a diagram).&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 2: The (half-tile) pieces showing join edges (dashed) and origin vertices (red dots)&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/newpiecesfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 2: The (half-tile) pieces showing join edges (dashed) and origin vertices (red dots)&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Finite tilings or &lt;em&gt;patches&lt;/em&gt; are then lists of located pieces.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; Patch &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Located Piece&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Both &lt;code&gt;Piece&lt;/code&gt; and &lt;code&gt;Patch&lt;/code&gt; are made transformable so &lt;code&gt;rotate&lt;/code&gt;, and &lt;code&gt;scale&lt;/code&gt; can be applied to both and &lt;code&gt;translate&lt;/code&gt; can be applied to a &lt;code&gt;Patch&lt;/code&gt;. (Translate has no effect on a &lt;code&gt;Piece&lt;/code&gt; unless it is located.)&lt;/p&gt; &lt;p&gt;In &lt;a href=&quot;https://readerunner.wordpress.com/2021/03/20/diagrams-for-penrose-tiles/&quot;&gt;Diagrams for Penrose Tiles&lt;/a&gt; we also discussed the rules for legal tilings and specifically the problem of &lt;em&gt;incorrect tilings&lt;/em&gt; which are legal but get stuck so cannot continue to infinity. In order to create &lt;em&gt;correct tilings&lt;/em&gt; we implemented the &lt;code&gt;decompose&lt;/code&gt; operation on patches.&lt;/p&gt; &lt;p&gt;The vector representation that we use for drawing is not well suited to exploring properties of a patch such as neighbours of pieces. Knowing about neighbouring tiles is important for being able to reason about composition of patches (inverting a decomposition) and to find which pieces are determined (&lt;em&gt;forced&lt;/em&gt;) on the boundary of a patch.&lt;/p&gt; &lt;p&gt;However, the polymorphic type &lt;code&gt;HalfTile&lt;/code&gt; allows us to introduce our alternative graph representation alongside &lt;code&gt;Piece&lt;/code&gt;s.&lt;/p&gt; &lt;h1 id=&quot;tile-graphs&quot;&gt;Tile Graphs&lt;/h1&gt; &lt;p&gt;In the module &lt;code&gt;Tgraph&lt;/code&gt;, we have the new representation which treats half tiles as triangular faces of a planar graph – a &lt;code&gt;TileFace&lt;/code&gt; – by specialising &lt;code&gt;HalfTile&lt;/code&gt; with a triple of vertices (clockwise starting with the tile origin). For example&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;LD &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;       RK &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; Vertex &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Int &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; TileFace &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; HalfTile &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When we need to refer to particular vertices from a &lt;code&gt;TileFace&lt;/code&gt; we use &lt;code&gt;originV&lt;/code&gt; (the first vertex – red dot in figure 2), &lt;code&gt;oppV&lt;/code&gt; (the vertex at the opposite end of the join edge – dashed edge in figure 2), &lt;code&gt;wingV&lt;/code&gt; (the remaining vertex not on the join edge).&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;originV&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; oppV&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; wingV &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; TileFace &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Vertex&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Tgraphs&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;em&gt;Tile Graphs&lt;/em&gt; implementation uses a type &lt;code&gt;Tgraph&lt;/code&gt; which has a list of graph vertices and a list of tile faces.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt; vertices &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;                      &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; faces    &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;                      &lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;  &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;deriving&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Show&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, &lt;code&gt;fool&lt;/code&gt; (short for a fool’s kite) is a &lt;code&gt;Tgraph&lt;/code&gt; with 6 faces and 7 vertices, shown in figure 3.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;fool &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt; vertices &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;7&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;               &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; faces &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;RD &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;LD &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;RK &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;                         &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;LK &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;RK &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;LK &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;7&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;                         &lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;               &lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(The fool is also called an &lt;em&gt;ace&lt;/em&gt; in the literature)&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 3: fool&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/foolfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 3: &lt;code&gt;fool&lt;/code&gt;&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;With this representation we can investigate how composition works with whole patches. Figure 4 shows a twice decomposed sun on the left and a once decomposed sun on the right (both with vertex labels). In addition to decomposing the right graph to form the left graph, we can also compose the left graph to get the right graph.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 4: sunD2 and sunD&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/figsund2d.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 4: &lt;code&gt;sunD2&lt;/code&gt; and &lt;code&gt;sunD&lt;/code&gt;&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;After implementing composition, we also explore a &lt;em&gt;force&lt;/em&gt; operation and an &lt;em&gt;emplace&lt;/em&gt; operation to extend tilings.&lt;/p&gt; &lt;p&gt;There are some constraints we impose on &lt;code&gt;Tgraph&lt;/code&gt;s.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;No spurious vertices&lt;/em&gt;. Every vertex of a &lt;code&gt;Tgraph&lt;/code&gt; face must be one of the &lt;code&gt;Tgraph&lt;/code&gt; vertices and each of the &lt;code&gt;Tgraph&lt;/code&gt; vertices occurs in at least one of the &lt;code&gt;Tgraph&lt;/code&gt; faces.&lt;/li&gt; &lt;li&gt;&lt;em&gt;Connected&lt;/em&gt;. The collection of faces must be a single connected component.&lt;/li&gt; &lt;li&gt;&lt;em&gt;No crossing boundaries&lt;/em&gt;. By this we mean that vertices on the boundary are incident with exactly two boundary edges. The boundary consists of the edges between the &lt;code&gt;Tgraph&lt;/code&gt; faces and exterior region(s). This is important for adding faces.&lt;/li&gt; &lt;li&gt;&lt;em&gt;Tile connected&lt;/em&gt;. Roughly, this means that if we collect the faces of a &lt;code&gt;Tgraph&lt;/code&gt; by starting from any single face and then add faces which share an edge with those already collected, we get all the &lt;code&gt;Tgraph&lt;/code&gt; faces. This is important for drawing purposes.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In fact, if a &lt;code&gt;Tgraph&lt;/code&gt; is &lt;em&gt;connected&lt;/em&gt; with &lt;em&gt;no crossing boundaries&lt;/em&gt;, then it must be &lt;em&gt;tile connected&lt;/em&gt;. (We could define &lt;em&gt;tile connected&lt;/em&gt; to mean that the dual graph excluding exterior regions is connected.)&lt;/p&gt; &lt;p&gt;Figure 5 shows two excluded graphs which have crossing boundaries at 4 (left graph) and 13 (right graph). The left graph is still tile connected but the right is not tile connected (the two faces at the top right do not have an edge in common with the rest of the faces.)&lt;/p&gt; &lt;p&gt;Although we have allowed for &lt;code&gt;Tgraphs&lt;/code&gt; with holes (multiple exterior regions), we note that such holes cannot be created by adding faces one at a time without creating a crossing boundary. They can be created by removing faces from a &lt;code&gt;Tgraph&lt;/code&gt; without necessarily creating a crossing boundary.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; We are using &lt;em&gt;face&lt;/em&gt; as an abbreviation for half-tile face of a &lt;code&gt;Tgraph&lt;/code&gt; here, and we do not count the exterior of a patch of faces to be a face. The exterior can also be disconnected when we have holes in a patch of faces and the holes are not counted as faces either. In graph theory, the term &lt;em&gt;face&lt;/em&gt; would generally include these other regions, but we will call them &lt;em&gt;exterior regions&lt;/em&gt; rather than faces.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 5: A face-connected graph with crossing boundaries at 4, and a non face-connected graph&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/crossingbdryfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 5: A tile-connected graph with crossing boundaries at 4, and a non tile-connected graph&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;In addition to the constructor &lt;code&gt;Tgraph&lt;/code&gt; we also use&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;checkTgraph&lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which creates a &lt;code&gt;Tgraph&lt;/code&gt; from a list of faces, but also performs checks on the required properties of &lt;code&gt;Tgraph&lt;/code&gt;s. We can then remove or select faces from a &lt;code&gt;Tgraph&lt;/code&gt; and then use &lt;code&gt;checkTgraph&lt;/code&gt; to ensure the resulting &lt;code&gt;Tgraph&lt;/code&gt; still satisfies the required properties.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;selectFaces&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; removeFaces  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph selectFaces fcs g &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; checkTgraph &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;faces g `intersect` fcs&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; removeFaces fcs g &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; checkTgraph &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;faces g \\ fcs&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Edges and Directed Edges&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We do not explicitly record edges as part of a Tgraph, but calculate them as needed. Implicitly we are requiring&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;No spurious edges&lt;/em&gt;. The edges of a &lt;code&gt;Tgraph&lt;/code&gt; are the edges of the faces of the &lt;code&gt;Tgraph&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To represent edges, a pair of vertices (a,b) is regarded as a &lt;em&gt;directed&lt;/em&gt; edge from a to b. A list of such pairs will usually be regarded as a &lt;em&gt;directed&lt;/em&gt; edge list. In the special case that the list is symmetrically closed [(b,a) is in the list whenever (a,b) is in the list] we will refer to this as an &lt;em&gt;edge list&lt;/em&gt; rather than a directed edge list.&lt;/p&gt; &lt;p&gt;The following functions on &lt;code&gt;TileFace&lt;/code&gt;s all produce directed edges (going clockwise round a face).&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;  &lt;span style=&quot;color: green;&quot;&gt;-- join edge - dashed in figure 2&lt;/span&gt; joinE  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; TileFace &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;   &lt;span style=&quot;color: green;&quot;&gt;-- the short edge which is not a join edge&lt;/span&gt; shortE &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; TileFace &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;   &lt;span style=&quot;color: green;&quot;&gt;-- the long edge which is not a join edge&lt;/span&gt; longE  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; TileFace &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: green;&quot;&gt;-- all three directed edges clockwise from origin&lt;/span&gt; faceDedges &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; TileFace &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For the whole &lt;code&gt;Tgraph&lt;/code&gt;, we often want a list of all the directed edges of all the faces.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;graphDedges &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; graphDedges g &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; concatMap faceDedges &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;faces g&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because our graphs represent tilings they are planar (can be embedded in a plane) so we know that at most two faces can share an edge and they will have opposite directions of the edge. &lt;em&gt;No two faces can have the same directed edge&lt;/em&gt;. So from &lt;code&gt;graphDedges g&lt;/code&gt; we can easily calculate internal edges (edges shared by 2 faces) and boundary directed edges (directed edges round the external regions).&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;internalEdges&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; boundaryDedges &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The internal edges of &lt;code&gt;g&lt;/code&gt; are those edges which occur in both directions in &lt;code&gt;graphDedges g&lt;/code&gt;. The boundary directed edges of &lt;code&gt;g&lt;/code&gt; are the missing reverse directions in &lt;code&gt;graphDedges g&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We also refer to all the long edges of a &lt;code&gt;Tgraph&lt;/code&gt; (including kite join edges) as &lt;code&gt;phiEdges&lt;/code&gt; (both directions of these edges).&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;phiEdges &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is so named because, when drawn, these long edges are &lt;code&gt;phi&lt;/code&gt; times the length of the short edges (&lt;code&gt;phi&lt;/code&gt; being the golden ratio which is approximately 1.618).&lt;/p&gt; &lt;h1 id=&quot;drawing-tgraphs-patches-and-vpatches&quot;&gt;Drawing Tgraphs (Patches and VPatches)&lt;/h1&gt; &lt;p&gt;The module &lt;code&gt;GraphConvert&lt;/code&gt; contains functions to convert a &lt;code&gt;Tgraph&lt;/code&gt; to our previous vector representation (&lt;code&gt;Patch&lt;/code&gt;) defined in &lt;code&gt;TileLib&lt;/code&gt; so we can use the existing tools to produce diagrams.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;makePatch &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Patch  drawPatch &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Patch &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Diagram B &lt;span style=&quot;color: green;&quot;&gt;-- defined in module TileLib&lt;/span&gt;  drawGraph &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Diagram B drawGraph &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; drawPatch . makePatch&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, it is also useful to have an intermediate stage (a &lt;code&gt;VPatch&lt;/code&gt; = Vertex Patch) which contains both face (vertices) and vectors. This allows vertex labels to be drawn and for faces to be identified and retained/excluded after the vector information is calculated.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; VPatch  &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; VPatch &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;lVertices &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Located Vertex&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;                       &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;lHybrids &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Located Hybrid&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;                       &lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A &lt;code&gt;Vpatch&lt;/code&gt; has a list of located vertices and a list of located hybrids, where a &lt;code&gt;Hybrid&lt;/code&gt; is a &lt;code&gt;HalfTile&lt;/code&gt; with a dual representation of the face (vertices) and vector (join edge). We make &lt;code&gt;VPatch&lt;/code&gt; transformable so it can also be an argument type for &lt;code&gt;rotate&lt;/code&gt;, &lt;code&gt;translate&lt;/code&gt;, and &lt;code&gt;scale&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The conversion functions include&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;makeVPatch   &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VPatch dropVertices &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; VPatch &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Patch &lt;span style=&quot;color: green;&quot;&gt;-- discards vertex information&lt;/span&gt; drawVPatch   &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; VPatch &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Diagram B  &lt;span style=&quot;color: green;&quot;&gt;-- draws labels as well&lt;/span&gt;  drawVGraph   &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Diagram B drawVGraph &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; drawVPatch . makeVPatch&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;One consequence of using abstract graphs is that there is no unique predefined way to orient or scale or position the patch arising from a graph representation. Our implementation selects a particular join edge and aligns it along the x-axis (unit length for a dart, &lt;code&gt;phi&lt;/code&gt;length for a kite) and tile-connectedness ensures the rest of the patch can be calculated from this.&lt;/p&gt; &lt;p&gt;We also have functions to re-orient a &lt;code&gt;Vpatch&lt;/code&gt; and lists of &lt;code&gt;VPatch&lt;/code&gt;s using chosen pairs of vertices. [Simply doing rotations on the final diagrams can cause problems if these include vertex labels. We do not, in general, want to rotate the labels – so we need to orient the &lt;code&gt;Vpatch&lt;/code&gt; before converting to a diagram]&lt;/p&gt; &lt;h1 id=&quot;decomposing-graphs&quot;&gt;Decomposing Graphs&lt;/h1&gt; &lt;p&gt;We previously implemented decomposition for patches which splits each half-tile into two or three smaller scale half-tiles.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;decompose &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Patch &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Patch&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We now have a &lt;code&gt;Tgraph&lt;/code&gt; version of decomposition in the module &lt;code&gt;Tgraphs&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;decomposeG &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Graph decomposition is particularly simple. We start by introducing one new vertex for each long edge (the &lt;code&gt;phiEdges&lt;/code&gt;) of the Tgraph. We then build the new faces from each old face using the new vertices.&lt;/p&gt; &lt;p&gt;As a running example we take &lt;code&gt;fool&lt;/code&gt; (mentioned above) and its decomposition &lt;code&gt;foolD&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;*Main&amp;gt; foolD = decomposeG fool  *Main&amp;gt; foolD Tgraph { vertices = [1,8,3,2,9,4,5,13,10,6,11,14,7,12]        , faces = [LK (1,8,3),RD (2,3,8),RK (1,3,9)                  ,LD (4,9,3),RK (5,13,2),LK (5,10,13)                  ,RD (6,13,10),LK (3,2,13),RK (3,13,11)                  ,LD (6,11,13),RK (3,14,4),LK (3,11,14)                  ,RD (6,14,11),LK (7,4,14),RK (7,14,12)                  ,LD (6,12,14)                  ]        }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which are best seen together (&lt;code&gt;fool&lt;/code&gt; followed by &lt;code&gt;foolD&lt;/code&gt;) in figure 6.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 6: fool and foolD (= decomposeG fool)&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/foolandfoold.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 6: &lt;code&gt;fool&lt;/code&gt; and &lt;code&gt;foolD&lt;/code&gt; (= &lt;code&gt;decomposeG fool&lt;/code&gt;)&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;h1 id=&quot;composing-graphs-and-unknowns&quot;&gt;Composing graphs, and Unknowns&lt;/h1&gt; &lt;p&gt;Composing is meant to be an inverse to decomposing, and one of the main reasons for introducing our graph representation. In the literature, decomposition and composition are defined for infinite tilings and in that context they are unique inverses to each other. For finite patches, however, we will see that composition is not always uniquely determined.&lt;/p&gt; &lt;p&gt;In figure 7 (Two Levels) we have emphasised the larger scale faces on top of the smaller scale faces.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 7: Two Levels&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/twolevelsfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 7: Two Levels&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;How do we identify the composed tiles? We start by classifying vertices which are at the wing tips of the (smaller) darts as these determine how things compose. In the interior of a graph/patch (e.g in figure 7), a dart wing tip always coincides with a second dart wing tip, and either&lt;/p&gt; &lt;ol type=&quot;1&quot;&gt; &lt;li&gt;the 2 dart halves share a long edge. The shared wing tip is then classified as a &lt;code&gt;largeKiteCentre&lt;/code&gt; and is at the centre of a larger kite. (See left vertex type in figure 8), or&lt;/li&gt; &lt;li&gt;the 2 dart halves touch at their wing tips without sharing an edge. This shared wing tip is classified as a &lt;code&gt;largeDartBase&lt;/code&gt; and is the base of a larger dart. (See right vertex type in figure 8)&lt;/li&gt; &lt;/ol&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 8: largeKiteCentre (left) and largeDartBase (right)&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/dartwingfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 8: largeKiteCentre (left) and largeDartBase (right)&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;[We also call these (respectively) a deuce vertex type and a jack vertex type later in figure 10]&lt;/p&gt; &lt;p&gt;Around the boundary of a graph, the dart wing tips may not share with a second dart. Sometimes the wing tip has to be classified as &lt;code&gt;unknown&lt;/code&gt; but often it can be decided by looking at neighbouring tiles. In this example of a four times decomposed sun (&lt;code&gt;sunD4&lt;/code&gt;), it is possible to classify all the dart wing tips as largeKiteCentres or largeDartBases so there are no unknowns.&lt;/p&gt; &lt;p&gt;If there are no unknowns, then we have a function to produce the unique composed graph.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;composeG&lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Any correct decomposed graph without unknowns will necessarily compose back to its original. This makes &lt;code&gt;composeG&lt;/code&gt; a left inverse to &lt;code&gt;decomposeG&lt;/code&gt; provided there are no unknowns.&lt;/p&gt; &lt;p&gt;For example, with an (&lt;code&gt;n&lt;/code&gt; times) decomposed sun we will have no unknowns, so these will all compose back up to a sun after &lt;code&gt;n&lt;/code&gt; applications of &lt;code&gt;composeG&lt;/code&gt;. For &lt;code&gt;n=4&lt;/code&gt; (&lt;code&gt;sunD4&lt;/code&gt; – the smaller scale shown in figure 7) the dart wing classification returns 70 &lt;code&gt;largeKiteCentres&lt;/code&gt;, 45 &lt;code&gt;largeDartBases&lt;/code&gt;, and no &lt;code&gt;unknowns&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Similarly with the simpler &lt;code&gt;foolD&lt;/code&gt; example, if we classsify the dart wings we get&lt;/p&gt; &lt;pre&gt;&lt;code&gt;largeKiteCentres = [14,13] largeDartBases = [3] unknowns = []&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In &lt;code&gt;foolD&lt;/code&gt; (the right hand graph in figure 6), nodes 14 and 13 are new kite centres and node 3 is a new dart base. There are no unknowns so we can use &lt;code&gt;composeG&lt;/code&gt; safely&lt;/p&gt; &lt;pre&gt;&lt;code&gt;*Main&amp;gt; composeG foolD Tgraph { vertices = [1,2,3,4,5,6,7]        , faces = [RD (1,2,3),LD (1,3,4),RK (6,2,5)                  ,RK (6,4,3),LK (6,3,2),LK (6,7,4)                  ]        }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which reproduces the original &lt;code&gt;fool&lt;/code&gt; (left hand graph in figure 6).&lt;/p&gt; &lt;p&gt;However, if we now check out unknowns for &lt;code&gt;fool&lt;/code&gt; we get&lt;/p&gt; &lt;pre&gt;&lt;code&gt;largeKiteCentres = [] largeDartBases = [] unknowns = [4,2]    &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So both nodes 2 and 4 are unknowns. It had looked as though &lt;code&gt;fool&lt;/code&gt; would simply compose into two half kites back-to-back (sharing their long edge not their join), but the unknowns show there are other possible choices. Each unknown could become a &lt;code&gt;largeKiteCentre&lt;/code&gt; or a &lt;code&gt;largeDartBase&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The question is then what to do with unknowns.&lt;/p&gt; &lt;h1 id=&quot;partial-compositions&quot;&gt;Partial Compositions&lt;/h1&gt; &lt;p&gt;In fact our &lt;code&gt;composeG&lt;/code&gt; resolves two problems when dealing with finite patches. One is the unknowns and the other is critical missing faces needed to make up a new face (e.g the absence of any half dart).&lt;/p&gt; &lt;p&gt;It is implemented using an intermediary function for partial composition&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;partCompose&lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Tgraph&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;partCompose&lt;/code&gt; will compose everything that is uniquely determined, but will leave out faces round the boundary which cannot be determined or cannot be included in a new face. It returns the faces of the argument graph that were not used, along with the composed graph.&lt;/p&gt; &lt;p&gt;Figure 9 shows the result of &lt;code&gt;partCompose&lt;/code&gt; applied to two graphs. [These are &lt;code&gt;force kiteD3&lt;/code&gt; and &lt;code&gt;force dartD3&lt;/code&gt; on the left. Force is described later]. In each case, the excluded faces of the starting graph are shown in pale green, overlaid by the composed graph on the right.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 9: partCompose for two graphs (force kiteD3 top row and force dartD3 bottom row)&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/pcompfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 9: partCompose for two graphs (force kiteD3 top row and force dartD3 bottom row)&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Then &lt;code&gt;composeG&lt;/code&gt; is simply defined to keep the composed faces and ignore the unused faces produced by &lt;code&gt;partCompose&lt;/code&gt;.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;composeG&lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph composeG &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; snd . partCompose &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This approach avoids making a decision about unknowns when composing, but it may lose some information by throwing away the uncomposed faces.&lt;/p&gt; &lt;p&gt;For correct &lt;code&gt;Tgraph&lt;/code&gt;s &lt;code&gt;g&lt;/code&gt;, if &lt;code&gt;decomposeG g&lt;/code&gt; has no unknowns, then &lt;code&gt;composeG&lt;/code&gt; is a left inverse to &lt;code&gt;decomposeG&lt;/code&gt;. However, if we take &lt;code&gt;g&lt;/code&gt; to be two kite halves sharing their long edge (not their join edge), then these decompose to &lt;code&gt;fool&lt;/code&gt; which produces an empty graph when recomposed. Thus we do not have &lt;code&gt;g = composeG (decomposeG g)&lt;/code&gt; in general. On the other hand we do have &lt;code&gt;g = composeG (decomposeG g)&lt;/code&gt; for correct &lt;em&gt;whole-tile&lt;/em&gt; Tgraphs &lt;code&gt;g&lt;/code&gt; (&lt;em&gt;whole-tile&lt;/em&gt; means all half-tiles of &lt;code&gt;g&lt;/code&gt; have their matching half-tile on their join edge in &lt;code&gt;g&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Later (figure 21) we show another exception to &lt;code&gt;g = composeG(decomposeG g)&lt;/code&gt; with an incorrect tiling.&lt;/p&gt; &lt;p&gt;We make use of&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;selectFacesVP    &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VPatch &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VPatch removeFacesVP    &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VPatch &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VPatch selectFacesGtoVP &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VPatch removeFacesGtoVP &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VPatch&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for creating &lt;code&gt;VPatch&lt;/code&gt;es from selected tile faces of a &lt;code&gt;Tgraph&lt;/code&gt; or &lt;code&gt;VPatch&lt;/code&gt;. This allows us to represent and draw a subgraph which need not be connected nor satisfy the no crossing boundaries property provided the &lt;code&gt;Tgraph&lt;/code&gt; it was derived from had these properties.&lt;/p&gt; &lt;h1 id=&quot;forcing&quot;&gt;Forcing&lt;/h1&gt; &lt;p&gt;When building up a tiling, following the rules, there is often no choice about what tile can be added alongside certain tile edges at the boundary. Such additions are &lt;em&gt;forced&lt;/em&gt; by the existing patch of tiles and the rules. For example, if a half tile has its join edge on the boundary, the unique mirror half tile is the only possibility for adding a face to that edge. Similarly, the short edge of a left (respectively, right) dart can only be matched with the short edge of a right (respectively, left) kite. We also make use of the fact that only 7 types of vertex can appear in (the interior of) a patch, so on a boundary vertex we sometimes have enough of the faces to determine the vertex type. These are given the following names in the literature (shown in figure 10): sun, star, jack (=largeDartBase), queen, king, ace, deuce (=largeKiteCentre).&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 10: Vertex types&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/verttypesfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 10: Vertex types&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;The function&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;force &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;will add some faces on the boundary that are &lt;em&gt;forced&lt;/em&gt; (i.e new faces where there is exactly one possible choice). For example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;When a join edge is on the boundary – add the missing half tile to make a whole tile.&lt;/li&gt; &lt;li&gt;When a half dart has its short edge on the boundary – add the half kite that must be on the short edge.&lt;/li&gt; &lt;li&gt;When a vertex is both a dart origin and a kite wing (it must be a queen or king vertex) – if there is a boundary short edge of a kite half at the vertex, add another kite half sharing the short edge, (this converts 1 kite to 2 and 3 kites to 4 in combination with the first rule).&lt;/li&gt; &lt;li&gt;When two half kites share a short edge their common &lt;code&gt;oppV&lt;/code&gt; vertex must be a deuce vertex – add any missing half darts needed to complete the vertex.&lt;/li&gt; &lt;li&gt;…&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Figure 11 shows &lt;code&gt;foolDminus&lt;/code&gt; (which is &lt;code&gt;foolD&lt;/code&gt; with 3 faces removed) on the left and the result of forcing, ie &lt;code&gt;force foolDminus&lt;/code&gt; on the right which is the same graph we get from &lt;code&gt;force foolD&lt;/code&gt;.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;foolDminus &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt;      removeFaces &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;RD&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;14&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;11&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; LD&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;12&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;14&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; RK&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;13&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hs-num&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt; foolD&lt;/code&gt;&lt;/pre&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 11: foolDminus and force foolDminus = force foolD&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/forcefooldminus.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 11: &lt;code&gt;foolDminus&lt;/code&gt; and &lt;code&gt;force foolDminus&lt;/code&gt; = &lt;code&gt;force foolD&lt;/code&gt;&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Figures 12, 13 and 14 illustrate the the result of forcing a 5-times decomposed kite, a 5-times decomposed dart, and a 5-times decomposed sun (respectively). The first two figures reproduce diagrams from an article by Roger Penrose illustrating the extent of influence of tiles round a decomposed kite and dart. [Penrose R &lt;em&gt;Tilings and quasi-crystals; a non-local growth problem?&lt;/em&gt; in Aperiodicity and Order 2, edited by Jarich M, Academic Press, 1989. (fig 14)].&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 12: force kiteD5 with kiteD5 shown in red&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/forcekite5.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 12: force kiteD5 with kiteD5 shown in red&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 13: force dartD5 with dartD5 shown in red&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/forcedart5.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 13: force dartD5 with dartD5 shown in red&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 14: force sunD5 with sunD5 shown in red&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/forcesun5.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 14: force sunD5 with sunD5 shown in red&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;In figure 15, the bottom row shows successive decompositions of a dart (dashed blue arrows from right to left), so applying &lt;code&gt;composeG&lt;/code&gt; to each dart will go back (green arrows from left to right). The black vertical arrows are &lt;code&gt;force&lt;/code&gt;. The solid blue arrows from right to left are &lt;code&gt;(force . decomposeG)&lt;/code&gt; being applied to the successive forced graphs. The green arrows in the reverse direction are &lt;code&gt;composeG&lt;/code&gt; again and the intermediate (&lt;code&gt;partCompose&lt;/code&gt;) figures are shown in the top row with the ignored faces in pale green.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 15: Arrows: black = force, green = composeG, solid blue = (force . decomposeG)&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/bigpic.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 15: Arrows: black = &lt;code&gt;force&lt;/code&gt;, green = &lt;code&gt;composeG&lt;/code&gt;, solid blue = &lt;code&gt;(force . decomposeG)&lt;/code&gt;&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Figure 16 shows the forced graphs of the seven vertex types (with the starting graphs in red) along with a kite (top right).&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 16: Relating the forced seven vertex types and the kite&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/relatedvtypefig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 16: Relating the forced seven vertex types and the kite&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;These are related to each other as shown in the columns. Each graph composes to the one above (an empty graph for the ones in the top row) and the graph below is its forced decomposition. [The rows have been scaled differently to make the vertex types easier to see.]&lt;/p&gt; &lt;h1 id=&quot;adding-faces-to-a-tgraph&quot;&gt;Adding Faces to a Tgraph&lt;/h1&gt; &lt;p&gt;This is technically tricky because we need to discover what vertices (and implicitly edges) need to be newly created and which ones already exist in the &lt;code&gt;Tgraph&lt;/code&gt;. This goes beyond a simple graph operation and requires use of the geometry of the faces. We have chosen not to do a full conversion to vectors to work out all the geometry, but instead we introduce a local representation of relative directions of edges at a vertex allowing a simple equality test.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Edge directions&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;All directions are integer multiples of 1/10th turn (&lt;code&gt;mod&lt;/code&gt; 10) so we use these integers for comparing directions. The face adding process always adds to the right of a given directed edge &lt;code&gt;(a,b)&lt;/code&gt; which must be a boundary directed edge. [Adding to the left of an edge &lt;code&gt;(a,b)&lt;/code&gt; would mean that &lt;code&gt;(b,a)&lt;/code&gt; will be the boundary direction and so we are really adding to the right of &lt;code&gt;(b,a)&lt;/code&gt;]. Face adding looks to see if either of the two other edges already exist in the graph by considering the end points &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to which the new face is to be added, and inspecting edges of existing faces at &lt;code&gt;a&lt;/code&gt; going anti-clockwise from &lt;code&gt;(a,b)&lt;/code&gt; and at &lt;code&gt;b&lt;/code&gt; going clockwise from &lt;code&gt;(b,a)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This allows an edge in a particular sought direction to be discovered. If it is not found it is assumed not to exist. However, the search will be undermined, and will report a &lt;strong&gt;crossing boundaries&lt;/strong&gt; error if a gap (= second boundary edge) is encountered &lt;em&gt;before&lt;/em&gt; all the faces at the vertex are accounted for. In this case there must be more than two boundary directed edges at the vertex and it is unsafe to assume the edge being sought is not already present in the Tgraph.&lt;/p&gt; &lt;p&gt;Establishing the &lt;em&gt;no crossing boundaries&lt;/em&gt; property ensures these failures cannot occur. We can easily check this property for newly created graphs (with &lt;code&gt;checkTgraph&lt;/code&gt;) and the face adding operations cannot create crossing boundaries.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Touching Vertices and Crossing Boundaries&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;When a new face to be added on &lt;code&gt;(a,b)&lt;/code&gt; has neither of the other two edges already in the graph, the third vertex needs to be created. However it could already exist in the &lt;code&gt;Tgraph&lt;/code&gt; – it is not on an edge coming from &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; but from another non-local part of the &lt;code&gt;Tgraph&lt;/code&gt;. We call this a &lt;em&gt;touching vertex&lt;/em&gt;. If we simply added a new vertex without checking for a clash this would create a nonsense graph. However, if we do check and find an existing vertex, we still cannot add the face using this because it would create a crossing boundary.&lt;/p&gt; &lt;p&gt;Our version of forcing prevents face additions that would create a touching vertex/crossing boundary by calculating the positions of boundary vertices.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;No conflicting edges&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;There is a final (simple) check when adding a new face, to prevent a long edge (&lt;code&gt;phiEdge&lt;/code&gt;) sharing with a short edge. This can arise if we force an incorrect graph (as we will see later).&lt;/p&gt; &lt;h1 id=&quot;implementing-forcing&quot;&gt;Implementing Forcing&lt;/h1&gt; &lt;p&gt;Our order of forcing prioritises updates (face additions) which do not introduce a new vertex. Such &lt;em&gt;safe&lt;/em&gt; updates are easy to recognise and they do not require a touching vertex check. Surprisingly, this pretty much removes the problem of touching vertices altogether.&lt;/p&gt; &lt;p&gt;As an illustration, consider &lt;code&gt;foolDMinus&lt;/code&gt; again on the left of figure 11. Adding the left dart onto edge &lt;code&gt;(12,14)&lt;/code&gt; is not a safe addition (and would create a crossing boundary at 6). However, adding the right dart &lt;code&gt;RD(6,14,11)&lt;/code&gt; is safe and creates the new edge (6,14) which then makes the left dart addition safe. In fact it takes some contrivance to come up with a &lt;code&gt;Tgraph&lt;/code&gt; with an update that could fail the check during forcing when safe cases are always done first. Figure 17 shows such a contrived &lt;code&gt;Tgraph&lt;/code&gt; formed by removing the faces shown in green from a twice decomposed sun on the left. The forced result is shown on the right. When there are no safe cases, we need to try an unsafe one. The four green faces at the bottom are blocked by the touching vertex check. This leaves any one of 9 half-kites at the centre which would pass the check. But after just one of these is added, the check is not needed again. There is always a safe addition to be done at each step until all the green faces are added.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 17: A contrived example requiring a touching vertex check&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/touchingtestfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 17: A contrived example requiring a touching vertex check&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;&lt;strong&gt;Boundary information&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The implementation of forcing has been made more efficient by calculating some boundary information in advance. This boundary information uses a type &lt;code&gt;Boundary&lt;/code&gt;&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; Boundary    &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Boundary     &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt; bDedges     &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;     &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; bvFacesMap  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Mapping Vertex &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;     &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; bvLocMap    &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Mapping Vertex &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Point V2 Double&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; allFaces    &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;TileFace&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;     &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; allVertices &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Vertex&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;     &lt;span style=&quot;color: red;&quot;&gt;,&lt;/span&gt; nextVertex  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Vertex     &lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;deriving&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Show&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This records the boundary directed edges (&lt;code&gt;bDedges&lt;/code&gt;) plus a mapping of the boundary vertices to their incident faces (&lt;code&gt;bvFacesMap&lt;/code&gt;) plus a mapping of the boundary vertices to their positions (&lt;code&gt;bvLocMap&lt;/code&gt;). It also keeps track of all the faces and vertices. The boundary information is easily incremented for each face addition without being recalculated from scratch, and a final graph with all the new faces is easily recovered from the boundary information when there are no more updates.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;force&lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph force &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; recoverGraph . forceAll updatesBD . makeBoundary  makeBoundary  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Boundary recoverGraph  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Boundary &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph forceAll      &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Boundary &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Update&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Boundary &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Boundary  updatesBD&lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Boundary &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Update&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recursive &lt;code&gt;(forceAll updatesBD)&lt;/code&gt; first uses &lt;code&gt;updatesBD&lt;/code&gt; to calculate a list of possible updates then selects a safe update, only doing an unsafe update if there are no safe ones. After doing an update it recurses, so it recalculates a new list of updates at each step (after each update). The saving that comes from using boundaries lies in efficient incremental changes to boundary information and, of course, in avoiding the need to consider internal faces.&lt;/p&gt; &lt;p&gt;In addition to &lt;code&gt;force&lt;/code&gt; we can easily define&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;wholeTiles&lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph wholeTiles &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; recoverGraph . forceAll wholeTileUpdates . makeBoundary &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which just uses the first forcing rule to make sure every half-tile has a matching other half.&lt;/p&gt; &lt;p&gt;We also have a version of &lt;code&gt;force&lt;/code&gt; which counts to a specific number of face additions.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;stepForce &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Int &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Boundary&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This proved essential in uncovering problems of accumulated innaccuracy in calculating boundary positions (now fixed).&lt;/p&gt; &lt;h1 id=&quot;some-other-experiments&quot;&gt;Some Other Experiments&lt;/h1&gt; &lt;p&gt;Below we describe results of some experiments using the tools introduced above. Specifically: emplacements, sub-Tgraphs, incorrect tilings, and composition choices.&lt;/p&gt; &lt;h1 id=&quot;emplacements&quot;&gt;Emplacements&lt;/h1&gt; &lt;p&gt;The finite number of rules used in forcing are based on local boundary vertex and edge information only. We may be able to improve on this by considering a composition and forcing at the next level up before decomposing and forcing again. This thus considers slightly broader local information. In fact we can iterate this process to all the higher levels of composition. Some graphs produce an empty graph when composed so we can regard those as maximal compositions. For example &lt;code&gt;composeG fool&lt;/code&gt; produces an empty graph.&lt;/p&gt; &lt;p&gt;The idea now is to take an arbitrary graph and apply &lt;code&gt;(composeG . force)&lt;/code&gt; repeatedly to find its maximally composed graph, then to &lt;code&gt;force&lt;/code&gt; the maximal graph before applying &lt;code&gt;(force . decomposeG)&lt;/code&gt; repeatedly back down to the starting level (so the same number of decompositions as compositions).&lt;/p&gt; &lt;p&gt;We call the function &lt;code&gt;emplace&lt;/code&gt;, and call the result the &lt;em&gt;emplacement&lt;/em&gt; of the starting graph as it shows a region of influence around the starting graph.&lt;/p&gt; &lt;p&gt;With earlier versions of forcing when we had fewer rules, &lt;code&gt;emplace g&lt;/code&gt; often extended &lt;code&gt;force g&lt;/code&gt; for a Tgraph &lt;code&gt;g&lt;/code&gt;. This allowed the identification of some new rules. Since adding the new rules we have not yet found graphs with different results from &lt;code&gt;force&lt;/code&gt; and &lt;code&gt;emplace&lt;/code&gt;. [Although, the vertex labelling of the result will usually be different].&lt;/p&gt; &lt;h1 id=&quot;sub-tgraphs&quot;&gt;Sub-Tgraphs&lt;/h1&gt; &lt;p&gt;In figure 18 on the left we have a four times decomposed dart &lt;code&gt;dartD4&lt;/code&gt; followed by two sub-Tgraphs &lt;code&gt;brokenDart&lt;/code&gt; and &lt;code&gt;badlyBrokenDart&lt;/code&gt; which are constructed by removing faces from &lt;code&gt;dartD4&lt;/code&gt; (but retaining the connectedness condition and the no crossing boundaries condition). These all produce the same forced result (depicted middle row left in figure 15).&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 18: dartD4, brokenDart, badlyBrokenDart&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/brokendartfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 18: dartD4, brokenDart, badlyBrokenDart&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;However, if we do compositions without forcing first we find &lt;code&gt;badlyBrokenDart&lt;/code&gt; fails because it produces a graph with crossing boundaries after 3 compositions. So &lt;code&gt;composeG&lt;/code&gt; on its own is not always safe, where &lt;em&gt;safe&lt;/em&gt; means guaranteed to produce a valid &lt;code&gt;Tgraph&lt;/code&gt; from a valid correct &lt;code&gt;Tgraph&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In other experiments we tried &lt;code&gt;force&lt;/code&gt; on &lt;code&gt;Tgraph&lt;/code&gt;s with holes and on incomplete boundaries around a potential hole. For example, we have taken the boundary faces of a forced, 5 times decomposed dart, then removed a few more faces to make a gap (which is still a valid &lt;code&gt;Tgraph&lt;/code&gt;). This is shown at the top in figure 19. The result of forcing reconstructs the complete original forced graph. The bottom figure shows an intermediate stage after 2200 face additions. The gap cannot be closed off to make a hole as this would create a crossing boundary, but the channel does get filled and eventually closes the gap without creating a hole.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 19: Forcing boundary faces with a gap (after 2200 steps)&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/progressfig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 19: Forcing boundary faces with a gap (after 2200 steps)&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;h1 id=&quot;incorrect-tilings&quot;&gt;Incorrect Tilings&lt;/h1&gt; &lt;p&gt;When we say a Tgraph &lt;code&gt;g&lt;/code&gt; is a &lt;em&gt;correct graph&lt;/em&gt; (respectively: &lt;em&gt;incorrect graph&lt;/em&gt;), we mean &lt;code&gt;g&lt;/code&gt; represents a correct tiling (respectively: incorrect tiling). A simple example of an incorrect graph is a kite with a dart on each side (called a &lt;em&gt;mistake&lt;/em&gt; by Penrose) shown on the left of figure 20.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;*Main&amp;gt; mistake Tgraph { vertices = [1,2,4,3,5,6,7,8]        , faces = [RK (1,2,4),LK (1,3,2),RD (3,1,5)                  ,LD (4,6,1),LD (3,5,7),RD (4,8,6)                  ]        }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we try to &lt;code&gt;force&lt;/code&gt; (or &lt;code&gt;emplace&lt;/code&gt;) this graph it produces an error in construction which is detected by the test for conflicting edge types (a &lt;code&gt;phiEdge&lt;/code&gt; sharing with a non-&lt;code&gt;phiEdge&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;*Main&amp;gt; force mistake Tgraph {vertices = *** Exception: doUpdate:(incorrect tiling) Conflicting new face RK (11,1,6) with neighbouring faces [RK (9,1,11),LK (9,5,1),RK (1,2,4),LK (1,3,2),RD (3,1,5),LD (4,6,1),RD (4,8,6)] in boundary Boundary ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In figure 20 on the right, we see that after successfully constructing the two whole kites on the top dart short edges, there is an attempt to add an &lt;code&gt;RK&lt;/code&gt; on edge (1,6). The process finds an existing edge (1,11) in the correct direction for one of the new edges so tries to add the erroneous &lt;code&gt;RK (11,1,6)&lt;/code&gt; which fails a &lt;code&gt;noConflicts&lt;/code&gt; test.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 20: An incorrect graph (mistake), and the point at which force mistake fails&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/pfmistakefig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 20: An incorrect graph (&lt;code&gt;mistake&lt;/code&gt;), and the point at which &lt;code&gt;force mistake&lt;/code&gt; fails&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;So it is certainly true that incorrect graphs may fail on forcing, but forcing cannot create an incorrect graph from a correct graph.&lt;/p&gt; &lt;p&gt;If we apply &lt;code&gt;decomposeG&lt;/code&gt; to &lt;code&gt;mistake&lt;/code&gt; it produces another incorrect graph (which is similarly detected if we apply &lt;code&gt;force&lt;/code&gt;), but will nevertheless still compose back to &lt;code&gt;mistake&lt;/code&gt; if we do not try to force.&lt;/p&gt; &lt;p&gt;Interestingly, though, the incorrectness of a graph is not always preserved by &lt;code&gt;decomposeG&lt;/code&gt;. If we start with &lt;code&gt;mistake1&lt;/code&gt; which is &lt;code&gt;mistake&lt;/code&gt; with just two of the half darts (and also an incorrect tiling) we still get a similar failure on forcing, but &lt;code&gt;decomposeG mistake1&lt;/code&gt; is no longer incorrect. If we apply &lt;code&gt;composeG&lt;/code&gt; to the result or &lt;code&gt;force&lt;/code&gt; then &lt;code&gt;composeG&lt;/code&gt; the mistake is thrown away to leave just a kite (see figure 21). This is an example where &lt;code&gt;composeG&lt;/code&gt; is not a left inverse to either &lt;code&gt;decomposeG&lt;/code&gt; or &lt;code&gt;(force . decomposeG)&lt;/code&gt;.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 21: mistake1 with its decomposition, forced decomposition, and recomposed.&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/cdmistake1fig.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 21: &lt;code&gt;mistake1&lt;/code&gt; with its decomposition, forced decomposition, and recomposed.&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;h1 id=&quot;composing-with-choices&quot;&gt;Composing with Choices&lt;/h1&gt; &lt;p&gt;We know that unknowns indicate possible choices (although some choices may lead to incorrect graphs). As an experiment we introduce&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;makeChoices &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Tgraph &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;Tgraph&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which produces &lt;img alt=&quot;2^n&quot; class=&quot;latex&quot; src=&quot;https://s0.wp.com/latex.php?latex=2%5En&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&amp;amp;c=20201002&quot; /&gt; alternatives for the 2 choices of each of &lt;img alt=&quot;n&quot; class=&quot;latex&quot; src=&quot;https://s0.wp.com/latex.php?latex=n&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&amp;amp;c=20201002&quot; /&gt; unknowns (prior to composing). This uses &lt;code&gt;forceLDB&lt;/code&gt; which forces an unknown to be a &lt;code&gt;largeDartBase&lt;/code&gt; by adding an appropriate joined half dart at the node, and &lt;code&gt;forceLKC&lt;/code&gt; which forces an unknown to be a &lt;code&gt;largeKiteCentre&lt;/code&gt; by adding a half dart and a whole kite at the node (making up the 3 pieces for a larger half kite).&lt;/p&gt; &lt;p&gt;Figure 22 illustrates the four choices for composing &lt;code&gt;fool&lt;/code&gt; this way. The top row has the four choices of &lt;code&gt;makeChoices fool&lt;/code&gt; (with the fool shown embeded in red in each case). The bottom row shows the result of applying &lt;code&gt;composeG&lt;/code&gt; to each choice.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 22: makeChoices fool (top row) and composeG of each choice (bottom row)&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/foolchoices.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 22: makeChoices fool (top row) and composeG of each choice (bottom row)&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;In this case, all four compositions are correct tilings. The problem is that, in general, some of the choices may lead to incorrect tilings. More specifically, a choice of one unknown can determine what other unknowns have to become with constraints such as&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a and b have to be opposite choices&lt;/li&gt; &lt;li&gt;a and b have to be the same choice&lt;/li&gt; &lt;li&gt;a and b cannot both be largeKiteCentres&lt;/li&gt; &lt;li&gt;a and b cannot both be largeDartBases&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This analysis of constraints on unknowns is not trivial. The potential exponential results from choices suggests we should compose and force as much as possible and only consider unknowns of a maximal graph.&lt;/p&gt; &lt;p&gt;For calculating the emplacement of a graph, we first find the forced maximal graph before decomposing. We could also consider using &lt;code&gt;makeChoices&lt;/code&gt; at this top step when there are unknowns, i.e a version of &lt;code&gt;emplace&lt;/code&gt; which produces these alternative results (&lt;code&gt;emplaceChoices&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;The result of &lt;code&gt;emplaceChoices&lt;/code&gt; is illustrated for &lt;code&gt;foolD&lt;/code&gt; in figure 23. The first force and composition is unique producing the &lt;code&gt;fool&lt;/code&gt; level at which point we get 4 alternatives each of which compose further as previously illustrated in figure 22. Each of these are forced, then decomposed and forced, decomposed and forced again back down to the starting level. In figure 23 &lt;code&gt;foolD&lt;/code&gt; is overlaid on the 4 alternative results. What they have in common is (as you might expect) &lt;code&gt;emplace foolD&lt;/code&gt; which equals &lt;code&gt;force foolD&lt;/code&gt; and is the graph shown on the right of figure 11.&lt;/p&gt; &lt;div style=&quot;text-align: center;&quot;&gt; &lt;figure&gt;&lt;img alt=&quot;Figure 23: emplaceChoices foolD&quot; src=&quot;https://readerunner.files.wordpress.com/2022/01/emplacefooldchoices.png?w=625&quot; /&gt;&lt;figcaption&gt;Figure 23: emplaceChoices foolD&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt; &lt;h1 id=&quot;future-work&quot;&gt;Future Work&lt;/h1&gt; &lt;p&gt;I am collaborating with Stephen Huggett who suggested the use of graphs for exploring properties of the tilings. We now have some tools to experiment with but we would also like to complete some formalisation and proofs. For example, we do not know if &lt;code&gt;force g&lt;/code&gt; always produces the same result as &lt;code&gt;emplace g&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It would also be good to establish that &lt;code&gt;g&lt;/code&gt; is incorrect iff &lt;code&gt;force g&lt;/code&gt; fails.&lt;/p&gt; &lt;p&gt;We have other conjectures relating to subgraph ordering of &lt;code&gt;Tgraph&lt;/code&gt;s and Galois connections to explore.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-03-01T17:39:39Z",
"URL":" https://readerunner.wordpress.com/2022/01/06/graphs-kites-and-darts/ "
}
,
{
"title":"Sandy Maguire: Review: A Very Elementary Introduction to Sheaves",
"textBody":"&lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Symbol&quot; id=&quot;179&quot;&gt;{-#&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;183&quot;&gt;OPTIONS&lt;/a&gt; &lt;a class=&quot;Pragma&quot; id=&quot;191&quot;&gt;--type-in-type&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;206&quot;&gt;#-}&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;211&quot;&gt;module&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html&quot; id=&quot;218&quot;&gt;blog.sheafs&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;230&quot;&gt;where&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;237&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;242&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.html&quot; id=&quot;249&quot;&gt;Data.Integer&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;262&quot;&gt;hiding&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;269&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#2189&quot; id=&quot;270&quot;&gt;_&amp;lt;_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;273&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;275&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;280&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Properties.html&quot; id=&quot;287&quot;&gt;Data.Integer.Properties&lt;/a&gt;               &lt;a class=&quot;Keyword&quot; id=&quot;325&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;331&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Properties.html#43999&quot; id=&quot;332&quot;&gt;*-zeroË¡&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;339&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Properties.html#2839&quot; id=&quot;341&quot;&gt;â‰¤-reflexive&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;352&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Properties.html#3004&quot; id=&quot;354&quot;&gt;â‰¤-trans&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;361&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;363&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;368&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.html&quot; id=&quot;375&quot;&gt;Data.Vec&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;384&quot;&gt;hiding&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;391&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3807&quot; id=&quot;392&quot;&gt;restrict&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;400&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#7774&quot; id=&quot;402&quot;&gt;reverse&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;409&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;411&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;416&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html&quot; id=&quot;423&quot;&gt;Categories&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;434&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;439&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html&quot; id=&quot;446&quot;&gt;Category.LIN&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;459&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;464&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Category.SET.html&quot; id=&quot;471&quot;&gt;Category.SET&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;484&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;489&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Category.AGRP.html&quot; id=&quot;496&quot;&gt;Category.AGRP&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;510&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;515&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html&quot; id=&quot;522&quot;&gt;Category.MyFunctor&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;541&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.html&quot; id=&quot;548&quot;&gt;Relation.Binary.PropositionalEquality&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;586&quot;&gt;as&lt;/a&gt; &lt;a class=&quot;Module&quot; id=&quot;589&quot;&gt;Eq&lt;/a&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;593&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.html&quot; id=&quot;598&quot;&gt;Eq&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;601&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;607&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#151&quot; id=&quot;608&quot;&gt;_â‰¡_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;611&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1130&quot; id=&quot;613&quot;&gt;cong&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;617&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;619&quot;&gt;sym&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;622&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;624&quot;&gt;refl&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;628&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;630&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#303&quot; id=&quot;635&quot;&gt;LinMap&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;A while back I reviewed some paper (maybe codata? â€” too lazy to check) and came away thinking â€œI should learn more about presheaves.â€� The first paper I found is &lt;a href=&quot;https://arxiv.org/pdf/2202.01379.pdf&quot;&gt;A Very Elementary Introduction to Sheaves&lt;/a&gt; by Mark Agrios, and mildly interestingly, was published less than three weeks ago.&lt;/p&gt; &lt;p&gt;The paper is called â€œvery elementary,â€� and in the first sentence states it â€œis a very non-rigorous, loose, and extremely basic introduction to sheaves,â€� and it delivers on these promises. There is a section on metaphorically what a sheaf is, and then two somewhat-worked examples.&lt;/p&gt; &lt;p&gt;After reading through the paper, I feel like I have a very rough idea of what a sheaf is, and thought that this would be an excellent opportunity to flex my category theory muscles. That is, can I correctly generalize from these two examples to a solid category theoretical definition of a sheaf? Iâ€™m not sure, but this is a unique opportunity, so itâ€™s worth a shot.&lt;/p&gt; &lt;h2 id=&quot;the-metaphor&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#the-metaphor&quot;&gt;The Metaphor&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;The central metaphor of the paper is that a sheaf enriches some mathematical structure, much like a garden enriches a plot of dirt. There are lots of gardens you could make on a plot of dirt, and then you can harvest things from them. I guess this makes sense to the author, but it doesnâ€™t particularly help me. I suspect this is an example of the monad tutorial fallacy in the wild: after thinking really hard about an idea for a while, the author came up with a metaphor that really works for them. But, this metaphor is more an artifact of their thinking process than it is descriptive of the idea itself. Anyway, either way, I wasnâ€™t able to extract much meaning here.&lt;/p&gt; &lt;h2 id=&quot;example-graphs&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#example-graphs&quot;&gt;Example: Graphs&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;We can build a (pre-?)sheaf over a graph. By playing fast and loose with our types like mathematicians are so wont to do, we can model the edge &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;eij:Viâ†’Vj&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;e_{ij} : V_i \to V_j&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â†’&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in a graph as an â€œintersection of the nodes it connects.â€� The paper writes &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;eij&amp;lt;vi,vj&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;e_{ij} &amp;lt; v_i, v_j&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/span&gt; Iâ€™m not super sure what that means, but I think itâ€™s saying that given some graph &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;G=(V,E)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;G = (V, E)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt; we can say &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;eijâŠ†viâˆªvj&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;e_{ij} \subseteq v_i \cup v_j&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;âŠ†&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;âˆª&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;?&lt;/span&gt; Except that this doesnâ€™t typecheck, since &lt;code&gt;v_i&lt;/code&gt; is an element of a set, not a set itself. I donâ€™t know.&lt;/p&gt; &lt;p&gt;Anyway, the important thing here seems to be that there is a preorder between edges and vertices. So letâ€™s quickly define a &lt;code&gt;Preorder&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;3005&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Preorder&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot; id=&quot;3012&quot;&gt;Preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3021&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;3023&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;3027&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;3035&quot;&gt;field&lt;/a&gt;     &lt;a id=&quot;Preorder.Carrier&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;3045&quot;&gt;Carrier&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3053&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;3055&quot;&gt;Set&lt;/a&gt;     &lt;a id=&quot;Preorder._&amp;lt;_&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;3063&quot;&gt;_&amp;lt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3067&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;3069&quot;&gt;Carrier&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3077&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;3079&quot;&gt;Carrier&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3087&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;3089&quot;&gt;Set&lt;/a&gt;     &lt;a id=&quot;Preorder.&amp;lt;-refl&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3097&quot; id=&quot;3097&quot;&gt;&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3104&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3106&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3107&quot; id=&quot;3107&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3109&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;3111&quot;&gt;Carrier&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3118&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3120&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3107&quot; id=&quot;3122&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;3124&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3107&quot; id=&quot;3126&quot;&gt;a&lt;/a&gt;     &lt;a id=&quot;Preorder.&amp;lt;-trans&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3132&quot; id=&quot;3132&quot;&gt;&amp;lt;-trans&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3140&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3142&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3143&quot; id=&quot;3143&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3145&quot; id=&quot;3145&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3147&quot; id=&quot;3147&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3149&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;3151&quot;&gt;Carrier&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3158&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3160&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3143&quot; id=&quot;3162&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;3164&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3145&quot; id=&quot;3166&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3168&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3145&quot; id=&quot;3170&quot;&gt;b&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;3172&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3147&quot; id=&quot;3174&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3176&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3143&quot; id=&quot;3178&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;3180&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3147&quot; id=&quot;3182&quot;&gt;c&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and then just forget about the whole graph thing, because I am not convinced it is a meaningful presentation. Instead, weâ€™ll cheat, and just build exactly the object we want to discuss.&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;3380&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;Ex&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;3385&quot;&gt;Ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3388&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;3390&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;3394&quot;&gt;where&lt;/a&gt;   &lt;a id=&quot;Ex.v1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3402&quot; id=&quot;3402&quot;&gt;v1&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;3406&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;3408&quot;&gt;Ex&lt;/a&gt;   &lt;a id=&quot;Ex.v2&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3413&quot; id=&quot;3413&quot;&gt;v2&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;3417&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;3419&quot;&gt;Ex&lt;/a&gt;   &lt;a id=&quot;Ex.e12&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3424&quot; id=&quot;3424&quot;&gt;e12&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3428&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;3430&quot;&gt;Ex&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;corresponding to this rather boring graph:&lt;/p&gt; &lt;div class=&quot;diagram-container&quot;&gt; &lt;img class=&quot;diagram quiver&quot; src=&quot;https://reasonablypolymorphic.com/8166794173b950645ad7163ff8e67e41a056e9f6.svg&quot; title=&quot;commutative diagram&quot; /&gt; &lt;/div&gt; &lt;p&gt;We can then build a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot;&gt;Preorder&lt;/a&gt;&lt;/span&gt; on &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot;&gt;Ex&lt;/a&gt;&lt;/span&gt; with explicit cases for &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3424&quot;&gt;e12&lt;/a&gt;&lt;/span&gt; being less than its vertices:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;3709&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;Ex&amp;lt;&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3714&quot; id=&quot;3714&quot;&gt;Ex&amp;lt;&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3718&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;3720&quot;&gt;Ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3723&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;3725&quot;&gt;Ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3728&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;3730&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;3734&quot;&gt;where&lt;/a&gt;   &lt;a id=&quot;Ex&amp;lt;.e12&amp;lt;v1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;3742&quot;&gt;e12&amp;lt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3749&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3714&quot; id=&quot;3751&quot;&gt;Ex&amp;lt;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3424&quot; id=&quot;3755&quot;&gt;e12&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3402&quot; id=&quot;3759&quot;&gt;v1&lt;/a&gt;   &lt;a id=&quot;Ex&amp;lt;.e12&amp;lt;v2&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;3764&quot;&gt;e12&amp;lt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3771&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3714&quot; id=&quot;3773&quot;&gt;Ex&amp;lt;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3424&quot; id=&quot;3777&quot;&gt;e12&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3413&quot; id=&quot;3781&quot;&gt;v2&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and two cases to satisfy the preorder laws:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;Ex&amp;lt;.ex&amp;lt;-refl&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;3840&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3849&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3851&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3852&quot; id=&quot;3852&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3854&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;3856&quot;&gt;Ex&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;3858&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3860&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3714&quot; id=&quot;3862&quot;&gt;Ex&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3852&quot; id=&quot;3866&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3852&quot; id=&quot;3868&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and then mechanically hook everything up:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;3922&quot;&gt;module&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3929&quot; id=&quot;3929&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;3931&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;3939&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot; id=&quot;3944&quot;&gt;Preorder&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;3955&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3967&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot; id=&quot;3969&quot;&gt;Preorder&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;3980&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;3992&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;3993&quot;&gt;Carrier&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4001&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot; id=&quot;4003&quot;&gt;Ex&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;4008&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4020&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;4021&quot;&gt;_&amp;lt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4025&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3714&quot; id=&quot;4027&quot;&gt;Ex&amp;lt;&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;4033&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4045&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3097&quot; id=&quot;4046&quot;&gt;&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4053&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4055&quot;&gt;ex&amp;lt;-refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;4066&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4078&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3132&quot; id=&quot;4079&quot;&gt;&amp;lt;-trans&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;4087&quot;&gt;e12&amp;lt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4094&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4095&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;DottedPattern Symbol&quot; id=&quot;4104&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;DottedPattern InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3402&quot; id=&quot;4105&quot;&gt;v1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4107&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4109&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;4111&quot;&gt;e12&amp;lt;v1&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;4120&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4132&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3132&quot; id=&quot;4133&quot;&gt;&amp;lt;-trans&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;4141&quot;&gt;e12&amp;lt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4148&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4149&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;DottedPattern Symbol&quot; id=&quot;4158&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;DottedPattern InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3413&quot; id=&quot;4159&quot;&gt;v2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4161&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4163&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;4165&quot;&gt;e12&amp;lt;v2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;4174&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4186&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3132&quot; id=&quot;4187&quot;&gt;&amp;lt;-trans&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4195&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4196&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4205&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;4208&quot;&gt;e12&amp;lt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4215&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;4217&quot;&gt;e12&amp;lt;v1&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;4226&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4238&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3132&quot; id=&quot;4239&quot;&gt;&amp;lt;-trans&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4247&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4248&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4257&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;4260&quot;&gt;e12&amp;lt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4267&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;4269&quot;&gt;e12&amp;lt;v2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;4278&quot;&gt;ex-preorder&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4290&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3132&quot; id=&quot;4291&quot;&gt;&amp;lt;-trans&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4299&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4300&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#4309&quot; id=&quot;4309&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;4310&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4312&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4313&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4322&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;4325&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;4327&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#4309&quot; id=&quot;4336&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;The paper goes on to say we have some sheaf &lt;code&gt;F&lt;/code&gt;, which maps &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3385&quot;&gt;Ex&lt;/a&gt;&lt;/span&gt;s to â€œjust about anything,â€� this codomain being called the &lt;em&gt;stalk.&lt;/em&gt; For now, letâ€™s assume itâ€™s to &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot;&gt;Set&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Furthermore, the sheaf &lt;code&gt;F&lt;/code&gt; also has a â€œsecond mechanism,â€� which in our example maps an edge &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;eij:viâ†’vj&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;e_{ij} : v_i \to v_j&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â†’&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to two functions:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;Fvi;eij:F(vi)â†’F(eij)Fvj;eij:F(vj)â†’F(eij)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; F_{v_i;e_{ij}} : F(v_i) \to F(e_{ij}) \\ F_{v_j;e_{ij}} : F(v_j) \to F(e_{ij}) &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.1514em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3281em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.143em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct mtight&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3281em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2819em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3473em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â†’&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace newline&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.1514em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3281em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2819em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct mtight&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3281em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size3 size1 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2819em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3473em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;â†’&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.3117em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;ij&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.2861em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This is where some of the frustration in only being given examples comes in. Why are these in the definition of a sheaf? The only thing that could possibly make any sense to me is that this comes from a more general construction:&lt;/p&gt; &lt;pre class=&quot;text&quot;&gt;&lt;code&gt;restrict : (x y : Ex) â†’ x &amp;lt; y â†’ Stalk y â†’ Stalk x&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which states we have a mapping from &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;F(y)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;F(y)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;F(x)&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;F(x)&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; if and only if we have &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;x&amp;lt;y&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;x &amp;lt; y&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/span&gt; These &lt;code&gt;restrict&lt;/code&gt; things are called &lt;em&gt;restriction maps&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Whatâ€™s further confusing is the following point:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Since each stalk is a vector space, it is natural to have our restriction maps be linear transformations described by matrices.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Why linear transformations, and not just arbitrary functions? When I hear â€œlinear transformationâ€� I think homomorphism, or more probably, morphism in some category. Which then probably means the &lt;code&gt;Stalk&lt;/code&gt; isnâ€™t a function to &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot;&gt;Set&lt;/a&gt;&lt;/span&gt;, itâ€™s a mapping into a category.&lt;/p&gt; &lt;p&gt;OK, so that all seems straightforward enough. Letâ€™s try to formalize it.&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;5714&quot;&gt;module&lt;/a&gt; &lt;a id=&quot;Sheaf&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5721&quot; id=&quot;5721&quot;&gt;Sheaf&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5727&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5728&quot; id=&quot;5728&quot;&gt;pre&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5732&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot; id=&quot;5734&quot;&gt;Preorder&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5742&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5744&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5745&quot; id=&quot;5745&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5747&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;5749&quot;&gt;Category&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5757&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;5759&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;5767&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot; id=&quot;5772&quot;&gt;Preorder&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5728&quot; id=&quot;5781&quot;&gt;pre&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;5787&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;5792&quot;&gt;Category&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5745&quot; id=&quot;5801&quot;&gt;C&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;5806&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Sheaf.Sheaf&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5813&quot; id=&quot;5813&quot;&gt;Sheaf&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5819&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;5821&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;5825&quot;&gt;where&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;5835&quot;&gt;field&lt;/a&gt;       &lt;a id=&quot;Sheaf.Sheaf.Stalk&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;5847&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5853&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;5855&quot;&gt;Carrier&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5863&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot; id=&quot;5865&quot;&gt;Obj&lt;/a&gt;       &lt;a id=&quot;Sheaf.Sheaf.restrict&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5875&quot; id=&quot;5875&quot;&gt;restrict&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5884&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5886&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5887&quot; id=&quot;5887&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5889&quot; id=&quot;5889&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5891&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;5893&quot;&gt;Carrier&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;5900&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5902&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5887&quot; id=&quot;5904&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;5906&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5889&quot; id=&quot;5908&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;5910&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;5912&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5889&quot; id=&quot;5918&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#376&quot; id=&quot;5920&quot;&gt;~&amp;gt;&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;5923&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5887&quot; id=&quot;5929&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;which seems reasonable. The paper now gives us a specific sheaf, with &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3807&quot;&gt;restrict&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot;&gt;e12&amp;lt;v1&lt;/a&gt;&lt;/span&gt; being the linear map encoded by the matrix:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[1âˆ’102]&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} 1 &amp;amp; -1 \\ 0 &amp;amp; 2 \end{bmatrix} &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;which we can write as a morphism in &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#591&quot;&gt;LIN&lt;/a&gt;&lt;/span&gt; (the category of linear algebra, with objects as vector spaces, and morphisms as linear maps):&lt;/p&gt;  &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6475&quot; id=&quot;6475&quot;&gt;e12~&amp;gt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6483&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6485&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#376&quot; id=&quot;6487&quot;&gt;~&amp;gt;&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6490&quot;&gt;2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6475&quot; id=&quot;6494&quot;&gt;e12~&amp;gt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6502&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;6503&quot;&gt;linmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6510&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6511&quot; id=&quot;6511&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6513&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6515&quot; id=&quot;6515&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6517&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;6519&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6521&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6523&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6529&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6511&quot; id=&quot;6530&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5023&quot; id=&quot;6532&quot;&gt;-&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6515&quot; id=&quot;6534&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6535&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6539&quot;&gt;âˆ·&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6545&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;6546&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6548&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;6550&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6515&quot; id=&quot;6552&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6553&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6555&quot;&gt;âˆ·&lt;/a&gt;              &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;6570&quot;&gt;[]&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6475&quot; id=&quot;6575&quot;&gt;e12~&amp;gt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6583&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#375&quot; id=&quot;6584&quot;&gt;preserves-+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6596&quot; id=&quot;6596&quot;&gt;u&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6598&quot; id=&quot;6598&quot;&gt;v&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6600&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6392&quot; id=&quot;6602&quot;&gt;trustMe&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6475&quot; id=&quot;6612&quot;&gt;e12~&amp;gt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6620&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#478&quot; id=&quot;6621&quot;&gt;preserves-*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6633&quot; id=&quot;6633&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6635&quot; id=&quot;6635&quot;&gt;v&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6637&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6392&quot; id=&quot;6639&quot;&gt;trustMe&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3807&quot;&gt;restrict&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot;&gt;e12&amp;lt;v2&lt;/a&gt;&lt;/span&gt; being the linear map encoded by the matrix:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[31âˆ’1202]&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} 3 &amp;amp; 1 &amp;amp; -1 \\ 2 &amp;amp; 0 &amp;amp; 2 \end{bmatrix} &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;written as:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6815&quot; id=&quot;6815&quot;&gt;e12~&amp;gt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6823&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6825&quot;&gt;3&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#376&quot; id=&quot;6827&quot;&gt;~&amp;gt;&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6830&quot;&gt;2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6815&quot; id=&quot;6834&quot;&gt;e12~&amp;gt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6842&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;6843&quot;&gt;linmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6850&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6851&quot; id=&quot;6851&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6853&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6855&quot; id=&quot;6855&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6857&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6859&quot; id=&quot;6859&quot;&gt;z&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6861&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;6863&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6865&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6867&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6873&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;6874&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6876&quot;&gt;3&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;6878&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6851&quot; id=&quot;6880&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#4844&quot; id=&quot;6882&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6855&quot; id=&quot;6884&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5023&quot; id=&quot;6886&quot;&gt;-&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6859&quot; id=&quot;6888&quot;&gt;z&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6889&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6893&quot;&gt;âˆ·&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;6899&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;6900&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6902&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;6904&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6851&quot; id=&quot;6906&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#4844&quot; id=&quot;6908&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;6910&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;6912&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;6914&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6859&quot; id=&quot;6916&quot;&gt;z&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;6917&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;6919&quot;&gt;âˆ·&lt;/a&gt;                        &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;6944&quot;&gt;[]&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6815&quot; id=&quot;6949&quot;&gt;e12~&amp;gt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6957&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#375&quot; id=&quot;6958&quot;&gt;preserves-+&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6970&quot; id=&quot;6970&quot;&gt;u&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6972&quot; id=&quot;6972&quot;&gt;v&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6974&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6392&quot; id=&quot;6976&quot;&gt;trustMe&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6815&quot; id=&quot;6986&quot;&gt;e12~&amp;gt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;6994&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#478&quot; id=&quot;6995&quot;&gt;preserves-*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7007&quot; id=&quot;7007&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7009&quot; id=&quot;7009&quot;&gt;v&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7011&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6392&quot; id=&quot;7013&quot;&gt;trustMe&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Thus, we can finally build the example &lt;code&gt;Sheaf&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7081&quot; id=&quot;7081&quot;&gt;ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7084&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5813&quot; id=&quot;7086&quot;&gt;Sheaf&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7081&quot; id=&quot;7094&quot;&gt;ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7097&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;7098&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3402&quot; id=&quot;7104&quot;&gt;v1&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;7108&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7110&quot;&gt;2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7081&quot; id=&quot;7114&quot;&gt;ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7117&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;7118&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3413&quot; id=&quot;7124&quot;&gt;v2&lt;/a&gt;  &lt;a class=&quot;Symbol&quot; id=&quot;7128&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7130&quot;&gt;3&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7081&quot; id=&quot;7134&quot;&gt;ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7137&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;7138&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3424&quot; id=&quot;7144&quot;&gt;e12&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7148&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;7150&quot;&gt;2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7081&quot; id=&quot;7154&quot;&gt;ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7157&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5875&quot; id=&quot;7158&quot;&gt;restrict&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;7167&quot;&gt;e12&amp;lt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7174&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6475&quot; id=&quot;7176&quot;&gt;e12~&amp;gt;v1&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7081&quot; id=&quot;7186&quot;&gt;ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7189&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5875&quot; id=&quot;7190&quot;&gt;restrict&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;7199&quot;&gt;e12&amp;lt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7206&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6815&quot; id=&quot;7208&quot;&gt;e12~&amp;gt;v2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7081&quot; id=&quot;7218&quot;&gt;ex&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7221&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5875&quot; id=&quot;7222&quot;&gt;restrict&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7231&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;7232&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#7241&quot; id=&quot;7241&quot;&gt;z&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;7242&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;7244&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#648&quot; id=&quot;7246&quot;&gt;id&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Whatâ€™s with the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot;&gt;Stalk&lt;/a&gt;&lt;/span&gt; of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3402&quot;&gt;v1&lt;/a&gt;&lt;/span&gt; being 2, you might ask? Remember, the stalk is an object in some category, in this case &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#591&quot;&gt;LIN&lt;/a&gt;&lt;/span&gt;. Objects in &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#591&quot;&gt;LIN&lt;/a&gt;&lt;/span&gt; are natural numbers, corresponding to the length of vectors.&lt;/p&gt; &lt;h3 id=&quot;sections-and-global-sections&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#sections-and-global-sections&quot;&gt;Sections and Global Sections&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Hereâ€™s where our categorical generalization of the paper goes a bit haywire. The paper defines a &lt;em&gt;section&lt;/em&gt; as picking an element from each &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot;&gt;Stalk&lt;/a&gt;&lt;/span&gt; of the sheaf. He picks, for example:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[21]âˆˆStalkÂ v1&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} 2 \\ 1 \end{bmatrix} \in \text{Stalk } v1 &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;âˆˆ&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;StalkÂ &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[3âˆ’10]âˆˆStalkÂ v2&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} 3 \\ -1 \\ 0 \end{bmatrix} \in \text{Stalk } v2 &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;delimsizing mult&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 2.05em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�£&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;height: 0.016em; width: 0.6667em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�¡&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.55em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 2.05em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.55em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;delimsizing mult&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 2.05em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�¦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;height: 0.016em; width: 0.6667em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�¤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.55em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;âˆˆ&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;StalkÂ &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;and&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[1âˆ’1]âˆˆStalkÂ e12&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} 1 \\ -1 \end{bmatrix} \in \text{Stalk } e12 &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;âˆˆ&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;StalkÂ &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;which is all fine and dandy, except that when we categorize, our objects no longer have internal structure. Fortunately, we can use â€œgeneralized elements,â€� a.k.a., morphisms out of the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#2711&quot;&gt;terminal&lt;/a&gt;&lt;/span&gt; object.&lt;/p&gt;  &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;BadSections.Section&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8390&quot; id=&quot;8390&quot;&gt;Section&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8398&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;8400&quot;&gt;Carrier&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8408&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;8410&quot;&gt;Set&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8390&quot; id=&quot;8416&quot;&gt;Section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8424&quot; id=&quot;8424&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;8426&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#2711&quot; id=&quot;8428&quot;&gt;terminal&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#376&quot; id=&quot;8437&quot;&gt;~&amp;gt;&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;8440&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8424&quot; id=&quot;8446&quot;&gt;c&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;That is, a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8390&quot;&gt;Section&lt;/a&gt;&lt;/span&gt; is a mapping from every element in the &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot;&gt;Preorder&lt;/a&gt;&lt;/span&gt; to a generalized element of its &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot;&gt;Stalk&lt;/a&gt;&lt;/span&gt;. We can evaluate a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8390&quot;&gt;Section&lt;/a&gt;&lt;/span&gt; by checking the commutativity of all &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3807&quot;&gt;restrict&lt;/a&gt;&lt;/span&gt;s. That is, weâ€™d like the following diagram to commute:&lt;/p&gt; &lt;div class=&quot;diagram-container&quot;&gt; &lt;img class=&quot;diagram quiver&quot; src=&quot;https://reasonablypolymorphic.com/0680ae3cf1615f7e2348b22ea86fd926ed0e9144.svg&quot; title=&quot;commutative diagram&quot; /&gt; &lt;/div&gt; &lt;p&gt;Doing this in Agda is hard because it wants lots of dumb arithmetic proofs, so instead weâ€™ll make ourselves content with some by-hand math:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;râˆ˜Sv1=[1âˆ’102][21]=[12]â‰ [1âˆ’1]&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; r \circ S v1 =  \begin{bmatrix}       1 &amp;amp; -1 \\       0 &amp;amp; 2     \end{bmatrix}     \begin{bmatrix}       2 \\ 1     \end{bmatrix} =  \begin{bmatrix}       1 \\       2     \end{bmatrix} \neq     \begin{bmatrix}     1 \\ -1     \end{bmatrix} &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.4445em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;âˆ˜&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width: 0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&lt;span class=&quot;mord vbox&quot;&gt;&lt;span class=&quot;thinbox&quot;&gt;&lt;span class=&quot;rlap&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;inner&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;î€ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fix&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;So, our chosen &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8390&quot;&gt;Section&lt;/a&gt;&lt;/span&gt; doesnâ€™t commute. That is, it doesnâ€™t respect the global equalities, thus it is not a &lt;em&gt;global section.&lt;/em&gt; Sounds like something worth formalizing:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;9588&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;BadSections.GlobalSection&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9595&quot; id=&quot;9595&quot;&gt;GlobalSection&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9609&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;9611&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;9615&quot;&gt;where&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;9625&quot;&gt;field&lt;/a&gt;       &lt;a id=&quot;BadSections.GlobalSection.section&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9637&quot; id=&quot;9637&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9645&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9647&quot;&gt;forall&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9654&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9655&quot; id=&quot;9655&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9657&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;9659&quot;&gt;Carrier&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9666&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9668&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8390&quot; id=&quot;9670&quot;&gt;Section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9655&quot; id=&quot;9678&quot;&gt;c&lt;/a&gt;       &lt;a id=&quot;BadSections.GlobalSection.commutes&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9686&quot; id=&quot;9686&quot;&gt;commutes&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;9703&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9705&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9706&quot; id=&quot;9706&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9708&quot; id=&quot;9708&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9710&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;9712&quot;&gt;Carrier&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9719&quot;&gt;}&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;9729&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9731&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9732&quot; id=&quot;9732&quot;&gt;x&amp;lt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;9736&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9706&quot; id=&quot;9738&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;9740&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9708&quot; id=&quot;9742&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;9743&quot;&gt;)&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;9753&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5875&quot; id=&quot;9755&quot;&gt;restrict&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9732&quot; id=&quot;9764&quot;&gt;x&amp;lt;y&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#676&quot; id=&quot;9768&quot;&gt;âˆ˜&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9637&quot; id=&quot;9770&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9708&quot; id=&quot;9778&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#450&quot; id=&quot;9780&quot;&gt;â‰ˆ&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9637&quot; id=&quot;9782&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9706&quot; id=&quot;9790&quot;&gt;x&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;All thatâ€™s left is to find a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9595&quot;&gt;GlobalSection&lt;/a&gt;&lt;/span&gt; of our weird graph category:&lt;/p&gt;  &lt;p&gt;Unfortunately, this formalization doesnâ€™t quite work out; there are no interesting arrows out of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#2711&quot;&gt;terminal&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;BadEx.boring-arrows&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10123&quot; id=&quot;10123&quot;&gt;boring-arrows&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;10143&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10145&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10146&quot; id=&quot;10146&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10148&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10150&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#376&quot; id=&quot;10152&quot;&gt;~&amp;gt;&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10155&quot;&gt;1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10156&quot;&gt;)&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;10164&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10166&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10167&quot; id=&quot;10167&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10169&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;10171&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#246&quot; id=&quot;10175&quot;&gt;â„¤&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10177&quot;&gt;0&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10178&quot;&gt;)&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;10186&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10146&quot; id=&quot;10188&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10190&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;10191&quot;&gt;linmap&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10167&quot; id=&quot;10198&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#151&quot; id=&quot;10200&quot;&gt;â‰¡&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;10202&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10204&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;10206&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10208&quot;&gt;[]&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10123&quot; id=&quot;10213&quot;&gt;boring-arrows&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10227&quot; id=&quot;10227&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10229&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;10232&quot;&gt;with&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10227&quot; id=&quot;10237&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10239&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;10240&quot;&gt;linmap&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10247&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;10250&quot;&gt;in&lt;/a&gt; &lt;a class=&quot;Argument&quot; id=&quot;10253&quot;&gt;eq&lt;/a&gt;   &lt;a class=&quot;Symbol&quot; id=&quot;10258&quot;&gt;...&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10262&quot;&gt;|&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10264&quot; id=&quot;10264&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;10266&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10268&quot;&gt;[]&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;10271&quot;&gt;rewrite&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1684&quot; id=&quot;10279&quot;&gt;sym&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10253&quot; id=&quot;10283&quot;&gt;eq&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10286&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2806&quot; id=&quot;10292&quot;&gt;begin&lt;/a&gt;       &lt;a class=&quot;Bound&quot; id=&quot;10304&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10306&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;10307&quot;&gt;linmap&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10314&quot;&gt;[]&lt;/a&gt;                 &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2864&quot; id=&quot;10333&quot;&gt;â‰¡âŸ¨âŸ©&lt;/a&gt;       &lt;a class=&quot;Bound&quot; id=&quot;10343&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10345&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;10346&quot;&gt;linmap&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10353&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#2580&quot; id=&quot;10354&quot;&gt;map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10358&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;10359&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10361&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;10363&quot;&gt;*_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10365&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10367&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10369&quot;&gt;)&lt;/a&gt;  &lt;span class=&quot;reasoning-step&quot;&gt;&lt;span class=&quot;as-written Function&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2923&quot; id=&quot;10372&quot;&gt;â‰¡âŸ¨&lt;/a&gt; &lt;a class=&quot;Bound&quot; id=&quot;10375&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10377&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#478&quot; id=&quot;10378&quot;&gt;preserves-*&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10390&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;10391&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10393&quot;&gt;0&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10394&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10396&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2923&quot; id=&quot;10398&quot;&gt;âŸ©&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;alternate Function&quot;&gt;â‰¡&lt;/span&gt;&lt;/span&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#2580&quot; id=&quot;10406&quot;&gt;map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10410&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;10411&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10413&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;10415&quot;&gt;*_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10417&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10419&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; id=&quot;10420&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10422&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;10423&quot;&gt;linmap&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10430&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10432&quot;&gt;)&lt;/a&gt;  &lt;span class=&quot;reasoning-step&quot;&gt;&lt;span class=&quot;as-written Function&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2923&quot; id=&quot;10435&quot;&gt;â‰¡âŸ¨&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1130&quot; id=&quot;10438&quot;&gt;cong&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10443&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#2580&quot; id=&quot;10444&quot;&gt;map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10448&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;10449&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10451&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;10453&quot;&gt;*_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10455&quot;&gt;))&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10253&quot; id=&quot;10458&quot;&gt;eq&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2923&quot; id=&quot;10461&quot;&gt;âŸ©&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;alternate Function&quot;&gt;â‰¡&lt;/span&gt;&lt;/span&gt;       &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#2580&quot; id=&quot;10469&quot;&gt;map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10473&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;10474&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10476&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;10478&quot;&gt;*_&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10480&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10482&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10264&quot; id=&quot;10483&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;10485&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10487&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10489&quot;&gt;)&lt;/a&gt;        &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2864&quot; id=&quot;10498&quot;&gt;â‰¡âŸ¨âŸ©&lt;/a&gt;       &lt;a class=&quot;Symbol&quot; id=&quot;10508&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;10509&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;10511&quot;&gt;0&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#5169&quot; id=&quot;10513&quot;&gt;*&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#10264&quot; id=&quot;10515&quot;&gt;x&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10516&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;10518&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10520&quot;&gt;[]&lt;/a&gt;               &lt;span class=&quot;reasoning-step&quot;&gt;&lt;span class=&quot;as-written Function&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2923&quot; id=&quot;10537&quot;&gt;â‰¡âŸ¨&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#1130&quot; id=&quot;10540&quot;&gt;cong&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10545&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;10546&quot;&gt;_âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10549&quot;&gt;[]&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10551&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;10553&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Properties.html#43999&quot; id=&quot;10554&quot;&gt;*-zeroË¡&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#1444&quot; id=&quot;10562&quot;&gt;+0&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;10564&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2923&quot; id=&quot;10566&quot;&gt;âŸ©&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;alternate Function&quot;&gt;â‰¡&lt;/span&gt;&lt;/span&gt;       &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Integer.Base.html#1444&quot; id=&quot;10574&quot;&gt;+0&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;10577&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;10579&quot;&gt;[]&lt;/a&gt;     &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#3105&quot; id=&quot;10586&quot;&gt;âˆ�&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;10592&quot;&gt;where&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;10598&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.PropositionalEquality.Core.html#2708&quot; id=&quot;10603&quot;&gt;Eq.â‰¡-Reasoning&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;So, thatâ€™s no good. Weâ€™ve modeled &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#8390&quot;&gt;Section&lt;/a&gt;&lt;/span&gt; incorrectly, as the generalized element approach doesnâ€™t work, since we are unable to follow the example.&lt;/p&gt; &lt;p&gt;What are some other ways to go from an &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot;&gt;Obj&lt;/a&gt;&lt;/span&gt; to a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot;&gt;Set&lt;/a&gt;&lt;/span&gt;? Maybe we could try modeling this as a functor to &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.SET.html#216&quot;&gt;SET&lt;/a&gt;&lt;/span&gt; instead:&lt;/p&gt;  &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11040&quot; id=&quot;11040&quot;&gt;ex-func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11048&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#591&quot; id=&quot;11050&quot;&gt;LIN&lt;/a&gt; &lt;a class=&quot;Record Operator&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#93&quot; id=&quot;11054&quot;&gt;=&amp;gt;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.SET.html#216&quot; id=&quot;11057&quot;&gt;SET&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11040&quot; id=&quot;11063&quot;&gt;ex-func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11071&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#152&quot; id=&quot;11072&quot;&gt;F-Obj&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11078&quot; id=&quot;11078&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11080&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;11082&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#246&quot; id=&quot;11086&quot;&gt;â„¤&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11078&quot; id=&quot;11088&quot;&gt;x&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11040&quot; id=&quot;11092&quot;&gt;ex-func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11100&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#178&quot; id=&quot;11101&quot;&gt;F-map&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11107&quot; id=&quot;11107&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11109&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11107&quot; id=&quot;11111&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11113&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;11114&quot;&gt;linmap&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11040&quot; id=&quot;11123&quot;&gt;ex-func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11131&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#245&quot; id=&quot;11132&quot;&gt;F-map-id&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11141&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11143&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11145&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;11147&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11040&quot; id=&quot;11154&quot;&gt;ex-func&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11162&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#354&quot; id=&quot;11163&quot;&gt;F-map-âˆ˜&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11171&quot; id=&quot;11171&quot;&gt;g&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11173&quot; id=&quot;11173&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11175&quot; id=&quot;11175&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11177&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;11179&quot;&gt;refl&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;And we can try again with &lt;code&gt;Section&lt;/code&gt;s:&lt;/p&gt; &lt;p&gt;and then we can say a &lt;code&gt;Section&lt;/code&gt; is an element of the action of &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11418&quot;&gt;Func&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt;  &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;Sections.Section&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11677&quot; id=&quot;11677&quot;&gt;Section&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11685&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;11687&quot;&gt;Carrier&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11695&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;11697&quot;&gt;Set&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11677&quot; id=&quot;11703&quot;&gt;Section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11711&quot; id=&quot;11711&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11713&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#152&quot; id=&quot;11715&quot;&gt;F-Obj&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11721&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5847&quot; id=&quot;11722&quot;&gt;Stalk&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11711&quot; id=&quot;11728&quot;&gt;c&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11729&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and a &lt;code&gt;GlobalSection&lt;/code&gt;, which recall, is a globally-coherent assignment of sections:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;  &lt;a class=&quot;Keyword&quot; id=&quot;11827&quot;&gt;record&lt;/a&gt; &lt;a id=&quot;Sections.GlobalSection&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11834&quot; id=&quot;11834&quot;&gt;GlobalSection&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11848&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;11850&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;11854&quot;&gt;where&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;11864&quot;&gt;field&lt;/a&gt;       &lt;a id=&quot;Sections.GlobalSection.section&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11876&quot; id=&quot;11876&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11884&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11886&quot;&gt;forall&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11893&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11894&quot; id=&quot;11894&quot;&gt;c&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11896&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;11898&quot;&gt;Carrier&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11905&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11907&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11677&quot; id=&quot;11909&quot;&gt;Section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11894&quot; id=&quot;11917&quot;&gt;c&lt;/a&gt;       &lt;a id=&quot;Sections.GlobalSection.commutes&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11925&quot; id=&quot;11925&quot;&gt;commutes&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;11942&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11944&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11945&quot; id=&quot;11945&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11947&quot; id=&quot;11947&quot;&gt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11949&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;11951&quot;&gt;Carrier&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11958&quot;&gt;}&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;11968&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11970&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11971&quot; id=&quot;11971&quot;&gt;x&amp;lt;y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;11975&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11945&quot; id=&quot;11977&quot;&gt;x&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;11979&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11947&quot; id=&quot;11981&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;11982&quot;&gt;)&lt;/a&gt;         &lt;a class=&quot;Symbol&quot; id=&quot;11992&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#178&quot; id=&quot;11994&quot;&gt;F-map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12000&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5875&quot; id=&quot;12001&quot;&gt;restrict&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11971&quot; id=&quot;12010&quot;&gt;x&amp;lt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12013&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12015&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11876&quot; id=&quot;12016&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11947&quot; id=&quot;12024&quot;&gt;y&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;12025&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Datatype Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#151&quot; id=&quot;12027&quot;&gt;â‰¡&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11876&quot; id=&quot;12029&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11945&quot; id=&quot;12037&quot;&gt;x&lt;/a&gt; &lt;/pre&gt;  &lt;pre class=&quot;Agda&quot;&gt;  &lt;a id=&quot;GoodEx.soln&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#12226&quot; id=&quot;12226&quot;&gt;soln&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12231&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11834&quot; id=&quot;12233&quot;&gt;GlobalSection&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#12226&quot; id=&quot;12249&quot;&gt;soln&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12254&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11876&quot; id=&quot;12255&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3402&quot; id=&quot;12263&quot;&gt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12266&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;12268&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12270&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;12272&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;12274&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12276&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;12278&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;12280&quot;&gt;[]&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#12226&quot; id=&quot;12285&quot;&gt;soln&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12290&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11876&quot; id=&quot;12291&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3413&quot; id=&quot;12299&quot;&gt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12302&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#291&quot; id=&quot;12304&quot;&gt;-[1+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12309&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#291&quot; id=&quot;12311&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;12313&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;12315&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12317&quot;&gt;10&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;12320&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;12322&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12324&quot;&gt;3&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;12326&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;12328&quot;&gt;[]&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#12226&quot; id=&quot;12333&quot;&gt;soln&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12338&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11876&quot; id=&quot;12339&quot;&gt;section&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3424&quot; id=&quot;12347&quot;&gt;e12&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12351&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;12353&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12355&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;12357&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#264&quot; id=&quot;12359&quot;&gt;+&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;12361&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;InductiveConstructor Operator&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1053&quot; id=&quot;12363&quot;&gt;âˆ·&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#1034&quot; id=&quot;12365&quot;&gt;[]&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#12226&quot; id=&quot;12370&quot;&gt;soln&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12375&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11925&quot; id=&quot;12376&quot;&gt;commutes&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;12385&quot;&gt;e12&amp;lt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12392&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;12394&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#12226&quot; id=&quot;12401&quot;&gt;soln&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12406&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11925&quot; id=&quot;12407&quot;&gt;commutes&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;12416&quot;&gt;e12&amp;lt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12423&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;12425&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#12226&quot; id=&quot;12432&quot;&gt;soln&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12437&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#11925&quot; id=&quot;12438&quot;&gt;commutes&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12447&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;12448&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12457&quot;&gt;_)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;12460&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;12462&quot;&gt;refl&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Sure enough, this was a global section:&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[21]âˆˆStalkÂ v1&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} 2 \\ 1 \end{bmatrix} \in \text{Stalk } v1 &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;âˆˆ&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;StalkÂ &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[âˆ’2103]âˆˆStalkÂ v2&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} -2 \\ 10 \\ 3 \end{bmatrix} \in \text{Stalk } v2 &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;&lt;span class=&quot;delimsizing mult&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 2.05em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�£&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;height: 0.016em; width: 0.6667em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�¡&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.55em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 2.05em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;âˆ’&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.55em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;&lt;span class=&quot;delimsizing mult&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 2.05em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�¦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;height: 0.016em; width: 0.6667em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3.155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;delimsizinginner delim-size4&quot;&gt;&lt;span&gt;â�¤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.55em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;âˆˆ&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;StalkÂ &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;and&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;[12]âˆˆStalkÂ e12&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt; \begin{bmatrix} 1 \\ 2 \end{bmatrix} \in \text{Stalk } e12 &amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 1.45em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;â€‹&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.95em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;âˆˆ&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.6944em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord&quot;&gt;StalkÂ &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2 id=&quot;example-continuous-intervals&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#example-continuous-intervals&quot;&gt;Example: Continuous Intervals&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;The paper presents a second example as well. Maybe itâ€™s just that Iâ€™m less well-versed in the subject matter, but this example feels significantly more incoherent than the first. I tried to work through it, and the formalization above was sufficiently powerful to do what I needed, but I didnâ€™t understand the example or what it was trying to accomplish. There was some Abelian group stuff that never actually got used.&lt;/p&gt; &lt;p&gt;Rather than clean this section up, Iâ€™m instead going to spend the time before my publication deadline writing about what I learned about pre-sheafs after hitting the wall, and asking for help.&lt;/p&gt; &lt;h2 id=&quot;extracuricular-presheafs&quot;&gt;&lt;a class=&quot;header-link&quot; href=&quot;https://reasonablypolymorphic.com/atom.xml#extracuricular-presheafs&quot;&gt;Extracuricular Presheafs&lt;span class=&quot;header-link-emoji&quot;&gt;ğŸ”—&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;So letâ€™s talk about what all of this sheaf business above is trying to do. The ever helpful Reed Mullanix came to my rescue with a few helpful intuitions. To paraphrase him (if there are any mistakes in the following, they are my mistakes, not his):&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Think about a sensor network. You have some physical space, with a series of sensors attached in specific places. Maybe you have a microphone in the hallway, and a camera at the front door, and a thermometer in the bedroom. Each of these sensors is &lt;em&gt;locally correct&lt;/em&gt;, that is, we can be reasonably sure that if the thermometer says 37C, it is in fact 37C.&lt;/p&gt; &lt;p&gt;A presheaf is a mapping from this collection of sensors to a world in which we can reason about the total space. For example, we might want to get an idea of whatâ€™s going on in the basement, where we have no sensors, but which is part of our house nevertheless.&lt;/p&gt; &lt;p&gt;And a global section over that presheaf is a globally consistent take on the system. Itâ€™s some mapping into the hypothesis space that &lt;em&gt;agrees with all of the measurements.&lt;/em&gt; If we know itâ€™s 37C in the bedroom, weâ€™re probably not going to see snow in the front-door camera.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Okay, so whatâ€™s all this preorder stuff about? I think itâ€™s actually just a poor manâ€™s category. We can lift any preorder into a category by considering the &lt;code&gt;&amp;lt;&lt;/code&gt; relationship to be a morphism:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;14770&quot;&gt;module&lt;/a&gt; &lt;a id=&quot;PreorderToCategory&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14777&quot; id=&quot;14777&quot;&gt;PreorderToCategory&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14796&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14797&quot; id=&quot;14797&quot;&gt;P&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14799&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot; id=&quot;14801&quot;&gt;Preorder&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;14809&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;14811&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;14819&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3012&quot; id=&quot;14824&quot;&gt;Preorder&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14797&quot; id=&quot;14833&quot;&gt;P&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;14837&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;14842&quot;&gt;Category&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;14854&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;14859&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Unit.html&quot; id=&quot;14866&quot;&gt;Data.Unit&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;14876&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14882&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#164&quot; id=&quot;14883&quot;&gt;âŠ¤&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;14884&quot;&gt;;&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#201&quot; id=&quot;14886&quot;&gt;tt&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;14888&quot;&gt;)&lt;/a&gt;    &lt;a id=&quot;PreorderToCategory.cat&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;14893&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14897&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;14899&quot;&gt;Category&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;14910&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14914&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot; id=&quot;14915&quot;&gt;Obj&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14919&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3045&quot; id=&quot;14921&quot;&gt;Carrier&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;14931&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14935&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#376&quot; id=&quot;14936&quot;&gt;_~&amp;gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14941&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3063&quot; id=&quot;14943&quot;&gt;_&amp;lt;_&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;14949&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14953&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#450&quot; id=&quot;14954&quot;&gt;_â‰ˆ_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14958&quot; id=&quot;14958&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14960&quot; id=&quot;14960&quot;&gt;g&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14962&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#164&quot; id=&quot;14964&quot;&gt;âŠ¤&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;14968&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14972&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#565&quot; id=&quot;14973&quot;&gt;â‰ˆ-equiv&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14981&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6436&quot; id=&quot;14983&quot;&gt;sorry&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;14991&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14995&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#648&quot; id=&quot;14996&quot;&gt;id&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;14999&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Argument&quot; id=&quot;15000&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15002&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15004&quot; id=&quot;15004&quot;&gt;A&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15005&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15007&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3097&quot; id=&quot;15009&quot;&gt;&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15004&quot; id=&quot;15016&quot;&gt;A&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;15020&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15024&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#676&quot; id=&quot;15025&quot;&gt;_âˆ˜_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15029&quot; id=&quot;15029&quot;&gt;g&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15031&quot; id=&quot;15031&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15033&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3132&quot; id=&quot;15035&quot;&gt;&amp;lt;-trans&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15031&quot; id=&quot;15043&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15029&quot; id=&quot;15045&quot;&gt;g&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;15049&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15053&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#728&quot; id=&quot;15054&quot;&gt;âˆ˜-cong&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15061&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15063&quot;&gt;Î»&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15065&quot; id=&quot;15065&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15067&quot; id=&quot;15067&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15069&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#201&quot; id=&quot;15071&quot;&gt;tt&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;15076&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15080&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#864&quot; id=&quot;15081&quot;&gt;id-r&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15086&quot; id=&quot;15086&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15088&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#201&quot; id=&quot;15090&quot;&gt;tt&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;15095&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15099&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#913&quot; id=&quot;15100&quot;&gt;id-l&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15105&quot; id=&quot;15105&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15107&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#201&quot; id=&quot;15109&quot;&gt;tt&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;15114&quot;&gt;cat&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15118&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#962&quot; id=&quot;15119&quot;&gt;âˆ˜-assoc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15127&quot; id=&quot;15127&quot;&gt;h&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15129&quot; id=&quot;15129&quot;&gt;g&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15131&quot; id=&quot;15131&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15133&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#201&quot; id=&quot;15135&quot;&gt;tt&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;and now that we have a &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot;&gt;Category&lt;/a&gt;&lt;/span&gt;, we can avoid the whole &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#5721&quot;&gt;Sheaf&lt;/a&gt;&lt;/span&gt; / &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#9595&quot;&gt;GlobalSection&lt;/a&gt;&lt;/span&gt; by giving a functor into &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.SET.html#216&quot;&gt;SET&lt;/a&gt;&lt;/span&gt;. Well, almost, because &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#3807&quot;&gt;restrict&lt;/a&gt;&lt;/span&gt; goes the opposite direction. So instead, we can build an opposite category:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;15408&quot;&gt;module&lt;/a&gt; &lt;a id=&quot;Op&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15415&quot; id=&quot;15415&quot;&gt;Op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15418&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15419&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15421&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;15423&quot;&gt;Category&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15431&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;15433&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;15441&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;15446&quot;&gt;Category&lt;/a&gt;    &lt;a class=&quot;Keyword&quot; id=&quot;15458&quot;&gt;data&lt;/a&gt; &lt;a id=&quot;Op.OpArr&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15463&quot; id=&quot;15463&quot;&gt;OpArr&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15469&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot; id=&quot;15471&quot;&gt;Obj&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15475&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15477&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot; id=&quot;15479&quot;&gt;Obj&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15483&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15485&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;15487&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;15491&quot;&gt;where&lt;/a&gt;     &lt;a id=&quot;Op.OpArr.reverse&quot;&gt;&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15501&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15509&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15511&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15512&quot; id=&quot;15512&quot;&gt;X&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15514&quot; id=&quot;15514&quot;&gt;Y&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15516&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot; id=&quot;15518&quot;&gt;Obj&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15522&quot;&gt;C&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15523&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15525&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15527&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#1998&quot; id=&quot;15529&quot;&gt;[&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15512&quot; id=&quot;15531&quot;&gt;X&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#1998&quot; id=&quot;15533&quot;&gt;,&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15514&quot; id=&quot;15535&quot;&gt;Y&lt;/a&gt; &lt;a class=&quot;Function Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#1998&quot; id=&quot;15537&quot;&gt;]&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15539&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15463&quot; id=&quot;15541&quot;&gt;OpArr&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15514&quot; id=&quot;15547&quot;&gt;Y&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15512&quot; id=&quot;15549&quot;&gt;X&lt;/a&gt;    &lt;a id=&quot;Op.op&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15554&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15557&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;15559&quot;&gt;Category&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15570&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15573&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot; id=&quot;15574&quot;&gt;Obj&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15578&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15580&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15582&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#362&quot; id=&quot;15583&quot;&gt;Obj&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15589&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15592&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#376&quot; id=&quot;15593&quot;&gt;_~&amp;gt;_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15598&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15463&quot; id=&quot;15600&quot;&gt;OpArr&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15608&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15611&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#450&quot; id=&quot;15612&quot;&gt;_â‰ˆ_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15616&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15617&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15625&quot; id=&quot;15625&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15626&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15628&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15629&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15637&quot; id=&quot;15637&quot;&gt;g&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15638&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15640&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15642&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15644&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#450&quot; id=&quot;15645&quot;&gt;_â‰ˆ_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15625&quot; id=&quot;15649&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15637&quot; id=&quot;15651&quot;&gt;g&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15655&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15658&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#565&quot; id=&quot;15659&quot;&gt;â‰ˆ-equiv&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15667&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15668&quot; id=&quot;15668&quot;&gt;A&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15669&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15671&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15672&quot; id=&quot;15672&quot;&gt;B&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15673&quot;&gt;}&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15675&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6436&quot; id=&quot;15677&quot;&gt;sorry&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15685&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15688&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#648&quot; id=&quot;15689&quot;&gt;id&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15692&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15694&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15702&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15703&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15705&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#648&quot; id=&quot;15706&quot;&gt;id&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15708&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15712&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15715&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#676&quot; id=&quot;15716&quot;&gt;_âˆ˜_&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15720&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15721&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15729&quot; id=&quot;15729&quot;&gt;g&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15730&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15732&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15733&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15741&quot; id=&quot;15741&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15742&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15744&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15746&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15754&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15755&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15757&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field Operator&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#676&quot; id=&quot;15758&quot;&gt;_âˆ˜_&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15741&quot; id=&quot;15762&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15729&quot; id=&quot;15764&quot;&gt;g&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15765&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15769&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15772&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#728&quot; id=&quot;15773&quot;&gt;âˆ˜-cong&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15780&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Postulate&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6436&quot; id=&quot;15782&quot;&gt;sorry&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15790&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15793&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#864&quot; id=&quot;15794&quot;&gt;id-r&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15799&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15800&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15808&quot; id=&quot;15808&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15809&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15811&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15813&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15815&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#913&quot; id=&quot;15816&quot;&gt;id-l&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15808&quot; id=&quot;15821&quot;&gt;f&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15825&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15828&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#913&quot; id=&quot;15829&quot;&gt;id-l&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15834&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15835&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15843&quot; id=&quot;15843&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15844&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15846&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15848&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15850&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#864&quot; id=&quot;15851&quot;&gt;id-r&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15843&quot; id=&quot;15856&quot;&gt;f&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;15860&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15863&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#962&quot; id=&quot;15864&quot;&gt;âˆ˜-assoc&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15872&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15873&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15881&quot; id=&quot;15881&quot;&gt;h&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15882&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15884&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15885&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15893&quot; id=&quot;15893&quot;&gt;g&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15894&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15896&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;15897&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15905&quot; id=&quot;15905&quot;&gt;f&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15906&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15908&quot;&gt;=&lt;/a&gt;     &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#1389&quot; id=&quot;15914&quot;&gt;setoid&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15921&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15923&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Bundles.html#1132&quot; id=&quot;15924&quot;&gt;isEquivalence&lt;/a&gt;              &lt;a class=&quot;Symbol&quot; id=&quot;15951&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Structures.html#1594&quot; id=&quot;15952&quot;&gt;S.IsEquivalence.sym&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15972&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15419&quot; id=&quot;15973&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;15975&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#962&quot; id=&quot;15976&quot;&gt;âˆ˜-assoc&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15905&quot; id=&quot;15984&quot;&gt;f&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15893&quot; id=&quot;15986&quot;&gt;g&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15881&quot; id=&quot;15988&quot;&gt;h&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;15989&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Keyword&quot; id=&quot;15995&quot;&gt;where&lt;/a&gt;       &lt;a class=&quot;Keyword&quot; id=&quot;16007&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16012&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Bundles.html&quot; id=&quot;16019&quot;&gt;Relation.Binary.Bundles&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16043&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16049&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Bundles.html#1009&quot; id=&quot;16050&quot;&gt;Setoid&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16056&quot;&gt;)&lt;/a&gt;       &lt;a class=&quot;Keyword&quot; id=&quot;16064&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Bundles.html#1009&quot; id=&quot;16069&quot;&gt;Setoid&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16076&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16082&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Bundles.html#1132&quot; id=&quot;16083&quot;&gt;isEquivalence&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16096&quot;&gt;)&lt;/a&gt;       &lt;a class=&quot;Keyword&quot; id=&quot;16104&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Relation.Binary.Structures.html&quot; id=&quot;16111&quot;&gt;Relation.Binary.Structures&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16138&quot;&gt;as&lt;/a&gt; &lt;a class=&quot;Module&quot; id=&quot;16141&quot;&gt;S&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Now, we can express a presheaf as a functor:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;16198&quot;&gt;module&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16205&quot; id=&quot;16205&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16207&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;16215&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16220&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html&quot; id=&quot;16227&quot;&gt;Category.MyFunctor&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;16248&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15415&quot; id=&quot;16253&quot;&gt;Op&lt;/a&gt;    &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16259&quot; id=&quot;16259&quot;&gt;Presheaf&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16268&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;16270&quot;&gt;Category&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16279&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;16281&quot;&gt;Set&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16259&quot; id=&quot;16287&quot;&gt;Presheaf&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16296&quot; id=&quot;16296&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16298&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15554&quot; id=&quot;16300&quot;&gt;op&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16296&quot; id=&quot;16303&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Record Operator&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#93&quot; id=&quot;16305&quot;&gt;=&amp;gt;&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.SET.html#216&quot; id=&quot;16308&quot;&gt;SET&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;or our specific example from earlier:&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a class=&quot;Keyword&quot; id=&quot;16360&quot;&gt;module&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16367&quot; id=&quot;16367&quot;&gt;_&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16369&quot;&gt;where&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;16377&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14777&quot; id=&quot;16382&quot;&gt;PreorderToCategory&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3955&quot; id=&quot;16401&quot;&gt;ex-preorder&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;16415&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module Operator&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#93&quot; id=&quot;16420&quot;&gt;_=&amp;gt;_&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;16427&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16432&quot;&gt;import&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/Data.Nat.html&quot; id=&quot;16439&quot;&gt;Data.Nat&lt;/a&gt; &lt;a class=&quot;Keyword&quot; id=&quot;16448&quot;&gt;using&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16454&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;16455&quot;&gt;â„•&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16456&quot;&gt;)&lt;/a&gt;   &lt;a class=&quot;Keyword&quot; id=&quot;16460&quot;&gt;open&lt;/a&gt; &lt;a class=&quot;Module&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15415&quot; id=&quot;16465&quot;&gt;Op&lt;/a&gt;    &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16471&quot; id=&quot;16471&quot;&gt;Z&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16473&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Nat.html#192&quot; id=&quot;16475&quot;&gt;â„•&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16477&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;16479&quot;&gt;Set&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16471&quot; id=&quot;16485&quot;&gt;Z&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16487&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Data.Vec.Base.html#998&quot; id=&quot;16489&quot;&gt;Vec&lt;/a&gt; &lt;a class=&quot;Datatype&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Int.html#246&quot; id=&quot;16493&quot;&gt;â„¤&lt;/a&gt;    &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16498&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16502&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16259&quot; id=&quot;16504&quot;&gt;Presheaf&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#14893&quot; id=&quot;16513&quot;&gt;cat&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16519&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16523&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#152&quot; id=&quot;16524&quot;&gt;F-Obj&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3402&quot; id=&quot;16530&quot;&gt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16533&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16471&quot; id=&quot;16535&quot;&gt;Z&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16537&quot;&gt;2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16541&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16545&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#152&quot; id=&quot;16546&quot;&gt;F-Obj&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3413&quot; id=&quot;16552&quot;&gt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16555&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16471&quot; id=&quot;16557&quot;&gt;Z&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16559&quot;&gt;3&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16563&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16567&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#152&quot; id=&quot;16568&quot;&gt;F-Obj&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3424&quot; id=&quot;16574&quot;&gt;e12&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16578&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16471&quot; id=&quot;16580&quot;&gt;Z&lt;/a&gt; &lt;a class=&quot;Number&quot; id=&quot;16582&quot;&gt;2&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16586&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16590&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#178&quot; id=&quot;16591&quot;&gt;F-map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16597&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16598&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;16606&quot;&gt;e12&amp;lt;v1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16612&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16614&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6475&quot; id=&quot;16616&quot;&gt;e12~&amp;gt;v1&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16624&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;16625&quot;&gt;linmap&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16634&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16638&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#178&quot; id=&quot;16639&quot;&gt;F-map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16645&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16646&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;16654&quot;&gt;e12&amp;lt;v2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16660&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16662&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#6815&quot; id=&quot;16664&quot;&gt;e12~&amp;gt;v2&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16672&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.LIN.html#344&quot; id=&quot;16673&quot;&gt;linmap&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16682&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16686&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#178&quot; id=&quot;16687&quot;&gt;F-map&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16693&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16694&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16702&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;16703&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16712&quot;&gt;_))&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16716&quot; id=&quot;16716&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16718&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16716&quot; id=&quot;16720&quot;&gt;a&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16724&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16728&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#245&quot; id=&quot;16729&quot;&gt;F-map-id&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16738&quot; id=&quot;16738&quot;&gt;A&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16740&quot; id=&quot;16740&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16742&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;16744&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16751&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16755&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#354&quot; id=&quot;16756&quot;&gt;F-map-âˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16764&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16765&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;16773&quot;&gt;e12&amp;lt;v1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16779&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16781&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16782&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16790&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;16791&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16800&quot;&gt;_))&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16804&quot; id=&quot;16804&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16806&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;16808&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16815&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16819&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#354&quot; id=&quot;16820&quot;&gt;F-map-âˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16828&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16829&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;16837&quot;&gt;e12&amp;lt;v2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16843&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16845&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16846&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16854&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;16855&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16864&quot;&gt;_))&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16868&quot; id=&quot;16868&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16870&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;16872&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16879&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16883&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#354&quot; id=&quot;16884&quot;&gt;F-map-âˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16892&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16893&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16901&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;16902&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16911&quot;&gt;_))&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16915&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16916&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3742&quot; id=&quot;16924&quot;&gt;e12&amp;lt;v1&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16930&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16932&quot; id=&quot;16932&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16934&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;16936&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;16943&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16947&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#354&quot; id=&quot;16948&quot;&gt;F-map-âˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16956&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16957&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16965&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;16966&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16975&quot;&gt;_))&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16979&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;16980&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3764&quot; id=&quot;16988&quot;&gt;e12&amp;lt;v2&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;16994&quot;&gt;)&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16996&quot; id=&quot;16996&quot;&gt;a&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;16998&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;17000&quot;&gt;refl&lt;/a&gt;   &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16498&quot; id=&quot;17007&quot;&gt;ex'&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17011&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#354&quot; id=&quot;17012&quot;&gt;F-map-âˆ˜&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17020&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;17021&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17029&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;17030&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17039&quot;&gt;_))&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17043&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#15501&quot; id=&quot;17044&quot;&gt;reverse&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17052&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#3840&quot; id=&quot;17053&quot;&gt;ex&amp;lt;-refl&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17062&quot;&gt;_))&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17066&quot; id=&quot;17066&quot;&gt;a&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;17072&quot;&gt;=&lt;/a&gt; &lt;a class=&quot;InductiveConstructor&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Equality.html#208&quot; id=&quot;17074&quot;&gt;refl&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;which leaves only the question of what a &lt;code&gt;GlobalSection&lt;/code&gt; is under this representation.&lt;/p&gt; &lt;p&gt;I got stumped on this one for a while too, but again, Reed to the rescue, who points out that in our preorder, &lt;code&gt;&amp;lt;&lt;/code&gt; corresponds to a â€œsmallerâ€� space. Thus, we want to find a mapping out of the biggest space, which corresponds to a top element in the order, or a terminal object in the category. The terminal object is going to be the â€œtotal spaceâ€� in consideration (in our sensor example, eg.) and the functor laws will ensure consistency.&lt;/p&gt; &lt;pre class=&quot;Agda&quot;&gt;&lt;a id=&quot;GlobalSection&quot;&gt;&lt;/a&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17617&quot; id=&quot;17617&quot;&gt;GlobalSection&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;17635&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17637&quot;&gt;{&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17638&quot; id=&quot;17638&quot;&gt;C&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17640&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#257&quot; id=&quot;17642&quot;&gt;Category&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;17650&quot;&gt;}&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;17656&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17658&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17659&quot; id=&quot;17659&quot;&gt;pre&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17663&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#16259&quot; id=&quot;17665&quot;&gt;Presheaf&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17638&quot; id=&quot;17674&quot;&gt;C&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;17675&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;17681&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17683&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17684&quot; id=&quot;17684&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17686&quot;&gt;:&lt;/a&gt; &lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#2671&quot; id=&quot;17688&quot;&gt;HasTerminal&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17638&quot; id=&quot;17700&quot;&gt;C&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;17701&quot;&gt;)&lt;/a&gt;     &lt;a class=&quot;Symbol&quot; id=&quot;17707&quot;&gt;â†’&lt;/a&gt; &lt;a class=&quot;Primitive&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Primitive.html#326&quot; id=&quot;17709&quot;&gt;Set&lt;/a&gt; &lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17617&quot; id=&quot;17713&quot;&gt;GlobalSection&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17727&quot; id=&quot;17727&quot;&gt;pre&lt;/a&gt; &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17731&quot; id=&quot;17731&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17733&quot;&gt;=&lt;/a&gt;   &lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17727&quot; id=&quot;17737&quot;&gt;pre&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17741&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Category.MyFunctor.html#152&quot; id=&quot;17742&quot;&gt;_=&amp;gt;_.F-Obj&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17753&quot;&gt;(&lt;/a&gt;&lt;a class=&quot;Bound&quot; href=&quot;https://reasonablypolymorphic.com/blog/sheafs/index.html#17731&quot; id=&quot;17754&quot;&gt;t&lt;/a&gt; &lt;a class=&quot;Symbol&quot; id=&quot;17756&quot;&gt;.&lt;/a&gt;&lt;a class=&quot;Field&quot; href=&quot;https://reasonablypolymorphic.com/Categories.html#2711&quot; id=&quot;17757&quot;&gt;HasTerminal.terminal&lt;/a&gt;&lt;a class=&quot;Symbol&quot; id=&quot;17777&quot;&gt;)&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Unfortunately, this is a problem for our worked example â€” we donâ€™t &lt;em&gt;have&lt;/em&gt; a terminal object! But thatâ€™s OK, itâ€™s easy to trivially construct one by just adding a top:&lt;/p&gt; &lt;div class=&quot;diagram-container&quot;&gt; &lt;img class=&quot;diagram quiver&quot; src=&quot;https://reasonablypolymorphic.com/a653552eb5e4b4f16d6c852c2162bdb0805104fd.svg&quot; title=&quot;commutative diagram&quot; /&gt; &lt;/div&gt; &lt;p&gt;and by picking an object in &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Function&quot; href=&quot;https://reasonablypolymorphic.com/Category.SET.html#216&quot;&gt;SET&lt;/a&gt;&lt;/span&gt; to map it to for our presheaf. There are some interesting choices here; we could just pick &lt;span class=&quot;Agda&quot;&gt;&lt;a class=&quot;Record&quot; href=&quot;https://reasonablypolymorphic.com/Agda.Builtin.Unit.html#164&quot;&gt;âŠ¤&lt;/a&gt;&lt;/span&gt;, which is interesting in how boring a choice it is. Such a thing trivially satisfies all of the requirements, but it doesnâ€™t tell us much about the world. This is the metaphorical equivalent of explaining our sensorsâ€™ readings as â€œanything is possible!â€�&lt;/p&gt; &lt;p&gt;More interestingly, we could pick &lt;code&gt;F-Obj terminal&lt;/code&gt; to be &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;semantics&amp;gt;Z2Ã—Z3Ã—Z2&amp;lt;annotation encoding=&quot;application/x-tex&quot;&amp;gt;\mathbb{Z}^2 Ã— \mathbb{Z}^3 Ã— \mathbb{Z}^2&amp;lt;/annotation&amp;gt;&amp;lt;/semantics&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathbb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathbb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;Ã—&lt;/span&gt;&lt;span class=&quot;mspace&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathbb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height: 0.8141em;&quot;&gt;&lt;span&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height: 2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt; corresponding to the product of &lt;code&gt;F-Obj v1&lt;/code&gt;, &lt;code&gt;F-Obj v2&lt;/code&gt; and &lt;code&gt;F-Obj e12&lt;/code&gt;. We can satisfy the functor laws by projecting from the &lt;code&gt;F-Obj term&lt;/code&gt; down to one of its components. And, best of all, it gives us a place to stick the values from our worked example.&lt;/p&gt; &lt;p&gt;Iâ€™d love to code this up in more detail, but unfortunately Iâ€™m out of time. Thatâ€™s the flaw of trying to get through one paper a week, the deadline is strict whether youâ€™re ready for it or not.&lt;/p&gt; &lt;p&gt;This whole post is a literate Agda file.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-02-27T00:00:00Z",
"URL":" https://reasonablypolymorphic.com/blog/sheafs/index.html "
}
,
{
"title":"Joey Hess: announcing zephyr-copilot",
"textBody":"&lt;p&gt;I recently learned about the &lt;a href=&quot;https://zephyrproject.org/&quot;&gt;Zephyr Project&lt;/a&gt; which is a rather neat embedded OS for devices too small to run Linux.&lt;/p&gt;  &lt;p&gt;This led me to wondering if I could adapt arduino-copilot to target Zephyr, and so be able to program any of the 350+ boards it supports using Haskell.&lt;/p&gt;  &lt;p&gt;At the same time I had an opportunity to give a talk at the Houston Functional Programmers group. On February 1st I decided to &lt;a href=&quot;https://hfpug.org/event/joey-hess-programming-ardinos-with-haskell-and-nasas-copilot/&quot;&gt;give that talk, about arduino-copilot&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;That left 2 weeks to buy some hardware supported by Zephyr and port arduino-copilot to it. The result is &lt;a href=&quot;https://hackage.haskell.org/package/zephyr-copilot&quot;&gt;zephyr-copilot&lt;/a&gt;, and I was able to demo it during my talk.&lt;/p&gt;  &lt;p&gt;This example can be used with any of 293 different boards, and will blink an on-board LED:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;module Examples.Blink.Demo where  import Copilot.Zephyr.Board.Generic  main :: IO () main = zephyr $ do         led0 =: blinking         delay =: MilliSeconds (constant 100) &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;Doing much more than that needs a board specific module to set up GPIO pins etc. So far I only have written those for a couple of boards I have, but they are fairly easy to write. I'd be happy to help anyone who wants to contribute one.&lt;/p&gt;  &lt;p&gt;Due to the time constraints I have not implemented serial port support, or PWM or ADC yet, although all should be fairly easy. Zephyr also has no end of other capabilities, from networking to file systems to sensors, that could perhaps be supported in zephyr-copilot.&lt;/p&gt;  &lt;p&gt;My talk has now been published on &lt;a href=&quot;https://youtu.be/l-luyVRgWVU&quot;&gt;youtube&lt;/a&gt;. I really enjoyed presenting again for the first time in 4 years(!), and to a very nice group of people. Thanks to Claude Rubinson for his persistence in getting me to give a talk.&lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;Development of zephyr-copilot was sponsored by Mark Reidenbach, Erik Bjäreholt, Jake Vosloo, and Graham Spencer &lt;a href=&quot;https://patreon.com/joeyh&quot;&gt;on Patreon&lt;/a&gt;.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-02-23T19:55:37Z",
"URL":" http://joeyh.name/blog/entry/announcing_zephyr-copilot/ "
}
,
{
"title":"Well-Typed.Com: GHC activities report: December 2021-January 2022",
"textBody":"&lt;p&gt;This is the tenth edition of our GHC activities report, which describes the work on GHC and related projects that we are doing at Well-Typed. The current edition covers roughly the months of December 2021 and January 2022.&lt;/p&gt; &lt;p&gt;You can find the previous editions collected under the &lt;a href=&quot;https://well-typed.com/blog/tags/ghc-activities-report&quot;&gt;ghc-activities-report tag&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A bit of background: One aspect of our work at Well-Typed is to support GHC and the Haskell core infrastructure. Several companies, including IOHK, Facebook, and GitHub via the Haskell Foundation, are providing us with funding to do this work. We are also &lt;a href=&quot;https://well-typed.com/blog/2020/09/working-with-hasura-ghc-tooling/&quot;&gt;working with Hasura&lt;/a&gt; on better debugging tools. We are very grateful on behalf of the whole Haskell community for the support these companies provide.&lt;/p&gt; &lt;p&gt;If you are interested in also contributing funding to ensure we can continue or even scale up this kind of work, please &lt;a href=&quot;mailto:info@well-typed.com&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Of course, GHC is a large community effort, and Well-Typed’s contributions are just a small part of this. This report does not aim to give an exhaustive picture of &lt;em&gt;all&lt;/em&gt; GHC work that is ongoing, and there are many fantastic features currently being worked on that are omitted here simply because none of us are currently involved in them in any way. Furthermore, the aspects we &lt;em&gt;do&lt;/em&gt; mention are still the work of many people. In many cases, we have just been helping with the last few steps of integration. We are immensely grateful to everyone contributing to GHC. Please keep doing so (or start)!&lt;/p&gt;  &lt;h2 id=&quot;team&quot;&gt;Team&lt;/h2&gt; &lt;p&gt;The current GHC team consists of &lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben Gamari&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/andreask&quot;&gt;Andreas Klebinger&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matthew Pickering&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin Duggal&lt;/a&gt; and &lt;a href=&quot;https://well-typed.com/people/sam&quot;&gt;Sam Derbyshire&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Many others within Well-Typed, including &lt;a href=&quot;https://well-typed.com/people/adam&quot;&gt;Adam Gundry&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/alfredo&quot;&gt;Alfredo Di Napoli&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/alp&quot;&gt;Alp Mestanogullari&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/douglas&quot;&gt;Douglas Wilson&lt;/a&gt; and &lt;a href=&quot;https://well-typed.com/people/oleg&quot;&gt;Oleg Grenrus&lt;/a&gt;, are contributing to GHC more occasionally.&lt;/p&gt; &lt;h2 id=&quot;releases&quot;&gt;Releases&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; continued work preparing 9.2.2.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin&lt;/a&gt; released GHC 9.0.2.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; reworked CI to make sure that binary distributions don’t depend on &lt;code&gt;libnuma&lt;/code&gt;. This had regressed recently with the Debian 10 release bindists.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin&lt;/a&gt; and then &lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; again tag-teamed on some patches to allow GHC’s Hadrian build system to be bootstrapped without &lt;code&gt;cabal-install&lt;/code&gt;. This allows GHC to be built by just depending on GHC and normal system dependencies.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; mastered the art of the &lt;code&gt;ReadP&lt;/code&gt; parser in order to remove the &lt;code&gt;parsec&lt;/code&gt; (and hence &lt;code&gt;text&lt;/code&gt;) dependency from GHC.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; added Debian 11 release jobs to GHC’s CI pipeline.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin&lt;/a&gt; is close to finishing a &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5965&quot;&gt;patch&lt;/a&gt; which makes the GHC library reinstallable, allowing users of the GHC API to rebuild it like any ordinary Haskell package, and not being forced to use the version of boot libraries that shipped with their GHC installation. It also paves the way for potentially smaller GHC binary distributions as profiled libraries and other custom configurations could be built by the user.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;typechecker&quot;&gt;Typechecker&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/sam&quot;&gt;Sam&lt;/a&gt; has fixed &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20946&quot;&gt;a bug in typeclass instance resolution&lt;/a&gt;, in which the order in which GHC encountered instances unexpectedly mattered when resolving overlap.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; worked with Simon to better track the provenance of type variables in order to improve error messages. Now users should never see the dreaded “no skolem info” error. Along the way we added a bunch of new assertions which should mean less confusing bugs in future.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; finished implementing the instance environment rough map which provides a pre-filter before performing instance matching. The patch was started by &lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; in order to improve type family instance matching but Matt added an observation which also greatly improved type class instance matching. In some profiles up to 50% of typechecking time was spent looking up instances, with this patch that cost has been greatly reduced (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20933&quot;&gt;#20933&lt;/a&gt;, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/9805&quot;&gt;#9805&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;ghci&quot;&gt;GHCi&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; worked closely with GHC contributor &lt;code&gt;@nineonine&lt;/code&gt; to understand and fix a bug in GHC’s bytecode interpreter triggered by use of unlifted data types (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20194&quot;&gt;#20194&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;typechecker-plugins&quot;&gt;Typechecker plugins&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/sam&quot;&gt;Sam&lt;/a&gt; has fixed a bug in which unsolved Wanted constraints emitted by typechecking plugins would be reported to the user with an incorrect source location.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;code-generation&quot;&gt;Code generation&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; is engaged in a multi-week effort to update the GHC’s native Windows toolchain to use Clang and LLVM (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/21019&quot;&gt;#21019&lt;/a&gt;). This effort should solve a number of issues:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Fixes a number of code generation issues traceable to the current Gnu toolchain (e.g. &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/16780&quot;&gt;#16780&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Significantly improves compilation, and more importantly, linking times (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/16084&quot;&gt;#16084&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Eliminates a class of compatibility issues faced by users of the LLVM backend (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/16354&quot;&gt;#16354&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Fixes some numerical precision issues due to the old msys runtime currently used (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/15670&quot;&gt;#15670&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Enables address space layout randomization for Haskell code&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;However, this has required a significant investment of effort, involving changes in the linker, code generator, runtime system, compilation driver, build system, and packaging infrastructure. Happily, much of this effort, particularly that in the runtime system, will benefit other platforms as well due to improvements in linker robustness and various refactorings.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; refactored the compiler’s backend to consistently account for alignment of memory accesses, ensuring that the &lt;code&gt;indexWord8ArrayAs*#&lt;/code&gt; family of primops are correctly lowered on platforms which lack support for unaligned memory accesses (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/21015&quot;&gt;#21015&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;primops&quot;&gt;Primops&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/sam&quot;&gt;Sam&lt;/a&gt; has added support for levity-polymorphic arrays and mutable variables. This means that the primitive array types (&lt;code&gt;Array#&lt;/code&gt;, &lt;code&gt;MutableArray#&lt;/code&gt;, &lt;code&gt;SmallArray#&lt;/code&gt;, &lt;code&gt;MutableSmallArray#&lt;/code&gt;) can now hold unlifted values, with support for all the relevant operations (e.g. &lt;code&gt;writeArray#&lt;/code&gt;, &lt;code&gt;indexArray#&lt;/code&gt;, etc). This means that the untyped &lt;code&gt;ArrayArray#&lt;/code&gt; interface is no longer needed. Mutable variable types, such as &lt;code&gt;MutVar#&lt;/code&gt;, &lt;code&gt;MVar#&lt;/code&gt;, &lt;code&gt;TVar#&lt;/code&gt;, can now handle unlifted types too. This completes the implementation of the &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0203-pointer-rep.rst&quot;&gt;&lt;code&gt;BoxedRep&lt;/code&gt; proposal&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;In response to ticket &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20769&quot;&gt;#20769&lt;/a&gt;, &lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; debugged a memory safety issue in the &lt;code&gt;shortbytestring&lt;/code&gt; library. In the course of doing so, he also implemented optional dynamic bounds-checking functionality for the various array primops provided by GHC, filling a long-present need (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/15092&quot;&gt;#15092&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;runtime-system&quot;&gt;Runtime system&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/douglas&quot;&gt;Doug&lt;/a&gt; fixed several statistics &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/19685&quot;&gt;accounting problems&lt;/a&gt; in the garbage collector.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/douglas&quot;&gt;Doug&lt;/a&gt; &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6149&quot;&gt;fixed&lt;/a&gt; all “fail to inline” warnings in the rts.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; investigated and fixed a bug in the linker’s &lt;code&gt;m32&lt;/code&gt; memory allocator, which resulted in compiler errors on OpenBSD (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20734&quot;&gt;#20734&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; finished a refactor of the runtime’s eventlog infrastructure, reducing initialization overhead and fixing a few subtle races in the face of changes in capabilities counts (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/18948&quot;&gt;#18948&lt;/a&gt;, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4477&quot;&gt;!4477&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; started implementing support for finalizers in the runtime system linker. This is a first step in the road to robust C++ support in GHC, as now required by &lt;code&gt;text&lt;/code&gt; (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20494&quot;&gt;#20494&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; continued work characterising a subtle potential memory-ordering bug affecting blackholing of CAFs (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20129&quot;&gt;#20129&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; fixed a number of bugs in WinIO traceable to inconsistencies in the treatment of deadlock detection for IO requests (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/18382&quot;&gt;#18382&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;template-haskell-and-plugins&quot;&gt;Template Haskell and Plugins&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin&lt;/a&gt; has been investigating the causes of segfaults which crop up when using different GHC installations, like a reinstalled GHC binary, or compiled on a different machine like a static HLS binary compiled on a different machine and distributed via GHCup or VSCode (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20742&quot;&gt;#20742&lt;/a&gt;, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/19896&quot;&gt;#19896&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;error-messages&quot;&gt;Error messages&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/sam&quot;&gt;Sam&lt;/a&gt; has migrated the reporting of unsolved Wanted constraints to use the new rich diagnostic infrastructure. This means tooling such as Haskell Language Server can give more fine-grained structured information, instead of having to parse the error message text.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;parsing&quot;&gt;Parsing&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/sam&quot;&gt;Sam&lt;/a&gt; fixed &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20858&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20859&quot;&gt;issues&lt;/a&gt; surrounding the parsing and pretty-printing of unboxed sum types. This means that GHC can now parse and display unsaturated unboxed sum type constructors such as &lt;code&gt;(# | | #)&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;driver&quot;&gt;Driver&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; finalised and merged the support for &lt;a href=&quot;https://well-typed.com/blog/2022/01/multiple-home-units/&quot;&gt;multiple home units&lt;/a&gt;. The next step is to add support to Cabal and HLS.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; looked into adding support for &lt;code&gt;mold&lt;/code&gt; (a new modern linker) but some &lt;a href=&quot;https://github.com/rui314/mold/issues/268&quot;&gt;shortcomings in &lt;code&gt;mold&lt;/code&gt;&lt;/a&gt; stopped our forward progress.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;profiling&quot;&gt;Profiling&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/andreask&quot;&gt;Andreas&lt;/a&gt; fixed a minor bug for the &lt;code&gt;-fcaller-cc&lt;/code&gt; mode of adding profiling cost-centres (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20854&quot;&gt;#20854&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/andreask&quot;&gt;Andreas&lt;/a&gt; is working on a new mode for automatic cost-centre annotations in &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7242&quot;&gt;!7242&lt;/a&gt; which has been made possible through generous funding from Hasura. In this mode GHC will now insert cost-centres &lt;em&gt;after&lt;/em&gt; optimization. Generally this results in more accurate profiling results which correspond much better to the characteristics of non-profiled builds. However profiles can sometimes be harder to interpret as GHC-internal names for functions will leak into the profile. For GHC versions 9.2 and 9.0 there is an experimental plugin available &lt;a href=&quot;https://github.com/AndreasPK/late-cc-plugin&quot;&gt;here&lt;/a&gt; which offers similar functionality.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;libraries&quot;&gt;Libraries&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; fixed a number of bugs and regressions in the &lt;code&gt;process&lt;/code&gt; library (&lt;a href=&quot;https://github.com/haskell/process/issues/219&quot;&gt;#219&lt;/a&gt;, &lt;a href=&quot;https://github.com/haskell/process/issues/227&quot;&gt;#227&lt;/a&gt;, &lt;a href=&quot;https://github.com/haskell/process/issues/224&quot;&gt;#224&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;compiler-performance&quot;&gt;Compiler Performance&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/adam&quot;&gt;Adam&lt;/a&gt; and &lt;a href=&quot;https://well-typed.com/people/sam&quot;&gt;Sam&lt;/a&gt; are finalising their work on directed coercions, which is expected to greatly speed up programs involving many type family reductions, such as the programs reported in &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/8095&quot;&gt;#8095&lt;/a&gt;. The idea is to introduce a new representation for coercions, called directed coercions, which store fewer redundant types. This avoids producing coercions whose size is quadratic in the number of type family reduction steps.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; noticed that the Core lint phase was very slow and that we were running some performance tests with Core lint enabled. Now the in-tree performance tests and &lt;code&gt;head.hackage&lt;/code&gt; tests collect more accurate performance statistics.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; backported a number of space-leak and performance fixes to the 9.2 branch.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; thought very carefully about the &lt;code&gt;mkCoreUnfolding&lt;/code&gt; function and being slightly smarter about when things were forced led to a small improvement in maximum residency (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20905&quot;&gt;#20905&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;infrastructure&quot;&gt;Infrastructure&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; fixed some bugs with the merge bot; we now correctly use the merge base commit to calculate the difference in performance tests and search all commits in the batch for possible performance changes.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/matthew&quot;&gt;Matt&lt;/a&gt; and &lt;a href=&quot;https://well-typed.com/people/ben&quot;&gt;Ben&lt;/a&gt; worked on adding a “Notes” linter to ensure that notes are referenced accurately. As part of this Matt made it possible to run linters by the testsuite so that it is easier to accept changes locally.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin&lt;/a&gt; made improvements to the GHC testsuite to enable it to request Hadrian for certain dependencies needed to execute particular tests, so that they can be built on demand only when those tests are actually requested to run.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin&lt;/a&gt; fixed the GHC testsuite’s support for the stage 1 compiler as well as out-of-tree compilers, so that partial builds of GHC and compiler binaries from elsewhere can be easily tested.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://well-typed.com/people/zubin&quot;&gt;Zubin&lt;/a&gt; taught Hadrian about custom &lt;code&gt;Setup.hs&lt;/code&gt; scripts and used this to move logic required for reinstallable &lt;code&gt;lib:ghc&lt;/code&gt; into the custom &lt;code&gt;Setup.hs&lt;/code&gt; scripts and avoid duplication.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;",
"source":"Planet Haskell",
"PubDate":"2022-02-14T00:00:00Z",
"URL":" https://well-typed.com/blog/2022/02/ghc-2021-12-2022-01 "
}
,
{
"title":"Daniel Mlot (duplode): Every Distributive is Representable",
"textBody":"&lt;p&gt;“Every &lt;code&gt;Distributive&lt;/code&gt; &lt;code&gt;Functor&lt;/code&gt; is actually &lt;code&gt;Representable&lt;/code&gt;”, as the documentation for &lt;a href=&quot;https://hackage.haskell.org/package/adjunctions-4.4/docs/Data-Functor-Rep.html&quot;&gt;&lt;code&gt;Representable&lt;/code&gt;&lt;/a&gt; tells us straight away, and yet it is far from obvious why that should be the case. At first glance, &lt;a href=&quot;https://hackage.haskell.org/package/distributive-0.6.2.1/docs/Data-Distributive.html&quot;&gt;&lt;code&gt;Distributive&lt;/code&gt;&lt;/a&gt;, the dual to &lt;code&gt;Traversable&lt;/code&gt;, appears to have little if anything to do with &lt;code&gt;Representable&lt;/code&gt;, the class for functors isomorphic to functions. The goal of this post is making this connection explicit. In the process, we will tease out a fair amount of information about the two classes, and also contemplate what makes it tricky to fully bridge the gap to &lt;code&gt;Representable&lt;/code&gt;.&lt;/p&gt; &lt;div&gt;  &lt;/div&gt;  &lt;h2 id=&quot;the-basic-facts&quot;&gt;The basic facts&lt;/h2&gt; &lt;p&gt;Over the course of this post, the focus will alternate between &lt;code&gt;Distributive&lt;/code&gt; and &lt;code&gt;Representable&lt;/code&gt;. In this first section, we will review the basic definitions and laws upon which we will build. Following that, we will work on both ends, aiming at making the classes meet in the middle.&lt;/p&gt; &lt;h3 id=&quot;distributive&quot;&gt;Distributive&lt;/h3&gt; &lt;p&gt;Let’s begin by jotting down a few basic facts about &lt;code&gt;Distributive&lt;/code&gt;. Here is a minimalistic definition of the class:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb1-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Distributive&lt;/span&gt; g &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb1-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    distribute ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f (g a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g (f a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;(In what follows, when used as a placeholder name for a functor, &lt;code&gt;g&lt;/code&gt; will always stand for a distributive or representable functor, while &lt;code&gt;f&lt;/code&gt; will typically stand for the other functor involved in &lt;code&gt;distribute&lt;/code&gt;.)&lt;/p&gt; &lt;p&gt;&lt;code&gt;distribute&lt;/code&gt; is dual to &lt;code&gt;sequenceA&lt;/code&gt;; accordingly, we will adopt the duals of &lt;a href=&quot;https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Traversable.html#g:20&quot;&gt;the &lt;code&gt;Traversable&lt;/code&gt; laws&lt;/a&gt;: &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn1&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Identity:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb2-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; runIdentity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Composition:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb3-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; getCompose &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute&lt;/span&gt; &lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb3-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; getCompose&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Naturality (ensured by parametricity):&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- For any natural transformation t&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb4-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- t :: (Functor f1, Functor f2) =&amp;gt; forall x. f1 x -&amp;gt; f2 x&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb4-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; t &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This naturality law is stronger than its &lt;code&gt;Traversable&lt;/code&gt; counterpart. The &lt;code&gt;Applicative&lt;/code&gt; constraint in &lt;code&gt;sequenceA&lt;/code&gt; means only natural transformations between applicative functors that preserve &lt;code&gt;pure&lt;/code&gt; and &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; are preserved by &lt;code&gt;distribute&lt;/code&gt;. In contrast, &lt;code&gt;distribute&lt;/code&gt; is oblivious to any specifics of &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt; functor, and so any natural transformation will do.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Homogeneous pairs are one example of a distributive functor:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; a a&lt;/span&gt; &lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Traversable&lt;/span&gt;)&lt;/span&gt; &lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;fstDuo,&lt;span class=&quot;ot&quot;&gt; sndDuo ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;fstDuo (&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; x _) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt; &lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;sndDuo (&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; _ y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; y&lt;/span&gt; &lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Distributive&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb5-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    distribute m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; (fstDuo &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) (sndDuo &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code&gt;Duo&lt;/code&gt; will be used in this post as a running example whenever a concrete illustration of &lt;code&gt;Distributive&lt;/code&gt; and adjacent classes is called for. For the moment, here is a simple demonstration of &lt;code&gt;distribute @Duo&lt;/code&gt; in action. It illustrates the zip-like flavour of &lt;code&gt;distribute&lt;/code&gt;, which is shared by the closely related &lt;code&gt;collect&lt;/code&gt; and &lt;code&gt;cotraverse&lt;/code&gt; from &lt;code&gt;Data.Distributive&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb6-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;names ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;]&lt;/span&gt; &lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb6-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;names &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb6-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    [ &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Alex&quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Lifeson&quot;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb6-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    , &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Geddy&quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Lee&quot;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb6-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    , &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Neil&quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Peart&quot;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb6-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb7-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ghci&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; distribute names&lt;/span&gt; &lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb7-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;Alex&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;Geddy&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;Neil&quot;&lt;/span&gt;] [&lt;span class=&quot;st&quot;&gt;&quot;Lifeson&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;Lee&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;Peart&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The function functor is a very important example of &lt;code&gt;Distributive&lt;/code&gt;. Consider the following combinator:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb8-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;flap ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f (r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt; &lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb8-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;flap m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\f &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f r) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;It changes a &lt;code&gt;f (r -&amp;gt; a)&lt;/code&gt; functorial value into a &lt;code&gt;r -&amp;gt; f a&lt;/code&gt; function, which feeds its argument to all of the available &lt;code&gt;r -&amp;gt; a&lt;/code&gt; functions. &lt;code&gt;flap&lt;/code&gt; is a lawful implementation of &lt;code&gt;distribute&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb9-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Distributive&lt;/span&gt; ((&lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;) r) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb9-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    distribute &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; flap&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb10-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ghci&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; distribute [(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;op&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)] &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb10-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[&lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code&gt;flap&lt;/code&gt; will be used in this post as a synonym for &lt;code&gt;distribute @((-&amp;gt;) _)&lt;/code&gt; whenever convenient, or necessary to avoid circularity. &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn2&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id=&quot;representable&quot;&gt;Representable&lt;/h3&gt; &lt;p&gt;As for &lt;code&gt;Representable&lt;/code&gt;, for our immediate purposes it suffices to characterise it as a class for functors isomorphic to functions:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb11-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; g &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb11-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g&lt;/span&gt; &lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb11-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    tabulate ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g a&lt;/span&gt; &lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb11-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    index ::&lt;/span&gt; g a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Here, &lt;code&gt;Rep g&lt;/code&gt; is some concrete type such that &lt;code&gt;tabulate&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; witness an isomorphism between &lt;code&gt;Rep g -&amp;gt; a&lt;/code&gt; and &lt;code&gt;g a&lt;/code&gt;. Accordingly, the laws are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Home direction (from &lt;code&gt;g a&lt;/code&gt; and back):&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb12-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Away direction (to &lt;code&gt;g a&lt;/code&gt; and back):&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb13-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; tabulate &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;Duo&lt;/code&gt; can be given a &lt;code&gt;Representable&lt;/code&gt; instance: pick &lt;code&gt;Bool&lt;/code&gt; (or any other type with two inhabitants) as &lt;code&gt;Rep g&lt;/code&gt;, and associate each possible value with a component of the pair:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb14-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb14-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb14-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    tabulate f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; (f &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;) (f &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;)&lt;/span&gt; &lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb14-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; x y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb14-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt; &lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb14-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;In order to treat the two classes in an even-handed way, I have opted to leave out the &lt;code&gt;Distributive g =&amp;gt; Representable g&lt;/code&gt; relationship that exists in the &lt;code&gt;Data.Functor.Rep&lt;/code&gt; version of &lt;code&gt;Representable&lt;/code&gt; . In any case, every representable is indeed distributive, with a default definition of &lt;code&gt;distribute&lt;/code&gt; which uses the isomorphism to delegate to &lt;code&gt;flap&lt;/code&gt; (that is, &lt;code&gt;distribute&lt;/code&gt; for functions):&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb15-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;distributeRep ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; g, &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f (g a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g (f a)&lt;/span&gt; &lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb15-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distributeRep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The lawfulness of &lt;code&gt;distributeRep&lt;/code&gt; follows from the lawfulness of &lt;code&gt;flap&lt;/code&gt;. &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn3&quot; id=&quot;fnref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Our ultimate aim here is to go the other way around, from &lt;code&gt;Distributive&lt;/code&gt; to &lt;code&gt;Representable&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;no-need-to-choose&quot;&gt;No need to choose&lt;/h2&gt; &lt;p&gt;If we are to start from &lt;code&gt;Distributive&lt;/code&gt;, though, there is a pretty fundamental difficulty: setting up a &lt;code&gt;Representable g&lt;/code&gt; instance requires picking a suitable &lt;code&gt;Rep g&lt;/code&gt;, and there is nothing in &lt;code&gt;Distributive&lt;/code&gt; that could possibly correspond to such a choice. That being so, we will spend some more time contemplating &lt;code&gt;Representable&lt;/code&gt;, looking for a way to somehow obviate the need for specifying &lt;code&gt;Rep g&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&quot;askrep&quot;&gt;askRep&lt;/h3&gt; &lt;p&gt;Let’s have another look at the type of &lt;code&gt;tabulate&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb17-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;tabulate ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code&gt;tabulate&lt;/code&gt; is a natural transformation from the function functor &lt;code&gt;((-&amp;gt;) (Rep g)&lt;/code&gt; to &lt;code&gt;g&lt;/code&gt;. Now, all natural transformations from a function functor have the form: &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn4&quot; id=&quot;fnref4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb18-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- For some type R, functor G, and any&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb18-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;t ::&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; x&lt;/span&gt; &lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb18-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- There is a&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb18-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;w ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;R&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb18-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb18-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Such that&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb18-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb18-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;t f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; w&lt;/span&gt; &lt;span id=&quot;cb18-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb18-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;w &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; t &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;In words, the natural transformation must amount to mapping the function over some functorial value. In our case, &lt;code&gt;t&lt;/code&gt; is &lt;code&gt;tabulate&lt;/code&gt;; as for &lt;code&gt;w&lt;/code&gt;, we will call it &lt;code&gt;askRep&lt;/code&gt;, which is &lt;a href=&quot;https://hackage.haskell.org/package/adjunctions-4.4/docs/src/Data-Functor-Rep.html#askRep&quot;&gt;the name it goes by in &lt;code&gt;Data.Functor.Rep&lt;/code&gt;&lt;/a&gt;. &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn5&quot; id=&quot;fnref5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;. That being so, we have:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb19-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;askRep ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; g (&lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g)&lt;/span&gt; &lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb19-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;askRep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; tabulate &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb19-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb19-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb19-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The &lt;code&gt;Representable&lt;/code&gt; laws can be recast in terms of &lt;code&gt;askRep&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt;. Here is the home direction of the isomorphism:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb20-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb20-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate (&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb20-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb20-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;That is, we can reconstruct any &lt;code&gt;u :: g a&lt;/code&gt; by taking &lt;code&gt;askRep&lt;/code&gt; and replacing every &lt;code&gt;Rep g&lt;/code&gt; provided by it with the &lt;code&gt;a&lt;/code&gt; value that applying &lt;code&gt;index u&lt;/code&gt; on it gives us.&lt;/p&gt; &lt;p&gt;It is worth noting that &lt;code&gt;index u &amp;lt;$&amp;gt; askRep = u&lt;/code&gt; also tells us that for any &lt;code&gt;u :: g a&lt;/code&gt; there is a function (namely, &lt;code&gt;index u&lt;/code&gt;) which will change &lt;code&gt;askRep&lt;/code&gt; into &lt;code&gt;u&lt;/code&gt; through &lt;code&gt;fmap&lt;/code&gt;. That largely corresponds to the intuition that a representable functor must have a single shape.&lt;/p&gt; &lt;p&gt;The away direction of the isomorphism becomes:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; tabulate &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb21-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; (f &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt; &lt;span id=&quot;cb21-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- index is a natural transformation&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb21-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; askRep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt; &lt;span id=&quot;cb21-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap @((-&amp;gt;) _) = (.)&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb21-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; askRep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt; &lt;span id=&quot;cb21-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- In particular, suppose f = id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb21-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (note that this step is reversible)&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb21-9&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb21-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; askRep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Intuitively, if we think of &lt;code&gt;Rep g&lt;/code&gt; values as corresponding to positions in the &lt;code&gt;g&lt;/code&gt; shape that can be queried through &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;index askRep = id&lt;/code&gt; tells us that each and every &lt;code&gt;Rep g&lt;/code&gt; will be found in &lt;code&gt;askRep&lt;/code&gt; occupying the position it corresponds to. For example, with the &lt;code&gt;Representable&lt;/code&gt; instance from the previous section, &lt;code&gt;askRep @Duo&lt;/code&gt; looks like this:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb22-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ghci&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; askRep &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb22-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb22-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Lastly, we can also express &lt;code&gt;distributeRep&lt;/code&gt; in terms of &lt;code&gt;askRep&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb23&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb23-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb23-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distributeRep m&lt;/span&gt; &lt;span id=&quot;cb23-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb23-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate (flap (&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m))&lt;/span&gt; &lt;span id=&quot;cb23-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb23-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;flap (&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep&lt;/span&gt; &lt;span id=&quot;cb23-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb23-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\f &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f r) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep&lt;/span&gt; &lt;span id=&quot;cb23-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb23-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u r) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep&lt;/span&gt; &lt;span id=&quot;cb23-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb23-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb23-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb23-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distributeRep m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u r) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;That is, replace every &lt;code&gt;Rep g&lt;/code&gt; in &lt;code&gt;askRep&lt;/code&gt; with the result of using it to &lt;code&gt;index&lt;/code&gt; every &lt;code&gt;g a&lt;/code&gt; in &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&quot;extracting-and-revealing&quot;&gt;Extracting and revealing&lt;/h3&gt; &lt;p&gt;Now let’s direct our attention to &lt;code&gt;index&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb24&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb24-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb24-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; g a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Flipping &lt;code&gt;index&lt;/code&gt; gives us:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb25&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb25-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb25-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fromRep ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb25-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb25-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;fromRep r &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code&gt;fromRep&lt;/code&gt; converts a &lt;code&gt;Rep g&lt;/code&gt; into what I will call a &lt;em&gt;polymorphic extractor&lt;/em&gt;, of type &lt;code&gt;forall a. g a -&amp;gt; a&lt;/code&gt;, which gives us &lt;code&gt;a&lt;/code&gt; out of &lt;code&gt;g a&lt;/code&gt;. The existence of &lt;code&gt;fromRep&lt;/code&gt; is quite suggestive. Since &lt;code&gt;forall a. g a -&amp;gt; a&lt;/code&gt; doesn’t use &lt;code&gt;Rep g&lt;/code&gt;, finding an inverse to &lt;code&gt;fromRep&lt;/code&gt;, and thus showing those two types are isomorphic, might give us a way to work with &lt;code&gt;Representable&lt;/code&gt; without relying on &lt;code&gt;Rep g&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;How might we go about converting a polymorphic extractor into a &lt;code&gt;Rep g&lt;/code&gt; value? To do it in a non-trivial way , we will need a &lt;code&gt;g (Rep g)&lt;/code&gt; source of &lt;code&gt;Rep g&lt;/code&gt; on which we can use the extractor. Considering the discussion in the previous subsection, &lt;code&gt;askRep&lt;/code&gt; looks like a reasonable option:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb26&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb26-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb26-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;toRep ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Representable&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rep&lt;/span&gt; g&lt;/span&gt; &lt;span id=&quot;cb26-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb26-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;toRep p &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p askRep&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Now let’s check if &lt;code&gt;fromRep&lt;/code&gt; and &lt;code&gt;toRep&lt;/code&gt; are indeed inverses, beginning with the &lt;code&gt;toRep . fromRep&lt;/code&gt; direction:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb27&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb27-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb27-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;toRep &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; fromRep&lt;/span&gt; &lt;span id=&quot;cb27-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb27-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p askRep) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (\r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u r)&lt;/span&gt; &lt;span id=&quot;cb27-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb27-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u r) askRep&lt;/span&gt; &lt;span id=&quot;cb27-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb27-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; askRep r&lt;/span&gt; &lt;span id=&quot;cb27-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb27-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- index askRep = id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb27-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb27-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;We can proceed similarly with &lt;code&gt;fromRep . toRep&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb28&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb28-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb28-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;fromRep &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; toRep&lt;/span&gt; &lt;span id=&quot;cb28-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb28-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u r) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p askRep)&lt;/span&gt; &lt;span id=&quot;cb28-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb28-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u (p askRep)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;To simplify this further, we can note that a polymorphic extractor &lt;code&gt;forall x. g x -&amp;gt; x&lt;/code&gt; amounts to natural transformation from &lt;code&gt;g&lt;/code&gt; to &lt;code&gt;Identity&lt;/code&gt;. That being so, we have, for any extractor &lt;code&gt;p&lt;/code&gt; and any &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb29&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb29-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb29-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; p &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The above is the usual naturality property, &lt;code&gt;fmap f . p = p . fmap f&lt;/code&gt;, except that, to account for the omission of the &lt;code&gt;Identity&lt;/code&gt; newtype boilerplate, &lt;code&gt;fmap @Identity&lt;/code&gt; has been replaced on the left-hand side by plain function application. We can now carry on:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb30&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb30-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb30-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u (p askRep)&lt;/span&gt; &lt;span id=&quot;cb30-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb30-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p (&lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; askRep)&lt;/span&gt; &lt;span id=&quot;cb30-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb30-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- index u &amp;lt;$&amp;gt; askRep = u&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb30-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb30-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u&lt;/span&gt; &lt;span id=&quot;cb30-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb30-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;And there it is: for any &lt;code&gt;Representable&lt;/code&gt;, &lt;code&gt;Rep g&lt;/code&gt; must be isomorphic to &lt;code&gt;forall x. g x -&amp;gt; x&lt;/code&gt;. That being so, we can use &lt;code&gt;forall x. g x -&amp;gt; x&lt;/code&gt; as a default &lt;code&gt;Rep g&lt;/code&gt; that can be specified in terms of &lt;code&gt;g&lt;/code&gt; alone. The change of perspective can be made clearer by setting up an alternative class:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb31&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb31-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Pos&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt; &lt;span id=&quot;cb31-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb31-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;elide ::&lt;/span&gt; g a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Pos&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb31-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;elide u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u&lt;/span&gt; &lt;span id=&quot;cb31-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb31-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Revealable&lt;/span&gt; g &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb31-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    reveal ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Pos&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g a&lt;/span&gt; &lt;span id=&quot;cb31-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    chart ::&lt;/span&gt; g (&lt;span class=&quot;dt&quot;&gt;Pos&lt;/span&gt; g)&lt;/span&gt; &lt;span id=&quot;cb31-9&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb31-10&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    reveal e &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; e &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chart&lt;/span&gt; &lt;span id=&quot;cb31-11&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    chart &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; reveal &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb31-12&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb31-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;{-# MINIMAL reveal | chart #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Both the arrangement of those definitions and my idiosyncratic choice of names call for some explanation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;code&gt;Pos g&lt;/code&gt; is a synonym for the type of polymorphic extractors. The name &lt;code&gt;Pos&lt;/code&gt; is short for “position”, and is meant to allude to the intuition that an extractor picks a value from some specific position in a &lt;code&gt;g&lt;/code&gt;-shaped structure.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;code&gt;elide&lt;/code&gt; corresponds to &lt;code&gt;index&lt;/code&gt;, defined in such a way that &lt;code&gt;fromRep =   id&lt;/code&gt;. Since all it does is applying a &lt;code&gt;Pos g&lt;/code&gt; extractor, on its own it doesn’t require any constraints on &lt;code&gt;g&lt;/code&gt;. The choice of name is motivated by how &lt;code&gt;elide&lt;/code&gt; hides the &lt;code&gt;g&lt;/code&gt; shape, in that that the only information about &lt;code&gt;u :: g a&lt;/code&gt; that can be recovered from &lt;code&gt;elide u&lt;/code&gt; are the &lt;code&gt;a&lt;/code&gt; values that a &lt;code&gt;Pos g&lt;/code&gt; extractor can reach.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;code&gt;reveal&lt;/code&gt;, in turn, corresponds to &lt;code&gt;tabulate&lt;/code&gt;, and is the inverse of &lt;code&gt;elide&lt;/code&gt;. If &lt;code&gt;g&lt;/code&gt; is &lt;code&gt;Representable&lt;/code&gt;, the &lt;code&gt;g&lt;/code&gt; shape can be reconstituted with no additional information, and so it is possible to undo the hiding performed by &lt;code&gt;elide&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;code&gt;chart&lt;/code&gt; corresponds to &lt;code&gt;askRep&lt;/code&gt;, with it and &lt;code&gt;reveal&lt;/code&gt; being interdefinable. In particular, &lt;code&gt;chart&lt;/code&gt; can be used to reveal the &lt;code&gt;g   a&lt;/code&gt; that corresponds to a &lt;code&gt;Pos g -&amp;gt; a&lt;/code&gt; function by providing the means to reach every position in the &lt;code&gt;g&lt;/code&gt; shape. &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn6&quot; id=&quot;fnref6&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here is the &lt;code&gt;Duo&lt;/code&gt; instance of &lt;code&gt;Revealable&lt;/code&gt;. Note how each position in &lt;code&gt;chart&lt;/code&gt; holds its own extractor:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb32&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb32-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb32-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Revealable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb32-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb32-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    reveal e &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; (e fstDuo) (e sndDuo)&lt;/span&gt; &lt;span id=&quot;cb32-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb32-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    chart &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; fstDuo sndDuo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code&gt;distribute&lt;/code&gt; can be implemented for &lt;code&gt;Revealable&lt;/code&gt; in a way completely analogous to how it was done for &lt;code&gt;Representable&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb33&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb33-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb33-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;distributeRev ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Revealable&lt;/span&gt; g, &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f (g a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; g (f a)&lt;/span&gt; &lt;span id=&quot;cb33-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb33-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distributeRev &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; reveal &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; elide&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Or, in terms of &lt;code&gt;chart&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb34&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb34-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb34-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distributeRev m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chart&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;That is, &lt;code&gt;distributeRev m&lt;/code&gt; amounts to mapping every extractor in &lt;code&gt;chart&lt;/code&gt; over &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;As for the laws, just like we were able to choose between expressing the &lt;code&gt;Representable&lt;/code&gt; isomorphism directly, via &lt;code&gt;tabulate&lt;/code&gt;, or indirectly via &lt;code&gt;askRep&lt;/code&gt;, here we can use either &lt;code&gt;reveal&lt;/code&gt; or &lt;code&gt;chart&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb35&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb35-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb35-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;reveal &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; elide &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb35-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb35-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Or, equivalently&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb35-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb35-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;elide u &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chart &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb35-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb35-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb35-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb35-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;elide &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; reveal &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb35-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb35-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Or, equivalently&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb35-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb35-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;p chart &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;With &lt;code&gt;Revealable&lt;/code&gt;, though, we can streamline things by showing &lt;code&gt;p chart = p&lt;/code&gt; follows from &lt;code&gt;elide u &amp;lt;$&amp;gt; chart = u&lt;/code&gt;. The proof relies on the naturality of the polymorphic extractors:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb36&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb36-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;elide u &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chart &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb36-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Apply some p :: Pos g to both sides&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb36-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;p (elide u &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chart) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p u&lt;/span&gt; &lt;span id=&quot;cb36-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- p is natural&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb36-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;elide u (p chart) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p u&lt;/span&gt; &lt;span id=&quot;cb36-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- elide u p = p u&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb36-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(p chart) u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p u&lt;/span&gt; &lt;span id=&quot;cb36-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u is arbitrary&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb36-9&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb36-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;p chart &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;That being so, &lt;code&gt;elide u &amp;lt;$&amp;gt; chart = u&lt;/code&gt; is the only law we need to characterise &lt;code&gt;Revealable&lt;/code&gt;. Since &lt;code&gt;elide&lt;/code&gt; does not depend on the &lt;code&gt;Revealable&lt;/code&gt; instance, we might as well inline its definition, which leaves us with:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb37&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb37-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb37-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chart &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;I suggest calling it the &lt;em&gt;law of extractors&lt;/em&gt;: it tells us that the extractors provided by &lt;code&gt;chart&lt;/code&gt; suffice to reconstitute an arbitrary &lt;code&gt;g a&lt;/code&gt; value.&lt;/p&gt; &lt;h2 id=&quot;revisiting-distributive&quot;&gt;Revisiting Distributive&lt;/h2&gt; &lt;p&gt;In &lt;code&gt;Revealable&lt;/code&gt;, we have a class equivalent to &lt;code&gt;Representable&lt;/code&gt; which doesn’t rely on the &lt;code&gt;Rep&lt;/code&gt; type family. That makes it feasible to continue our investigation by attempting to show that every &lt;code&gt;Distributive&lt;/code&gt; functor is &lt;code&gt;Revealable&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&quot;natural-wonders&quot;&gt;Natural wonders&lt;/h3&gt; &lt;p&gt;Naturality laws and parametricity properties not infrequently have interesting consequences that seem to us as hidden in plain sight. Considering the increased strength of &lt;code&gt;Distributive&lt;/code&gt;’s naturality law relative to its &lt;code&gt;Traversable&lt;/code&gt; counterpart and the important role naturality properties had in setting up &lt;code&gt;Revealable&lt;/code&gt;, resuming our work on &lt;code&gt;Distributive&lt;/code&gt; from the naturality law sounds like a reasonable bet:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb38&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb38-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb38-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- For any natural transformation t&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb38-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb38-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- t :: (Functor f1, Functor f2) =&amp;gt; forall x. f1 x -&amp;gt; f2 x&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb38-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb38-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; t &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;In particular, suppose &lt;code&gt;f1&lt;/code&gt; is a function functor:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb39&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb39-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb39-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- t :: Functor f =&amp;gt; forall x. (r -&amp;gt; x) -&amp;gt; f x&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb39-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb39-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;t &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute (t f)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Now, by the same argument used back when we defined &lt;code&gt;askRep&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt; must have the form:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb40&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb40-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb40-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- m :: f r&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb40-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb40-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;t f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Therefore:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb41&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb41-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb41-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute (f &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;In particular, suppose &lt;code&gt;f = id&lt;/code&gt;. We then end up with an specification of &lt;code&gt;distribute&lt;/code&gt; in terms of &lt;code&gt;distribute id&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb42&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb42-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb42-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;code&gt;distribute id&lt;/code&gt; has the following type:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb43&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb43-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb43-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ghci&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;t distribute &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb43-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb43-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distribute&lt;span class=&quot;ot&quot;&gt; id ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Distributive&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; g (g a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This looks a lot like something that holds extractors, and the specification itself mirrors the definition of &lt;code&gt;distributeRev&lt;/code&gt; in terms of &lt;code&gt;chart&lt;/code&gt;. As a preliminary check, &lt;code&gt;distribute @Duo id&lt;/code&gt; holds &lt;code&gt;fstDuo&lt;/code&gt; and &lt;code&gt;sndDuo&lt;/code&gt; on their respective positions, exactly like &lt;code&gt;chart @Duo&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb44&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb44-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb44-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distribute &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb44-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb44-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; fstDuo) (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; sndDuo)&lt;/span&gt; &lt;span id=&quot;cb44-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb44-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Duo&lt;/span&gt; fstDuo sndDuo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Given the clear resemblance, I will optimistically refer to &lt;code&gt;distribute id&lt;/code&gt; as &lt;code&gt;chartDist&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb45&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb45-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb45-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;chartDist ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Distributive&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; g (g a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt; &lt;span id=&quot;cb45-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb45-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;chartDist &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;We therefore have:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb46&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb46-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb46-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distribute m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Now suppose &lt;code&gt;m = Identity u&lt;/code&gt; for some &lt;code&gt;u :: g a&lt;/code&gt;, and invoke the identity law:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb47&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb47-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distribute (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb47-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distribute (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; (p u)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb47-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u)&lt;/span&gt; &lt;span id=&quot;cb47-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; ((\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; (p u)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist)&lt;/span&gt; &lt;span id=&quot;cb47-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u)&lt;/span&gt; &lt;span id=&quot;cb47-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; runIdentity (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; (p u))) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb47-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u)&lt;/span&gt; &lt;span id=&quot;cb47-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb47-9&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- By the identity law&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb47-10&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb47-11&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb47-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;We therefore have a &lt;code&gt;Distributive&lt;/code&gt; version of the law of extractors, with &lt;code&gt;chartDist&lt;/code&gt; playing the role of &lt;code&gt;chart&lt;/code&gt;. It is also possible to turn things around and obtain the identity law from this law of extractors:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb48&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb48-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb48-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb48-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; (p u)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb48-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb48-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- distribute m = (\p -&amp;gt; p &amp;lt;$&amp;gt; m) &amp;lt;$&amp;gt; chartDist&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb48-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb48-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; runIdentity (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; u)&lt;/span&gt; &lt;span id=&quot;cb48-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb48-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; runIdentity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;These are auspicious results. Given that the law of extractors is enough to establish an implementation of &lt;code&gt;chart&lt;/code&gt; as lawful, and that there can’t be multiple distinct lawful implementations of &lt;code&gt;distribute&lt;/code&gt; &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn7&quot; id=&quot;fnref7&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;, all we need to do is to identify &lt;code&gt;chartDist&lt;/code&gt; with &lt;code&gt;chart&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&quot;the-roadblock-and-a-detour&quot;&gt;The roadblock, and a detour&lt;/h3&gt; &lt;p&gt;Identifying &lt;code&gt;chartDist&lt;/code&gt; with &lt;code&gt;chart&lt;/code&gt;, however, is not trivial. As similar as &lt;code&gt;chart&lt;/code&gt; and &lt;code&gt;chartDist&lt;/code&gt; might feel like, their types differ in an insurmountable way:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb49&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb49-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb49-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;chart &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;     ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)  &lt;span class=&quot;co&quot;&gt;-- G (Pos G)&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb49-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb49-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;chartDist &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;In particular:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;The &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;forall a. G (G a -&amp;gt; a)&lt;/code&gt; can be directly specialised to a concrete choice of &lt;code&gt;a&lt;/code&gt;, and, as far as the specialised type &lt;code&gt;G (G A -&amp;gt; A)&lt;/code&gt; is concerned, it is conceivable that the involved &lt;code&gt;G A -&amp;gt; A&lt;/code&gt; functions might not be natural in &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Accordingly, a rank-2 function that takes a &lt;code&gt;Pos G&lt;/code&gt;, such as the argument to &lt;code&gt;reveal&lt;/code&gt;, can be mapped over &lt;code&gt;chart&lt;/code&gt;, but not &lt;code&gt;chartDist&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;There is no way to obtain the impredicative type of &lt;code&gt;chart&lt;/code&gt;, or the rank-3 type of &lt;code&gt;reveal&lt;/code&gt;, through &lt;code&gt;distribute&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To put it in another way, &lt;code&gt;chartDist&lt;/code&gt; doesn’t have a type strong enough to, on its own, ensure that it provides natural, polymorphic extractors, and &lt;code&gt;Distributive&lt;/code&gt; is not enough to implement a &lt;code&gt;chart&lt;/code&gt; which provides such guarantees.&lt;/p&gt; &lt;p&gt;Still, not all is lost. If there is a way to use the laws of &lt;code&gt;Distributive&lt;/code&gt; to show that the extractors of &lt;code&gt;chartDist&lt;/code&gt; are natural, we should be able to claim &lt;code&gt;chart&lt;/code&gt; and &lt;code&gt;chartDist&lt;/code&gt; are morally the same, providing the same extractors with subtly different types.&lt;/p&gt; &lt;p&gt;(Meta note: while I believe the following argument suffices for the task at hand, it is not as crystalline as the derivations elsewhere in this post. Upgrading it to a proper proof will probably require some tricky parametricity maneuver which I haven’t managed to fully figure out yet.)&lt;/p&gt; &lt;p&gt;Let’s turn to the composition law, the one we haven’t touched so far:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb50&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb50-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb50-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; getCompose &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; getCompose&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;That is, given some &lt;code&gt;m :: Compose fo fi (g a)&lt;/code&gt; (“o” is for outer, and “i” for inner):&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb51&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb51-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb51-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;getCompose &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; distribute m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distribute (distribute &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Let’s use &lt;code&gt;distribute m = (\p -&amp;gt; p &amp;lt;$&amp;gt; m) &amp;lt;$&amp;gt; chartDist&lt;/code&gt; on the left-hand side, and on the outer &lt;code&gt;distribute&lt;/code&gt; on the right-hand side:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb52&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb52-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb52-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;getCompose &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; ((\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist)&lt;/span&gt; &lt;span id=&quot;cb52-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb52-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\q &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (distribute &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Note that the left-hand side &lt;code&gt;chartDist&lt;/code&gt; has type &lt;code&gt;g (g a -&amp;gt; a)&lt;/code&gt;, while the right-hand side one has type &lt;code&gt;g (g (fi a) -&amp;gt; fi a)&lt;/code&gt;. Since we can’t take for granted that the extractors provided by them (which are bound to &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;, respectively) are natural, it is important to keep track of this difference.&lt;/p&gt; &lt;p&gt;Tidying the equation a little further, we get:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb53&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb53-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb53-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;getCompose &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; ((\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist)&lt;/span&gt; &lt;span id=&quot;cb53-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb53-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\q &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (distribute &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb53-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb53-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; getCompose (p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb53-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb53-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\q &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb53-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb53-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb53-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb53-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\q &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;On either side of the equation, we have &lt;code&gt;fmap&lt;/code&gt; being used to obtain a &lt;code&gt;g (fo (fi a))&lt;/code&gt; result. That being so, any &lt;code&gt;fo (fi a)&lt;/code&gt; value that, thanks to &lt;code&gt;fmap&lt;/code&gt;, shows up in the left-hand side must also show up in the right-hand side. More precisely, given any &lt;code&gt;p :: g a -&amp;gt; a&lt;/code&gt; drawn from &lt;code&gt;chartDist&lt;/code&gt; on the left-hand side, there must be some &lt;code&gt;q :: g (fi a) -&amp;gt; fi a&lt;/code&gt; drawn from the &lt;code&gt;chartDist&lt;/code&gt; on the right hand side such that…&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb54&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb54-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb54-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;… and vice versa. That allows us to reason about &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;, which amount to the extractors drawn from &lt;code&gt;chartDist&lt;/code&gt; we are interested in.&lt;/p&gt; &lt;p&gt;As neither &lt;code&gt;p&lt;/code&gt; nor &lt;code&gt;q&lt;/code&gt; involve &lt;code&gt;fo&lt;/code&gt;, and the equation must hold for all choices of &lt;code&gt;fo&lt;/code&gt;, we can freely consider the case in which it is &lt;code&gt;Identity&lt;/code&gt;, or anything else that has an injective &lt;code&gt;fmap&lt;/code&gt;. If &lt;code&gt;fmap&lt;/code&gt; is injective, the equation further simplifies to:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb55&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb55-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb55-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; p &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Now, &lt;code&gt;fmap p :: fi (g a) -&amp;gt; fi a&lt;/code&gt; cannot affect the &lt;code&gt;fi&lt;/code&gt; shape; therefore, the same holds for &lt;code&gt;q . distribute :: fi (g a) -&amp;gt;  fi a&lt;/code&gt;. &lt;code&gt;distribute :: fi (g a) -&amp;gt; g (fi a)&lt;/code&gt; is natural in &lt;code&gt;fi&lt;/code&gt;, and so it, too, can’t affect the &lt;code&gt;fi&lt;/code&gt; shape. It follows that &lt;code&gt;q :: g (fi a) -&amp;gt; fi a&lt;/code&gt; is also unable to affect the &lt;code&gt;fi&lt;/code&gt; shape.&lt;/p&gt; &lt;p&gt;Zooming back out, we have just established that, if the composition law holds, &lt;code&gt;chartDist :: g (g (fi a) -&amp;gt; fi a)&lt;/code&gt; only provides extractors that preserve the &lt;code&gt;fi&lt;/code&gt; shape. &lt;code&gt;chartDist&lt;/code&gt;, however, is defined as &lt;code&gt;distribute id :: forall b. g (g b -&amp;gt; b)&lt;/code&gt;, which is fully polymorphic on the element type &lt;code&gt;b&lt;/code&gt;. That being so, if there is a way for &lt;code&gt;distribute id&lt;/code&gt; to somehow produce non-natural extractors, it cannot possibly rely in any way about the specifics of &lt;code&gt;b&lt;/code&gt;. That, in particular, rules out any means of, given &lt;code&gt;b ~ fi a&lt;/code&gt; for some functor &lt;code&gt;fi&lt;/code&gt;, producing just non-natural extractors that preserve the &lt;code&gt;fi&lt;/code&gt; shape: such a distinction cannot be expressed. We must conclude, therefore, that if the composition law holds &lt;code&gt;chartDist&lt;/code&gt; can only provide natural extractors, as we hoped to show.&lt;/p&gt; &lt;p&gt;The converse of this conclusion, by the way, also holds: assuming the identity law holds, if all &lt;code&gt;q&lt;/code&gt; drawn from &lt;code&gt;chartDist&lt;/code&gt; are natural, the composition law must hold. To show that, we can use the fact that, for a natural &lt;code&gt;q :: forall x. g x -&amp;gt; x&lt;/code&gt;, &lt;code&gt;q chartDist = q&lt;/code&gt; holds, just like it does for &lt;code&gt;chart&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb56&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb56-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb56-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb56-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb56-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;q ((\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist)) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; q u&lt;/span&gt; &lt;span id=&quot;cb56-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb56-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Since q is natural, q . fmap f = f . q&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb56-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb56-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) (q chartDist) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; q u&lt;/span&gt; &lt;span id=&quot;cb56-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb56-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(q chartDist) u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; q u&lt;/span&gt; &lt;span id=&quot;cb56-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb56-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;q chartDist &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; q&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;As a consequence, &lt;code&gt;q . distribute = fmap q&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb57&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb57-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb57-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;q (distribute m)&lt;/span&gt; &lt;span id=&quot;cb57-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb57-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;q ((\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist)&lt;/span&gt; &lt;span id=&quot;cb57-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb57-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- q is natural&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb57-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb57-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) (q chartDist)&lt;/span&gt; &lt;span id=&quot;cb57-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb57-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m) q&lt;/span&gt; &lt;span id=&quot;cb57-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb57-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;q &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;We can now return to the rearranged version of the composition law we were dealing with in the preceding argument, this time without taking it for granted:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb58&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb58-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb58-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt; &lt;span id=&quot;cb58-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb58-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\q &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distribute &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;By the above, however, if &lt;code&gt;q&lt;/code&gt; is natural the right-hand side amounts to…&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb59&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb59-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb59-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\q &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; q &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getCompose m) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartDist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;… which is the same as the left-hand side.&lt;/p&gt; &lt;h3 id=&quot;in-summary&quot;&gt;In summary&lt;/h3&gt; &lt;p&gt;After quite a long ride, we have managed to shed some light on the connection between &lt;code&gt;Distributive&lt;/code&gt; and &lt;code&gt;Representable&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Every &lt;code&gt;Distributive&lt;/code&gt; is indeed &lt;code&gt;Representable&lt;/code&gt;, even though, as expected, &lt;code&gt;Representable&lt;/code&gt; cannot be implemented in terms of &lt;code&gt;distribute&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;The connection is mediated by choosing &lt;code&gt;forall x. g x -&amp;gt; x&lt;/code&gt;, the type of polymorphic extractors, as a default representation, encoded here as the &lt;code&gt;Revealable&lt;/code&gt; class. It can then be shown that this representation is mirrored in &lt;code&gt;Distributive&lt;/code&gt; by &lt;code&gt;chartDist =   distribute id :: Distributive g =&amp;gt; g (g a -&amp;gt; a)&lt;/code&gt;, which gives a corresponding characterisation of &lt;code&gt;Distributive&lt;/code&gt; in terms of extractors.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;The single-shapedness characteristic of both distributive and representable functors follows from the identity law of &lt;code&gt;Distributive&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;The composition law plays an important, if unobvious, role in the connection, as it ensures the naturality of the extractors provided by &lt;code&gt;chartDist&lt;/code&gt;, a property that can’t be established on the basis of the involved types.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;the-select-loophole&quot;&gt;The Select loophole&lt;/h2&gt; &lt;p&gt;There is one aspect of our investigation that is worth a closer look. All the concern with establishing that &lt;code&gt;chartDist&lt;/code&gt; can only provide natural extractors, which kept us busy for a good chunk of the previous section, might have felt surprising. &lt;code&gt;chartDist&lt;/code&gt;, after all…&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb60&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb60-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb60-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;chartDist ::&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; g a&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Distributive&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; g (g a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;… is fully polymorphic in &lt;code&gt;a&lt;/code&gt;, and therefore its definition cannot rely on anything specific about &lt;code&gt;a&lt;/code&gt;. That being so, it may seem outlandish to suppose that specialising &lt;code&gt;chartDist&lt;/code&gt; to, say, &lt;code&gt;g (g Integer -&amp;gt; Integer)&lt;/code&gt; might somehow bring forth non-natural &lt;code&gt;g Integer -&amp;gt; Integer&lt;/code&gt; extractors that perform &lt;code&gt;Integer&lt;/code&gt;-specific operations.&lt;/p&gt; &lt;p&gt;To illustrate why the naturality of extractors is, in fact, a relevant issue, let’s consider the curious case of &lt;a href=&quot;https://hackage.haskell.org/package/transformers-0.6.0.2/docs/Control-Monad-Trans-Select.html&quot;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb61&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb61-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb61-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- A paraphrased, non-transformer version of Select.&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb61-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb61-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; r a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; runSelect ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a }&lt;/span&gt; &lt;span id=&quot;cb61-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb61-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb61-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb61-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; r) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb61-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb61-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f u &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \k &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f (u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k (f a))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;(A &lt;code&gt;Select r a&lt;/code&gt; value can be thought of as a way to choose an &lt;code&gt;a&lt;/code&gt; value based on some user-specified criterion, expressed as an &lt;code&gt;a -&amp;gt; r&lt;/code&gt; function.)&lt;/p&gt; &lt;p&gt;Corner cases such as &lt;code&gt;r ~ ()&lt;/code&gt; aside, &lt;code&gt;Select r&lt;/code&gt; cannot be &lt;code&gt;Representable&lt;/code&gt;, as that would require it to be isomorphic to a function functor; that being so, it should be similarly ill-suited for &lt;code&gt;Distributive&lt;/code&gt;. In spite of that, there is a nontrivial implementation of a &lt;code&gt;Select r&lt;/code&gt; combinator with the type &lt;code&gt;chartDist&lt;/code&gt; would have: &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn8&quot; id=&quot;fnref8&quot;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb62&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb62-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb62-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;chartSelect ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; r (&lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; r a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt; &lt;span id=&quot;cb62-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb62-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;chartSelect &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \k &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k (&lt;span class=&quot;fu&quot;&gt;const&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;What’s more, &lt;code&gt;chartSelect&lt;/code&gt; follows the law of extractors:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb63&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb63-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Goal:&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb63-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartSelect &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u&lt;/span&gt; &lt;span id=&quot;cb63-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- LHS&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb63-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; chartSelect&lt;/span&gt; &lt;span id=&quot;cb63-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \k &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k (&lt;span class=&quot;fu&quot;&gt;const&lt;/span&gt; a)&lt;/span&gt; &lt;span id=&quot;cb63-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \k' &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb63-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k' ((\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) (&lt;span class=&quot;fu&quot;&gt;const&lt;/span&gt; a)))&lt;/span&gt; &lt;span id=&quot;cb63-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \k' &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k' ((\p &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; p u) (&lt;span class=&quot;fu&quot;&gt;const&lt;/span&gt; a))&lt;/span&gt; &lt;span id=&quot;cb63-9&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \k' &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k' (&lt;span class=&quot;fu&quot;&gt;const&lt;/span&gt; a u)&lt;/span&gt; &lt;span id=&quot;cb63-10&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \k' &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k' a&lt;/span&gt; &lt;span id=&quot;cb63-11&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb63-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;u  &lt;span class=&quot;co&quot;&gt;-- LHS = RHS&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;That means the &lt;code&gt;distribute&lt;/code&gt; candidate we get out of &lt;code&gt;chartSelect&lt;/code&gt;…&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb64&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb64-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb64-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;nonDistribute ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f (&lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; r a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; r (f a)&lt;/span&gt; &lt;span id=&quot;cb64-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb64-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nonDistribute m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb64-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb64-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \k &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u &lt;span class=&quot;ot&quot;&gt;`runSelect`&lt;/span&gt; \a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; k (a &lt;span class=&quot;op&quot;&gt;&amp;lt;$&lt;/span&gt; m)) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;… follows the identity law. As &lt;code&gt;Select r&lt;/code&gt; is not supposed to be &lt;code&gt;Distributive&lt;/code&gt;, we expect &lt;code&gt;nonDistribute&lt;/code&gt; to break the composition law, and that is indeed what happens. &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn9&quot; id=&quot;fnref9&quot;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now, by the earlier arguments about the naturality of extractors, if a candidate implementation of &lt;code&gt;chartDist&lt;/code&gt; follows the extractors law and only provides natural extractors, the corresponding &lt;code&gt;distribute&lt;/code&gt; must follow the composition law. Since &lt;code&gt;chartSelect&lt;/code&gt; follows the extractors law but doesn’t give rise to a lawful &lt;code&gt;distribute&lt;/code&gt;, we must conclude that it provides non-natural extractors. How does that come to pass?&lt;/p&gt; &lt;p&gt;Every criterion function &lt;code&gt;k :: a -&amp;gt; r&lt;/code&gt; gives rise to a non-natural extractor for &lt;code&gt;Select r a&lt;/code&gt;, namely &lt;code&gt;\u -&amp;gt; u `runSelect` k :: Select a r -&amp;gt; a&lt;/code&gt;. &lt;code&gt;chartSelect&lt;/code&gt; indirectly makes all these non-natural extractors available through its own criterion argument, the &lt;code&gt;k&lt;/code&gt; that shows up in its definition. (How the encoding works can be seen in the verification above of the law of extractors: note how performing the &lt;code&gt;fmap&lt;/code&gt; between the third and fourth lines of the proof requires replacing &lt;code&gt;k :: (Select r a -&amp;gt; a) -&amp;gt; r&lt;/code&gt; with &lt;code&gt;k' :: a -&amp;gt; r&lt;/code&gt;.)&lt;/p&gt; &lt;p&gt;Non-naturality sneaking into &lt;code&gt;chartSelect&lt;/code&gt; has to do with &lt;code&gt;Select r&lt;/code&gt; not being a strictly positive functor; that is, it has an occurrence of the element type variable, &lt;code&gt;a&lt;/code&gt;, to the left of a function arrow. &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn10&quot; id=&quot;fnref10&quot;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; The lack of strict positivity creates a loophole, through which things can be incorporated to a &lt;code&gt;Select r a&lt;/code&gt; value without being specified. It is a plausible conjecture that the composition law of &lt;code&gt;Distributive&lt;/code&gt; is a way of ruling out functors that aren’t strictly positive, with lack of strict positivity being the only possible source of non-naturality in &lt;code&gt;chartDist&lt;/code&gt;, and any non-trivial lack of strict positivity leading to non-naturality and the composition law being broken. &lt;a class=&quot;footnote-ref&quot; href=&quot;https://duplode.github.io/rss.xml#fn11&quot; id=&quot;fnref11&quot;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt; &lt;p&gt;There are other interesting ways of approaching &lt;code&gt;Distributive&lt;/code&gt; and &lt;code&gt;Representable&lt;/code&gt; that I haven’t covered here to avoid making this post longer than it already is. Here are a few suggestions for further reading:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Chris Penner’s &lt;a href=&quot;https://chrispenner.ca/posts/adjunction-battleship&quot;&gt;&lt;em&gt;Adjunctions and Battleship&lt;/em&gt;&lt;/a&gt; post is a fine introduction to &lt;a href=&quot;https://hackage.haskell.org/package/adjunctions-4.4/docs/Data-Functor-Adjunction.html&quot;&gt;&lt;code&gt;Adjunction&lt;/code&gt;&lt;/a&gt;, the class for &lt;strong&gt;Hask&lt;/strong&gt;-&lt;strong&gt;Hask&lt;/strong&gt; adjunctions, which provides an alternative encoding of &lt;code&gt;Representable&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;The following Stack Overflow answers by Conor McBride on &lt;em&gt;Naperian functors&lt;/em&gt;, “Naperian” here being an alternative name for &lt;code&gt;Representable&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/46502280/2751851&quot;&gt;&lt;em&gt;Which Haskell Functors are equivalent to the Reader functor&lt;/em&gt;&lt;/a&gt;, which introduces Naperian functors in a style reminiscent of the &lt;code&gt;askRep&lt;/code&gt;-centric formuation of &lt;code&gt;Representable&lt;/code&gt; discussed here.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/13100857/2751851&quot;&gt;&lt;em&gt;Writing cojoin or cobind for n-dimensional grid type&lt;/em&gt;&lt;/a&gt;, which includes an outline of how Naperian functors are handled by container theory.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;On a final note, there is a &lt;a href=&quot;https://github.com/ekmett/distributive/blob/117377d7ba38efc5b115169b565dfb80de8ad407/src/Data/Rep/Internal.hs&quot;&gt;reworking of &lt;code&gt;Representable&lt;/code&gt;&lt;/a&gt; being developed as part of a potential future release of the &lt;em&gt;distributive&lt;/em&gt; package. It aims at unifying the presentations of distributive into a single class that fits equally well the various use cases. An overview of how this new formulation could be a nice topic for a future, follow-up post.&lt;/p&gt; &lt;section class=&quot;footnotes footnotes-end-of-document&quot;&gt; &lt;hr /&gt; &lt;ol&gt; &lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;The &lt;code&gt;Data.Distributive&lt;/code&gt; documentation, as of the version 0.6.2.1 of the &lt;em&gt;distributive&lt;/em&gt; package, mentions a different set of properties in lieu of these laws, the crucial one being &lt;code&gt;distribute . distribute = id&lt;/code&gt;. Though that is a viable approach, I feel that in the context of what this post aims at such a formulation raises more questions than they answer. (For instance, regarding &lt;code&gt;distribute .  distribute = id&lt;/code&gt;: Are there two &lt;code&gt;Distributive&lt;/code&gt; instances involved? If so, how are we supposed to check that an individual instance is lawful? Does that law correspond to anything from &lt;code&gt;Traversable&lt;/code&gt;?) That being so, I have chosen to take a step back and regard the “dual to &lt;code&gt;Traversable&lt;/code&gt;” formulation as the starting point.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref1&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;The name &lt;code&gt;flap&lt;/code&gt;, which I have borrowed from &lt;a href=&quot;https://hackage.haskell.org/package/relude-1.0.0.1/docs/Relude-Functor-Fmap.html#v:flap&quot;&gt;&lt;em&gt;relude&lt;/em&gt;&lt;/a&gt;, is a play on how &lt;code&gt;distribute @((-&amp;gt;) _) @((-&amp;gt;) _)&lt;/code&gt; turns out to be &lt;code&gt;flip&lt;/code&gt;.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref2&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;Here is a proof of its lawfulness:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Goal (identity law):&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distributeRep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; runIdentity&lt;/span&gt; &lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distributeRep  &lt;span class=&quot;co&quot;&gt;-- LHS&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-4&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-5&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-5&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- tabulate is natural&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-6&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-6&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-7&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-7&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- flap follows the identity law&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-8&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-8&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; runIdentity &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-9&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-9&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; runIdentity&lt;/span&gt; &lt;span id=&quot;cb16-10&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-10&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- tabulate . index = id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-11&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-11&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;runIdentity  &lt;span class=&quot;co&quot;&gt;-- LHS = RHS&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-12&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-12&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb16-13&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-13&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Goal (composition law):&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-14&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-14&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; getCompose &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distributeRep&lt;/span&gt; &lt;span id=&quot;cb16-15&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-15&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; distributeRep &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; distributeRep &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; getCompose&lt;/span&gt; &lt;span id=&quot;cb16-16&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-16&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distributeRep &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; distributeRep &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; getCompose   &lt;span class=&quot;co&quot;&gt;-- RHS&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-17&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-17&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; tabulate&lt;/span&gt; &lt;span id=&quot;cb16-18&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-18&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; getCompose&lt;/span&gt; &lt;span id=&quot;cb16-19&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-19&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- index . tabulate = id&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-20&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-20&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; getCompose&lt;/span&gt; &lt;span id=&quot;cb16-21&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-21&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; getCompose &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-22&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-22&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- flap follows the composition law&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-23&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-23&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; getCompose &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-24&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-24&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- tabulate is natural&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-25&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-25&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; getCompose &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; tabulate &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; flap &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb16-26&quot;&gt;&lt;a href=&quot;https://duplode.github.io/rss.xml#cb16-26&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; getCompose &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; distributeRep  &lt;span class=&quot;co&quot;&gt;-- RHS = LHS&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref3&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt; &lt;li id=&quot;fn4&quot;&gt;&lt;p&gt;That is a manifestation of the Yoneda lemma. For a Haskell-oriented introduction to it, see Dan Piponi’s &lt;a href=&quot;http://blog.sigfpe.com/2006/11/yoneda-lemma.html&quot;&gt;&lt;em&gt;Reverse Engineering Machines with the Yoneda Lemma&lt;/em&gt;&lt;/a&gt;.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref4&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn5&quot;&gt;&lt;p&gt;&lt;code&gt;askRep&lt;/code&gt; is indeed &lt;code&gt;ask&lt;/code&gt; for &lt;code&gt;MonadReader (Rep g) g&lt;/code&gt;; accordingly, &lt;code&gt;tabulate&lt;/code&gt; is &lt;code&gt;asks&lt;/code&gt;/&lt;code&gt;reader&lt;/code&gt;.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref5&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn6&quot;&gt;&lt;p&gt;On a technical note, given that the type of &lt;code&gt;chart&lt;/code&gt; amounts to &lt;code&gt;g (forall x. g x -&amp;gt; x)&lt;/code&gt; using these definitions as written requires the &lt;code&gt;ImpredicativeTypes&lt;/code&gt; extension and, ideally, GHC 9.2 or above. Doing it without &lt;code&gt;ImpredicativeTypes&lt;/code&gt; would require making &lt;code&gt;Pos g&lt;/code&gt; a &lt;code&gt;newtype&lt;/code&gt; instead of a mere synonym.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref6&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn7&quot;&gt;&lt;p&gt;In brief: two implementations of &lt;code&gt;distribute :: f (g a) -&amp;gt; g (f a)&lt;/code&gt; might differ by what they do to the &lt;code&gt;a&lt;/code&gt; values, &lt;code&gt;f&lt;/code&gt; shapes, or &lt;code&gt;g&lt;/code&gt; shapes. Naturality means &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; can’t be affected by &lt;code&gt;distribute&lt;/code&gt;, and so any difference would have to arise from what is done to &lt;code&gt;g&lt;/code&gt;. However, the identity law means the &lt;code&gt;g&lt;/code&gt; shape can’t be affected either. Therefore, implementations which follow the identity law can’t differ.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref7&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn8&quot;&gt;&lt;p&gt;I originally realised it is possible through &lt;a href=&quot;https://stackoverflow.com/a/39736535/2751851&quot;&gt;a Stack Overflow answer by Sergei Winitzki&lt;/a&gt;. I thank him for helping to drive this post to completion, as thinking about &lt;code&gt;Select&lt;/code&gt; was instrumental in putting the pieces together.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref8&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn9&quot;&gt;&lt;p&gt;Sparing the very messy full proof, the gist of it has to do with the &lt;code&gt;(&amp;lt;$)&lt;/code&gt; trick &lt;code&gt;nonDistribute&lt;/code&gt; uses to borrow the shape of &lt;code&gt;m&lt;/code&gt; in order to have something to feed the &lt;code&gt;k :: f a -&amp;gt;   r&lt;/code&gt; criterion. In the left-hand side of the composition law, &lt;code&gt;fmap   getCompose . distribute&lt;/code&gt;, the trick is applied once, at the outermost level, while in the right-hand side, &lt;code&gt;distribute . fmap distribute.   getCompose&lt;/code&gt;, thanks to the &lt;code&gt;fmap distribute&lt;/code&gt; it is also done inside of the outer layer. That being so, there is no way the two sides might be equal.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref9&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn10&quot;&gt;&lt;p&gt;Though it doesn’t explicitly mention strict positivity, Michael Snoyman’s &lt;a href=&quot;https://www.fpcomplete.com/blog/2016/11/covariance-contravariance/&quot;&gt;&lt;em&gt;Covariance and Contravariance&lt;/em&gt;&lt;/a&gt; is an useful primer on polarity, production and consumption in functors. In particular, the &lt;code&gt;CallbackRunner&lt;/code&gt; example in the “Positive and negative position” section towards the end is a &lt;code&gt;Functor&lt;/code&gt; that isn’t strictly positive.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref10&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn11&quot;&gt;&lt;p&gt;On a tangential note, the lack of strict positivity also breaks down the intuitive notion of the shape, as something that can be distinguished from the &lt;code&gt;a&lt;/code&gt; values contained or produced by some functorial value &lt;code&gt;f a&lt;/code&gt;. While &lt;code&gt;chartSelect&lt;/code&gt; abiding by the law of extractors suggests that we should think of &lt;code&gt;Select r&lt;/code&gt; as single-shaped, it is hard to even tell what a shape is supposed to be in this case. If &lt;code&gt;Select r a&lt;/code&gt; were a garden-variety function type, we might say that there is one &lt;code&gt;a&lt;/code&gt; result for every possible &lt;code&gt;a -&amp;gt; r&lt;/code&gt; criterion. However, the number of possible &lt;code&gt;a -&amp;gt; r&lt;/code&gt; functions also depends on the choice of &lt;code&gt;a&lt;/code&gt;. As a result, the number of inhabitants (that is, distinct possible values) of &lt;code&gt;Select r a&lt;/code&gt; grows much faster than linearly with the number of inhabitants of &lt;code&gt;a&lt;/code&gt;. Were we to say &lt;code&gt;Select r&lt;/code&gt; is a single-shaped functor, we would have to concede the shape is &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/BiggerOnTheInside&quot;&gt;is bigger on the inside&lt;/a&gt;.&lt;a class=&quot;footnote-back&quot; href=&quot;https://duplode.github.io/rss.xml#fnref11&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt;   &lt;div class=&quot;pure-g-r no-print&quot; id=&quot;comment-nav&quot;&gt;   &lt;div class=&quot;pure-u-1-4&quot;&gt;     &lt;a class=&quot;pure-button&quot; href=&quot;https://github.com/duplode/duplode.github.io/issues/17&quot; id=&quot;gh-comments-button&quot;&gt;Comment on GitHub&lt;/a&gt;         &lt;/div&gt;   &lt;div class=&quot;pure-u-1-4&quot;&gt;             &lt;/div&gt;   &lt;div class=&quot;pure-u-1-4&quot;&gt;            &lt;a class=&quot;pure-button&quot; href=&quot;https://discourse.haskell.org/t/4043&quot; id=&quot;discourse-button&quot;&gt;Discourse topic&lt;/a&gt;         &lt;/div&gt;   &lt;div class=&quot;pure-u-1-4&quot;&gt;   &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;&lt;div class=&quot;license&quot;&gt;   &lt;p&gt;     &lt;span class=&quot;inline-centered&quot;&gt;       &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot; rel=&quot;license&quot;&gt;         &lt;img alt=&quot;Creative Commons License&quot; src=&quot;https://i.creativecommons.org/l/by-sa/4.0/80x15.png&quot; style=&quot;border-width: 0;&quot; /&gt;&lt;/a&gt;     &lt;/span&gt;     &lt;span class=&quot;inline-centered&quot;&gt;       Post licensed under a       &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot; rel=&quot;license&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.     &lt;/span&gt;   &lt;/p&gt; &lt;/div&gt;  &lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-02-07T19:55:00Z",
"URL":" https://duplode.github.io/posts/every-distributive-is-representable.html "
}
,
{
"title":"Ken T Takusagawa: [vnhqmqp] Semiprimes",
"textBody":"&lt;p&gt;Below is a list of the first 1000 semiprimes, the product of two prime numbers, both approximately the same size.  The criterion we chose is that the larger factor must be less than twice the smaller factor.  In other words, both factors must have approximately the same number of bits.  This criterion, for much larger semiprimes, is good for RSA cryptography.&lt;/p&gt;  &lt;p&gt;Tangentially, other less restrictive criteria we could have chosen but didn't:&lt;/p&gt;  &lt;ol type=&quot;1&quot;&gt;  &lt;li&gt;No restrictions on the relative sizes of the two prime factors.  Such a list would still exclude composites which have 3 or more prime factors.&lt;/li&gt;  &lt;li&gt;The larger factor must be less than the square of the smaller factor.  In other words, no more than twice the number of digits&lt;/li&gt;  &lt;/ol&gt;  &lt;p&gt;Perfect squares are permitted on our list below.  (But they should not be permitted as RSA moduli.)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://kenta.blogspot.com/2016/10/vwwsnaes-nearly-square-rectangles.html&quot;&gt;Previously, on rectangles that are squarish.&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;It might be fun to try to memorize the first few semiprimes and their factorizations, say, up to 1000 (the first 36). The brain unconsciously organizes things.&lt;/p&gt;  &lt;p&gt;What is the growth rate of the sequence?  This is probably not difficult to derive from the Prime Number Theorem.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://web.mit.edu/kenta/www/three/semiprimes/vnhqmqpn/&quot;&gt;Here is some Haskell code to compute the list in order.&lt;/a&gt;.  We use Data.List.Ordered.mergeAll from the ordered-list package.  &lt;a href=&quot;http://kenta.blogspot.com/2018/07/xjzqtjzg-top-heavy-perfect-powers.html&quot;&gt;Previously, on this handy package.&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;4 = 2 * 2&lt;br /&gt;  6 = 2 * 3&lt;br /&gt;  9 = 3 * 3&lt;br /&gt;  15 = 3 * 5&lt;br /&gt;  25 = 5 * 5&lt;br /&gt;  35 = 5 * 7&lt;br /&gt;  49 = 7 * 7&lt;br /&gt;  77 = 7 * 11&lt;br /&gt;  91 = 7 * 13&lt;br /&gt;  121 = 11 * 11&lt;br /&gt;  143 = 11 * 13&lt;br /&gt;  169 = 13 * 13&lt;br /&gt;  187 = 11 * 17&lt;br /&gt;  209 = 11 * 19&lt;br /&gt;  221 = 13 * 17&lt;br /&gt;  247 = 13 * 19&lt;br /&gt;  289 = 17 * 17&lt;br /&gt;  299 = 13 * 23&lt;br /&gt;  323 = 17 * 19&lt;br /&gt;  361 = 19 * 19&lt;br /&gt;  391 = 17 * 23&lt;br /&gt;  437 = 19 * 23&lt;br /&gt;  493 = 17 * 29&lt;br /&gt;  527 = 17 * 31&lt;br /&gt;  529 = 23 * 23&lt;br /&gt;  551 = 19 * 29&lt;br /&gt;  589 = 19 * 31&lt;br /&gt;  667 = 23 * 29&lt;br /&gt;  703 = 19 * 37&lt;br /&gt;  713 = 23 * 31&lt;br /&gt;  841 = 29 * 29&lt;br /&gt;  851 = 23 * 37&lt;br /&gt;  899 = 29 * 31&lt;br /&gt;  943 = 23 * 41&lt;br /&gt;  961 = 31 * 31&lt;br /&gt;  989 = 23 * 43&lt;br /&gt;  1073 = 29 * 37&lt;br /&gt;  1147 = 31 * 37&lt;br /&gt;  1189 = 29 * 41&lt;br /&gt;  1247 = 29 * 43&lt;br /&gt;  1271 = 31 * 41&lt;br /&gt;  1333 = 31 * 43&lt;br /&gt;  1363 = 29 * 47&lt;br /&gt;  1369 = 37 * 37&lt;br /&gt;  1457 = 31 * 47&lt;br /&gt;  1517 = 37 * 41&lt;br /&gt;  1537 = 29 * 53&lt;br /&gt;  1591 = 37 * 43&lt;br /&gt;  1643 = 31 * 53&lt;br /&gt;  1681 = 41 * 41&lt;br /&gt;  1739 = 37 * 47&lt;br /&gt;  1763 = 41 * 43&lt;br /&gt;  1829 = 31 * 59&lt;br /&gt;  1849 = 43 * 43&lt;br /&gt;  1891 = 31 * 61&lt;br /&gt;  1927 = 41 * 47&lt;br /&gt;  1961 = 37 * 53&lt;br /&gt;  2021 = 43 * 47&lt;br /&gt;  2173 = 41 * 53&lt;br /&gt;  2183 = 37 * 59&lt;br /&gt;  2209 = 47 * 47&lt;br /&gt;  2257 = 37 * 61&lt;br /&gt;  2279 = 43 * 53&lt;br /&gt;  2419 = 41 * 59&lt;br /&gt;  2479 = 37 * 67&lt;br /&gt;  2491 = 47 * 53&lt;br /&gt;  2501 = 41 * 61&lt;br /&gt;  2537 = 43 * 59&lt;br /&gt;  2623 = 43 * 61&lt;br /&gt;  2627 = 37 * 71&lt;br /&gt;  2701 = 37 * 73&lt;br /&gt;  2747 = 41 * 67&lt;br /&gt;  2773 = 47 * 59&lt;br /&gt;  2809 = 53 * 53&lt;br /&gt;  2867 = 47 * 61&lt;br /&gt;  2881 = 43 * 67&lt;br /&gt;  2911 = 41 * 71&lt;br /&gt;  2993 = 41 * 73&lt;br /&gt;  3053 = 43 * 71&lt;br /&gt;  3127 = 53 * 59&lt;br /&gt;  3139 = 43 * 73&lt;br /&gt;  3149 = 47 * 67&lt;br /&gt;  3233 = 53 * 61&lt;br /&gt;  3239 = 41 * 79&lt;br /&gt;  3337 = 47 * 71&lt;br /&gt;  3397 = 43 * 79&lt;br /&gt;  3431 = 47 * 73&lt;br /&gt;  3481 = 59 * 59&lt;br /&gt;  3551 = 53 * 67&lt;br /&gt;  3569 = 43 * 83&lt;br /&gt;  3599 = 59 * 61&lt;br /&gt;  3713 = 47 * 79&lt;br /&gt;  3721 = 61 * 61&lt;br /&gt;  3763 = 53 * 71&lt;br /&gt;  3869 = 53 * 73&lt;br /&gt;  3901 = 47 * 83&lt;br /&gt;  3953 = 59 * 67&lt;br /&gt;  4087 = 61 * 67&lt;br /&gt;  4183 = 47 * 89&lt;br /&gt;  4187 = 53 * 79&lt;br /&gt;  4189 = 59 * 71&lt;br /&gt;  4307 = 59 * 73&lt;br /&gt;  4331 = 61 * 71&lt;br /&gt;  4399 = 53 * 83&lt;br /&gt;  4453 = 61 * 73&lt;br /&gt;  4489 = 67 * 67&lt;br /&gt;  4661 = 59 * 79&lt;br /&gt;  4717 = 53 * 89&lt;br /&gt;  4757 = 67 * 71&lt;br /&gt;  4819 = 61 * 79&lt;br /&gt;  4891 = 67 * 73&lt;br /&gt;  4897 = 59 * 83&lt;br /&gt;  5041 = 71 * 71&lt;br /&gt;  5063 = 61 * 83&lt;br /&gt;  5141 = 53 * 97&lt;br /&gt;  5183 = 71 * 73&lt;br /&gt;  5251 = 59 * 89&lt;br /&gt;  5293 = 67 * 79&lt;br /&gt;  5329 = 73 * 73&lt;br /&gt;  5353 = 53 * 101&lt;br /&gt;  5429 = 61 * 89&lt;br /&gt;  5459 = 53 * 103&lt;br /&gt;  5561 = 67 * 83&lt;br /&gt;  5609 = 71 * 79&lt;br /&gt;  5723 = 59 * 97&lt;br /&gt;  5767 = 73 * 79&lt;br /&gt;  5893 = 71 * 83&lt;br /&gt;  5917 = 61 * 97&lt;br /&gt;  5959 = 59 * 101&lt;br /&gt;  5963 = 67 * 89&lt;br /&gt;  6059 = 73 * 83&lt;br /&gt;  6077 = 59 * 103&lt;br /&gt;  6161 = 61 * 101&lt;br /&gt;  6241 = 79 * 79&lt;br /&gt;  6283 = 61 * 103&lt;br /&gt;  6313 = 59 * 107&lt;br /&gt;  6319 = 71 * 89&lt;br /&gt;  6431 = 59 * 109&lt;br /&gt;  6497 = 73 * 89&lt;br /&gt;  6499 = 67 * 97&lt;br /&gt;  6527 = 61 * 107&lt;br /&gt;  6557 = 79 * 83&lt;br /&gt;  6649 = 61 * 109&lt;br /&gt;  6667 = 59 * 113&lt;br /&gt;  6767 = 67 * 101&lt;br /&gt;  6887 = 71 * 97&lt;br /&gt;  6889 = 83 * 83&lt;br /&gt;  6893 = 61 * 113&lt;br /&gt;  6901 = 67 * 103&lt;br /&gt;  7031 = 79 * 89&lt;br /&gt;  7081 = 73 * 97&lt;br /&gt;  7169 = 67 * 107&lt;br /&gt;  7171 = 71 * 101&lt;br /&gt;  7303 = 67 * 109&lt;br /&gt;  7313 = 71 * 103&lt;br /&gt;  7373 = 73 * 101&lt;br /&gt;  7387 = 83 * 89&lt;br /&gt;  7519 = 73 * 103&lt;br /&gt;  7571 = 67 * 113&lt;br /&gt;  7597 = 71 * 107&lt;br /&gt;  7663 = 79 * 97&lt;br /&gt;  7739 = 71 * 109&lt;br /&gt;  7811 = 73 * 107&lt;br /&gt;  7921 = 89 * 89&lt;br /&gt;  7957 = 73 * 109&lt;br /&gt;  7979 = 79 * 101&lt;br /&gt;  8023 = 71 * 113&lt;br /&gt;  8051 = 83 * 97&lt;br /&gt;  8137 = 79 * 103&lt;br /&gt;  8249 = 73 * 113&lt;br /&gt;  8383 = 83 * 101&lt;br /&gt;  8453 = 79 * 107&lt;br /&gt;  8509 = 67 * 127&lt;br /&gt;  8549 = 83 * 103&lt;br /&gt;  8611 = 79 * 109&lt;br /&gt;  8633 = 89 * 97&lt;br /&gt;  8777 = 67 * 131&lt;br /&gt;  8881 = 83 * 107&lt;br /&gt;  8927 = 79 * 113&lt;br /&gt;  8989 = 89 * 101&lt;br /&gt;  9017 = 71 * 127&lt;br /&gt;  9047 = 83 * 109&lt;br /&gt;  9167 = 89 * 103&lt;br /&gt;  9271 = 73 * 127&lt;br /&gt;  9301 = 71 * 131&lt;br /&gt;  9379 = 83 * 113&lt;br /&gt;  9409 = 97 * 97&lt;br /&gt;  9523 = 89 * 107&lt;br /&gt;  9563 = 73 * 131&lt;br /&gt;  9701 = 89 * 109&lt;br /&gt;  9727 = 71 * 137&lt;br /&gt;  9797 = 97 * 101&lt;br /&gt;  9869 = 71 * 139&lt;br /&gt;  9991 = 97 * 103&lt;br /&gt;  10001 = 73 * 137&lt;br /&gt;  10033 = 79 * 127&lt;br /&gt;  10057 = 89 * 113&lt;br /&gt;  10147 = 73 * 139&lt;br /&gt;  10201 = 101 * 101&lt;br /&gt;  10349 = 79 * 131&lt;br /&gt;  10379 = 97 * 107&lt;br /&gt;  10403 = 101 * 103&lt;br /&gt;  10541 = 83 * 127&lt;br /&gt;  10573 = 97 * 109&lt;br /&gt;  10609 = 103 * 103&lt;br /&gt;  10807 = 101 * 107&lt;br /&gt;  10823 = 79 * 137&lt;br /&gt;  10873 = 83 * 131&lt;br /&gt;  10961 = 97 * 113&lt;br /&gt;  10981 = 79 * 139&lt;br /&gt;  11009 = 101 * 109&lt;br /&gt;  11021 = 103 * 107&lt;br /&gt;  11227 = 103 * 109&lt;br /&gt;  11303 = 89 * 127&lt;br /&gt;  11371 = 83 * 137&lt;br /&gt;  11413 = 101 * 113&lt;br /&gt;  11449 = 107 * 107&lt;br /&gt;  11537 = 83 * 139&lt;br /&gt;  11639 = 103 * 113&lt;br /&gt;  11659 = 89 * 131&lt;br /&gt;  11663 = 107 * 109&lt;br /&gt;  11771 = 79 * 149&lt;br /&gt;  11881 = 109 * 109&lt;br /&gt;  11929 = 79 * 151&lt;br /&gt;  12091 = 107 * 113&lt;br /&gt;  12193 = 89 * 137&lt;br /&gt;  12317 = 109 * 113&lt;br /&gt;  12319 = 97 * 127&lt;br /&gt;  12367 = 83 * 149&lt;br /&gt;  12371 = 89 * 139&lt;br /&gt;  12403 = 79 * 157&lt;br /&gt;  12533 = 83 * 151&lt;br /&gt;  12707 = 97 * 131&lt;br /&gt;  12769 = 113 * 113&lt;br /&gt;  12827 = 101 * 127&lt;br /&gt;  13031 = 83 * 157&lt;br /&gt;  13081 = 103 * 127&lt;br /&gt;  13231 = 101 * 131&lt;br /&gt;  13261 = 89 * 149&lt;br /&gt;  13289 = 97 * 137&lt;br /&gt;  13439 = 89 * 151&lt;br /&gt;  13483 = 97 * 139&lt;br /&gt;  13493 = 103 * 131&lt;br /&gt;  13529 = 83 * 163&lt;br /&gt;  13589 = 107 * 127&lt;br /&gt;  13837 = 101 * 137&lt;br /&gt;  13843 = 109 * 127&lt;br /&gt;  13973 = 89 * 157&lt;br /&gt;  14017 = 107 * 131&lt;br /&gt;  14039 = 101 * 139&lt;br /&gt;  14111 = 103 * 137&lt;br /&gt;  14279 = 109 * 131&lt;br /&gt;  14317 = 103 * 139&lt;br /&gt;  14351 = 113 * 127&lt;br /&gt;  14453 = 97 * 149&lt;br /&gt;  14507 = 89 * 163&lt;br /&gt;  14647 = 97 * 151&lt;br /&gt;  14659 = 107 * 137&lt;br /&gt;  14803 = 113 * 131&lt;br /&gt;  14863 = 89 * 167&lt;br /&gt;  14873 = 107 * 139&lt;br /&gt;  14933 = 109 * 137&lt;br /&gt;  15049 = 101 * 149&lt;br /&gt;  15151 = 109 * 139&lt;br /&gt;  15229 = 97 * 157&lt;br /&gt;  15251 = 101 * 151&lt;br /&gt;  15347 = 103 * 149&lt;br /&gt;  15397 = 89 * 173&lt;br /&gt;  15481 = 113 * 137&lt;br /&gt;  15553 = 103 * 151&lt;br /&gt;  15707 = 113 * 139&lt;br /&gt;  15811 = 97 * 163&lt;br /&gt;  15857 = 101 * 157&lt;br /&gt;  15943 = 107 * 149&lt;br /&gt;  16129 = 127 * 127&lt;br /&gt;  16157 = 107 * 151&lt;br /&gt;  16171 = 103 * 157&lt;br /&gt;  16199 = 97 * 167&lt;br /&gt;  16241 = 109 * 149&lt;br /&gt;  16459 = 109 * 151&lt;br /&gt;  16463 = 101 * 163&lt;br /&gt;  16637 = 127 * 131&lt;br /&gt;  16781 = 97 * 173&lt;br /&gt;  16789 = 103 * 163&lt;br /&gt;  16799 = 107 * 157&lt;br /&gt;  16837 = 113 * 149&lt;br /&gt;  16867 = 101 * 167&lt;br /&gt;  17063 = 113 * 151&lt;br /&gt;  17113 = 109 * 157&lt;br /&gt;  17161 = 131 * 131&lt;br /&gt;  17201 = 103 * 167&lt;br /&gt;  17363 = 97 * 179&lt;br /&gt;  17399 = 127 * 137&lt;br /&gt;  17441 = 107 * 163&lt;br /&gt;  17473 = 101 * 173&lt;br /&gt;  17557 = 97 * 181&lt;br /&gt;  17653 = 127 * 139&lt;br /&gt;  17741 = 113 * 157&lt;br /&gt;  17767 = 109 * 163&lt;br /&gt;  17819 = 103 * 173&lt;br /&gt;  17869 = 107 * 167&lt;br /&gt;  17947 = 131 * 137&lt;br /&gt;  18079 = 101 * 179&lt;br /&gt;  18203 = 109 * 167&lt;br /&gt;  18209 = 131 * 139&lt;br /&gt;  18281 = 101 * 181&lt;br /&gt;  18419 = 113 * 163&lt;br /&gt;  18437 = 103 * 179&lt;br /&gt;  18511 = 107 * 173&lt;br /&gt;  18527 = 97 * 191&lt;br /&gt;  18643 = 103 * 181&lt;br /&gt;  18721 = 97 * 193&lt;br /&gt;  18769 = 137 * 137&lt;br /&gt;  18857 = 109 * 173&lt;br /&gt;  18871 = 113 * 167&lt;br /&gt;  18923 = 127 * 149&lt;br /&gt;  19043 = 137 * 139&lt;br /&gt;  19153 = 107 * 179&lt;br /&gt;  19177 = 127 * 151&lt;br /&gt;  19291 = 101 * 191&lt;br /&gt;  19321 = 139 * 139&lt;br /&gt;  19367 = 107 * 181&lt;br /&gt;  19493 = 101 * 193&lt;br /&gt;  19511 = 109 * 179&lt;br /&gt;  19519 = 131 * 149&lt;br /&gt;  19549 = 113 * 173&lt;br /&gt;  19673 = 103 * 191&lt;br /&gt;  19729 = 109 * 181&lt;br /&gt;  19781 = 131 * 151&lt;br /&gt;  19879 = 103 * 193&lt;br /&gt;  19897 = 101 * 197&lt;br /&gt;  19939 = 127 * 157&lt;br /&gt;  20099 = 101 * 199&lt;br /&gt;  20227 = 113 * 179&lt;br /&gt;  20291 = 103 * 197&lt;br /&gt;  20413 = 137 * 149&lt;br /&gt;  20437 = 107 * 191&lt;br /&gt;  20453 = 113 * 181&lt;br /&gt;  20497 = 103 * 199&lt;br /&gt;  20567 = 131 * 157&lt;br /&gt;  20651 = 107 * 193&lt;br /&gt;  20687 = 137 * 151&lt;br /&gt;  20701 = 127 * 163&lt;br /&gt;  20711 = 139 * 149&lt;br /&gt;  20819 = 109 * 191&lt;br /&gt;  20989 = 139 * 151&lt;br /&gt;  21037 = 109 * 193&lt;br /&gt;  21079 = 107 * 197&lt;br /&gt;  21209 = 127 * 167&lt;br /&gt;  21293 = 107 * 199&lt;br /&gt;  21353 = 131 * 163&lt;br /&gt;  21473 = 109 * 197&lt;br /&gt;  21509 = 137 * 157&lt;br /&gt;  21583 = 113 * 191&lt;br /&gt;  21691 = 109 * 199&lt;br /&gt;  21809 = 113 * 193&lt;br /&gt;  21823 = 139 * 157&lt;br /&gt;  21877 = 131 * 167&lt;br /&gt;  21971 = 127 * 173&lt;br /&gt;  22201 = 149 * 149&lt;br /&gt;  22261 = 113 * 197&lt;br /&gt;  22331 = 137 * 163&lt;br /&gt;  22487 = 113 * 199&lt;br /&gt;  22499 = 149 * 151&lt;br /&gt;  22577 = 107 * 211&lt;br /&gt;  22657 = 139 * 163&lt;br /&gt;  22663 = 131 * 173&lt;br /&gt;  22733 = 127 * 179&lt;br /&gt;  22801 = 151 * 151&lt;br /&gt;  22879 = 137 * 167&lt;br /&gt;  22987 = 127 * 181&lt;br /&gt;  22999 = 109 * 211&lt;br /&gt;  23213 = 139 * 167&lt;br /&gt;  23393 = 149 * 157&lt;br /&gt;  23449 = 131 * 179&lt;br /&gt;  23701 = 137 * 173&lt;br /&gt;  23707 = 151 * 157&lt;br /&gt;  23711 = 131 * 181&lt;br /&gt;  23843 = 113 * 211&lt;br /&gt;  24047 = 139 * 173&lt;br /&gt;  24257 = 127 * 191&lt;br /&gt;  24287 = 149 * 163&lt;br /&gt;  24511 = 127 * 193&lt;br /&gt;  24523 = 137 * 179&lt;br /&gt;  24613 = 151 * 163&lt;br /&gt;  24649 = 157 * 157&lt;br /&gt;  24797 = 137 * 181&lt;br /&gt;  24881 = 139 * 179&lt;br /&gt;  24883 = 149 * 167&lt;br /&gt;  25019 = 127 * 197&lt;br /&gt;  25021 = 131 * 191&lt;br /&gt;  25159 = 139 * 181&lt;br /&gt;  25199 = 113 * 223&lt;br /&gt;  25217 = 151 * 167&lt;br /&gt;  25273 = 127 * 199&lt;br /&gt;  25283 = 131 * 193&lt;br /&gt;  25591 = 157 * 163&lt;br /&gt;  25777 = 149 * 173&lt;br /&gt;  25807 = 131 * 197&lt;br /&gt;  26069 = 131 * 199&lt;br /&gt;  26123 = 151 * 173&lt;br /&gt;  26167 = 137 * 191&lt;br /&gt;  26219 = 157 * 167&lt;br /&gt;  26441 = 137 * 193&lt;br /&gt;  26549 = 139 * 191&lt;br /&gt;  26569 = 163 * 163&lt;br /&gt;  26671 = 149 * 179&lt;br /&gt;  26797 = 127 * 211&lt;br /&gt;  26827 = 139 * 193&lt;br /&gt;  26969 = 149 * 181&lt;br /&gt;  26989 = 137 * 197&lt;br /&gt;  27029 = 151 * 179&lt;br /&gt;  27161 = 157 * 173&lt;br /&gt;  27221 = 163 * 167&lt;br /&gt;  27263 = 137 * 199&lt;br /&gt;  27331 = 151 * 181&lt;br /&gt;  27383 = 139 * 197&lt;br /&gt;  27641 = 131 * 211&lt;br /&gt;  27661 = 139 * 199&lt;br /&gt;  27889 = 167 * 167&lt;br /&gt;  28103 = 157 * 179&lt;br /&gt;  28199 = 163 * 173&lt;br /&gt;  28321 = 127 * 223&lt;br /&gt;  28417 = 157 * 181&lt;br /&gt;  28459 = 149 * 191&lt;br /&gt;  28757 = 149 * 193&lt;br /&gt;  28829 = 127 * 227&lt;br /&gt;  28841 = 151 * 191&lt;br /&gt;  28891 = 167 * 173&lt;br /&gt;  28907 = 137 * 211&lt;br /&gt;  29083 = 127 * 229&lt;br /&gt;  29143 = 151 * 193&lt;br /&gt;  29177 = 163 * 179&lt;br /&gt;  29213 = 131 * 223&lt;br /&gt;  29329 = 139 * 211&lt;br /&gt;  29353 = 149 * 197&lt;br /&gt;  29503 = 163 * 181&lt;br /&gt;  29591 = 127 * 233&lt;br /&gt;  29651 = 149 * 199&lt;br /&gt;  29737 = 131 * 227&lt;br /&gt;  29747 = 151 * 197&lt;br /&gt;  29893 = 167 * 179&lt;br /&gt;  29929 = 173 * 173&lt;br /&gt;  29987 = 157 * 191&lt;br /&gt;  29999 = 131 * 229&lt;br /&gt;  30049 = 151 * 199&lt;br /&gt;  30227 = 167 * 181&lt;br /&gt;  30301 = 157 * 193&lt;br /&gt;  30353 = 127 * 239&lt;br /&gt;  30523 = 131 * 233&lt;br /&gt;  30551 = 137 * 223&lt;br /&gt;  30607 = 127 * 241&lt;br /&gt;  30929 = 157 * 197&lt;br /&gt;  30967 = 173 * 179&lt;br /&gt;  30997 = 139 * 223&lt;br /&gt;  31099 = 137 * 227&lt;br /&gt;  31133 = 163 * 191&lt;br /&gt;  31243 = 157 * 199&lt;br /&gt;  31309 = 131 * 239&lt;br /&gt;  31313 = 173 * 181&lt;br /&gt;  31373 = 137 * 229&lt;br /&gt;  31439 = 149 * 211&lt;br /&gt;  31459 = 163 * 193&lt;br /&gt;  31553 = 139 * 227&lt;br /&gt;  31571 = 131 * 241&lt;br /&gt;  31831 = 139 * 229&lt;br /&gt;  31861 = 151 * 211&lt;br /&gt;  31877 = 127 * 251&lt;br /&gt;  31897 = 167 * 191&lt;br /&gt;  31921 = 137 * 233&lt;br /&gt;  32041 = 179 * 179&lt;br /&gt;  32111 = 163 * 197&lt;br /&gt;  32231 = 167 * 193&lt;br /&gt;  32387 = 139 * 233&lt;br /&gt;  32399 = 179 * 181&lt;br /&gt;  32437 = 163 * 199&lt;br /&gt;  32743 = 137 * 239&lt;br /&gt;  32761 = 181 * 181&lt;br /&gt;  32881 = 131 * 251&lt;br /&gt;  32899 = 167 * 197&lt;br /&gt;  33017 = 137 * 241&lt;br /&gt;  33043 = 173 * 191&lt;br /&gt;  33127 = 157 * 211&lt;br /&gt;  33221 = 139 * 239&lt;br /&gt;  33227 = 149 * 223&lt;br /&gt;  33233 = 167 * 199&lt;br /&gt;  33389 = 173 * 193&lt;br /&gt;  33499 = 139 * 241&lt;br /&gt;  33667 = 131 * 257&lt;br /&gt;  33673 = 151 * 223&lt;br /&gt;  33823 = 149 * 227&lt;br /&gt;  34081 = 173 * 197&lt;br /&gt;  34121 = 149 * 229&lt;br /&gt;  34189 = 179 * 191&lt;br /&gt;  34277 = 151 * 227&lt;br /&gt;  34387 = 137 * 251&lt;br /&gt;  34393 = 163 * 211&lt;br /&gt;  34427 = 173 * 199&lt;br /&gt;  34547 = 179 * 193&lt;br /&gt;  34571 = 181 * 191&lt;br /&gt;  34579 = 151 * 229&lt;br /&gt;  34717 = 149 * 233&lt;br /&gt;  34889 = 139 * 251&lt;br /&gt;  34933 = 181 * 193&lt;br /&gt;  35011 = 157 * 223&lt;br /&gt;  35183 = 151 * 233&lt;br /&gt;  35209 = 137 * 257&lt;br /&gt;  35237 = 167 * 211&lt;br /&gt;  35263 = 179 * 197&lt;br /&gt;  35611 = 149 * 239&lt;br /&gt;  35621 = 179 * 199&lt;br /&gt;  35639 = 157 * 227&lt;br /&gt;  35657 = 181 * 197&lt;br /&gt;  35723 = 139 * 257&lt;br /&gt;  35909 = 149 * 241&lt;br /&gt;  35953 = 157 * 229&lt;br /&gt;  36019 = 181 * 199&lt;br /&gt;  36031 = 137 * 263&lt;br /&gt;  36089 = 151 * 239&lt;br /&gt;  36349 = 163 * 223&lt;br /&gt;  36391 = 151 * 241&lt;br /&gt;  36481 = 191 * 191&lt;br /&gt;  36503 = 173 * 211&lt;br /&gt;  36557 = 139 * 263&lt;br /&gt;  36581 = 157 * 233&lt;br /&gt;  36853 = 137 * 269&lt;br /&gt;  36863 = 191 * 193&lt;br /&gt;  37001 = 163 * 227&lt;br /&gt;  37127 = 137 * 271&lt;br /&gt;  37241 = 167 * 223&lt;br /&gt;  37249 = 193 * 193&lt;br /&gt;  37327 = 163 * 229&lt;br /&gt;  37391 = 139 * 269&lt;br /&gt;  37399 = 149 * 251&lt;br /&gt;  37523 = 157 * 239&lt;br /&gt;  37627 = 191 * 197&lt;br /&gt;  37669 = 139 * 271&lt;br /&gt;  37769 = 179 * 211&lt;br /&gt;  37837 = 157 * 241&lt;br /&gt;  37901 = 151 * 251&lt;br /&gt;  37909 = 167 * 227&lt;br /&gt;  37979 = 163 * 233&lt;br /&gt;  38009 = 191 * 199&lt;br /&gt;  38021 = 193 * 197&lt;br /&gt;  38191 = 181 * 211&lt;br /&gt;  38243 = 167 * 229&lt;br /&gt;  38293 = 149 * 257&lt;br /&gt;  38407 = 193 * 199&lt;br /&gt;  38503 = 139 * 277&lt;br /&gt;  38579 = 173 * 223&lt;br /&gt;  38807 = 151 * 257&lt;br /&gt;  38809 = 197 * 197&lt;br /&gt;  38911 = 167 * 233&lt;br /&gt;  38957 = 163 * 239&lt;br /&gt;  39187 = 149 * 263&lt;br /&gt;  39203 = 197 * 199&lt;br /&gt;  39271 = 173 * 227&lt;br /&gt;  39283 = 163 * 241&lt;br /&gt;  39407 = 157 * 251&lt;br /&gt;  39601 = 199 * 199&lt;br /&gt;  39617 = 173 * 229&lt;br /&gt;  39713 = 151 * 263&lt;br /&gt;  39913 = 167 * 239&lt;br /&gt;  39917 = 179 * 223&lt;br /&gt;  40081 = 149 * 269&lt;br /&gt;  40247 = 167 * 241&lt;br /&gt;  40301 = 191 * 211&lt;br /&gt;  40309 = 173 * 233&lt;br /&gt;  40349 = 157 * 257&lt;br /&gt;  40363 = 181 * 223&lt;br /&gt;  40379 = 149 * 271&lt;br /&gt;  40619 = 151 * 269&lt;br /&gt;  40633 = 179 * 227&lt;br /&gt;  40723 = 193 * 211&lt;br /&gt;  40913 = 163 * 251&lt;br /&gt;  40921 = 151 * 271&lt;br /&gt;  40991 = 179 * 229&lt;br /&gt;  41087 = 181 * 227&lt;br /&gt;  41273 = 149 * 277&lt;br /&gt;  41291 = 157 * 263&lt;br /&gt;  41347 = 173 * 239&lt;br /&gt;  41449 = 181 * 229&lt;br /&gt;  41567 = 197 * 211&lt;br /&gt;  41693 = 173 * 241&lt;br /&gt;  41707 = 179 * 233&lt;br /&gt;  41827 = 151 * 277&lt;br /&gt;  41869 = 149 * 281&lt;br /&gt;  41891 = 163 * 257&lt;br /&gt;  41917 = 167 * 251&lt;br /&gt;  41989 = 199 * 211&lt;br /&gt;  42167 = 149 * 283&lt;br /&gt;  42173 = 181 * 233&lt;br /&gt;  42233 = 157 * 269&lt;br /&gt;  42431 = 151 * 281&lt;br /&gt;  42547 = 157 * 271&lt;br /&gt;  42593 = 191 * 223&lt;br /&gt;  42733 = 151 * 283&lt;br /&gt;  42781 = 179 * 239&lt;br /&gt;  42869 = 163 * 263&lt;br /&gt;  42919 = 167 * 257&lt;br /&gt;  43039 = 193 * 223&lt;br /&gt;  43139 = 179 * 241&lt;br /&gt;  43259 = 181 * 239&lt;br /&gt;  43357 = 191 * 227&lt;br /&gt;  43423 = 173 * 251&lt;br /&gt;  43489 = 157 * 277&lt;br /&gt;  43621 = 181 * 241&lt;br /&gt;  43657 = 149 * 293&lt;br /&gt;  43739 = 191 * 229&lt;br /&gt;  43811 = 193 * 227&lt;br /&gt;  43847 = 163 * 269&lt;br /&gt;  43921 = 167 * 263&lt;br /&gt;  43931 = 197 * 223&lt;br /&gt;  44117 = 157 * 281&lt;br /&gt;  44173 = 163 * 271&lt;br /&gt;  44197 = 193 * 229&lt;br /&gt;  44243 = 151 * 293&lt;br /&gt;  44377 = 199 * 223&lt;br /&gt;  44431 = 157 * 283&lt;br /&gt;  44461 = 173 * 257&lt;br /&gt;  44503 = 191 * 233&lt;br /&gt;  44521 = 211 * 211&lt;br /&gt;  44719 = 197 * 227&lt;br /&gt;  44923 = 167 * 269&lt;br /&gt;  44929 = 179 * 251&lt;br /&gt;  44969 = 193 * 233&lt;br /&gt;  45113 = 197 * 229&lt;br /&gt;  45151 = 163 * 277&lt;br /&gt;  45173 = 199 * 227&lt;br /&gt;  45257 = 167 * 271&lt;br /&gt;  45431 = 181 * 251&lt;br /&gt;  45499 = 173 * 263&lt;br /&gt;  45571 = 199 * 229&lt;br /&gt;  45649 = 191 * 239&lt;br /&gt;  45803 = 163 * 281&lt;br /&gt;  45901 = 197 * 233&lt;br /&gt;  46001 = 157 * 293&lt;br /&gt;  46003 = 179 * 257&lt;br /&gt;  46031 = 191 * 241&lt;br /&gt;  46127 = 193 * 239&lt;br /&gt;  46129 = 163 * 283&lt;br /&gt;  46259 = 167 * 277&lt;br /&gt;  46367 = 199 * 233&lt;br /&gt;  46513 = 193 * 241&lt;br /&gt;  46517 = 181 * 257&lt;br /&gt;  46537 = 173 * 269&lt;br /&gt;  46883 = 173 * 271&lt;br /&gt;  46927 = 167 * 281&lt;br /&gt;  47053 = 211 * 223&lt;br /&gt;  47077 = 179 * 263&lt;br /&gt;  47083 = 197 * 239&lt;br /&gt;  47261 = 167 * 283&lt;br /&gt;  47477 = 197 * 241&lt;br /&gt;  47561 = 199 * 239&lt;br /&gt;  47603 = 181 * 263&lt;br /&gt;  47759 = 163 * 293&lt;br /&gt;  47897 = 211 * 227&lt;br /&gt;  47921 = 173 * 277&lt;br /&gt;  47941 = 191 * 251&lt;br /&gt;  47959 = 199 * 241&lt;br /&gt;  48151 = 179 * 269&lt;br /&gt;  48199 = 157 * 307&lt;br /&gt;  48319 = 211 * 229&lt;br /&gt;  48443 = 193 * 251&lt;br /&gt;  48509 = 179 * 271&lt;br /&gt;  48613 = 173 * 281&lt;br /&gt;  48689 = 181 * 269&lt;br /&gt;  48827 = 157 * 311&lt;br /&gt;  48931 = 167 * 293&lt;br /&gt;  48959 = 173 * 283&lt;br /&gt;  49051 = 181 * 271&lt;br /&gt;  49087 = 191 * 257&lt;br /&gt;  49141 = 157 * 313&lt;br /&gt;  49163 = 211 * 233&lt;br /&gt;  49447 = 197 * 251&lt;br /&gt;  49583 = 179 * 277&lt;br /&gt;  49601 = 193 * 257&lt;br /&gt;  49729 = 223 * 223&lt;br /&gt;  49949 = 199 * 251&lt;br /&gt;  50041 = 163 * 307&lt;br /&gt;  50137 = 181 * 277&lt;br /&gt;  50233 = 191 * 263&lt;br /&gt;  50299 = 179 * 281&lt;br /&gt;  50429 = 211 * 239&lt;br /&gt;  50621 = 223 * 227&lt;br /&gt;  50629 = 197 * 257&lt;br /&gt;  50657 = 179 * 283&lt;br /&gt;  50689 = 173 * 293&lt;br /&gt;  50693 = 163 * 311&lt;br /&gt;  50759 = 193 * 263&lt;br /&gt;  50851 = 211 * 241&lt;br /&gt;  50861 = 181 * 281&lt;br /&gt;  51019 = 163 * 313&lt;br /&gt;  51067 = 223 * 229&lt;br /&gt;  51143 = 199 * 257&lt;br /&gt;  51223 = 181 * 283&lt;br /&gt;  51269 = 167 * 307&lt;br /&gt;  51379 = 191 * 269&lt;br /&gt;  51529 = 227 * 227&lt;br /&gt;  51671 = 163 * 317&lt;br /&gt;  51761 = 191 * 271&lt;br /&gt;  51811 = 197 * 263&lt;br /&gt;  51917 = 193 * 269&lt;br /&gt;  51937 = 167 * 311&lt;br /&gt;  51959 = 223 * 233&lt;br /&gt;  51983 = 227 * 229&lt;br /&gt;  52271 = 167 * 313&lt;br /&gt;  52303 = 193 * 271&lt;br /&gt;  52337 = 199 * 263&lt;br /&gt;  52441 = 229 * 229&lt;br /&gt;  52447 = 179 * 293&lt;br /&gt;  52891 = 227 * 233&lt;br /&gt;  52907 = 191 * 277&lt;br /&gt;  52939 = 167 * 317&lt;br /&gt;  52961 = 211 * 251&lt;br /&gt;  52993 = 197 * 269&lt;br /&gt;  53033 = 181 * 293&lt;br /&gt;  53111 = 173 * 307&lt;br /&gt;  53297 = 223 * 239&lt;br /&gt;  53357 = 229 * 233&lt;br /&gt;  53387 = 197 * 271&lt;br /&gt;  53461 = 193 * 277&lt;br /&gt;  53531 = 199 * 269&lt;br /&gt;  53671 = 191 * 281&lt;br /&gt;  53743 = 223 * 241&lt;br /&gt;  53803 = 173 * 311&lt;br /&gt;  53929 = 199 * 271&lt;br /&gt;  54053 = 191 * 283&lt;br /&gt;  54149 = 173 * 313&lt;br /&gt;  54227 = 211 * 257&lt;br /&gt;  54233 = 193 * 281&lt;br /&gt;  54253 = 227 * 239&lt;br /&gt;  54289 = 233 * 233&lt;br /&gt;  54569 = 197 * 277&lt;br /&gt;  54619 = 193 * 283&lt;br /&gt;  54707 = 227 * 241&lt;br /&gt;  54731 = 229 * 239&lt;br /&gt;  54841 = 173 * 317&lt;br /&gt;  54953 = 179 * 307&lt;br /&gt;  55123 = 199 * 277&lt;br /&gt;  55189 = 229 * 241&lt;br /&gt;  55277 = 167 * 331&lt;br /&gt;  55357 = 197 * 281&lt;br /&gt;  55493 = 211 * 263&lt;br /&gt;  55567 = 181 * 307&lt;br /&gt;  55669 = 179 * 311&lt;br /&gt;  55687 = 233 * 239&lt;br /&gt;  55751 = 197 * 283&lt;br /&gt;  55919 = 199 * 281&lt;br /&gt;  55963 = 191 * 293&lt;br /&gt;  55973 = 223 * 251&lt;br /&gt;  56027 = 179 * 313&lt;br /&gt;  56153 = 233 * 241&lt;br /&gt;  56291 = 181 * 311&lt;br /&gt;  56317 = 199 * 283&lt;br /&gt;  56549 = 193 * 293&lt;br /&gt;  56653 = 181 * 313&lt;br /&gt;  56743 = 179 * 317&lt;br /&gt;  56759 = 211 * 269&lt;br /&gt;  56977 = 227 * 251&lt;br /&gt;  57121 = 239 * 239&lt;br /&gt;  57181 = 211 * 271&lt;br /&gt;  57263 = 173 * 331&lt;br /&gt;  57311 = 223 * 257&lt;br /&gt;  57377 = 181 * 317&lt;br /&gt;  57479 = 229 * 251&lt;br /&gt;  57599 = 239 * 241&lt;br /&gt;  57721 = 197 * 293&lt;br /&gt;  58081 = 241 * 241&lt;br /&gt;  58301 = 173 * 337&lt;br /&gt;  58307 = 199 * 293&lt;br /&gt;  58339 = 227 * 257&lt;br /&gt;  58447 = 211 * 277&lt;br /&gt;  58483 = 233 * 251&lt;br /&gt;  58637 = 191 * 307&lt;br /&gt;  58649 = 223 * 263&lt;br /&gt;  58853 = 229 * 257&lt;br /&gt;  59249 = 179 * 331&lt;br /&gt;  59251 = 193 * 307&lt;br /&gt;  59291 = 211 * 281&lt;br /&gt;  59401 = 191 * 311&lt;br /&gt;  59701 = 227 * 263&lt;br /&gt;  59713 = 211 * 283&lt;br /&gt;  59783 = 191 * 313&lt;br /&gt;  59881 = 233 * 257&lt;br /&gt;  59911 = 181 * 331&lt;br /&gt;  59987 = 223 * 269&lt;br /&gt;  59989 = 239 * 251&lt;br /&gt;  60023 = 193 * 311&lt;br /&gt;  60227 = 229 * 263&lt;br /&gt;  60323 = 179 * 337&lt;br /&gt;  60409 = 193 * 313&lt;br /&gt;  60433 = 223 * 271&lt;br /&gt;  60479 = 197 * 307&lt;br /&gt;  60491 = 241 * 251&lt;br /&gt;  60547 = 191 * 317&lt;br /&gt;  60997 = 181 * 337&lt;br /&gt;  61063 = 227 * 269&lt;br /&gt;  61093 = 199 * 307&lt;br /&gt;  61181 = 193 * 317&lt;br /&gt;  61267 = 197 * 311&lt;br /&gt;  61279 = 233 * 263&lt;br /&gt;  61423 = 239 * 257&lt;br /&gt;  61517 = 227 * 271&lt;br /&gt;  61601 = 229 * 269&lt;br /&gt;  61661 = 197 * 313&lt;br /&gt;  61771 = 223 * 277&lt;br /&gt;  61823 = 211 * 293&lt;br /&gt;  61889 = 199 * 311&lt;br /&gt;  61937 = 241 * 257&lt;br /&gt;  62059 = 229 * 271&lt;br /&gt;  62113 = 179 * 347&lt;br /&gt;  62287 = 199 * 313&lt;br /&gt;  62449 = 197 * 317&lt;br /&gt;  62471 = 179 * 349&lt;br /&gt;  62663 = 223 * 281&lt;br /&gt;  62677 = 233 * 269&lt;br /&gt;  62807 = 181 * 347&lt;br /&gt;  62857 = 239 * 263&lt;br /&gt;  62879 = 227 * 277&lt;br /&gt;  63001 = 251 * 251&lt;br /&gt;  63083 = 199 * 317&lt;br /&gt;  63109 = 223 * 283&lt;br /&gt;  63143 = 233 * 271&lt;br /&gt;  63169 = 181 * 349&lt;br /&gt;  63187 = 179 * 353&lt;br /&gt;  63221 = 191 * 331&lt;br /&gt;  63383 = 241 * 263&lt;br /&gt;  63433 = 229 * 277&lt;br /&gt;  63787 = 227 * 281&lt;br /&gt;  63883 = 193 * 331&lt;br /&gt;  63893 = 181 * 353&lt;br /&gt;  64241 = 227 * 283&lt;br /&gt;  64291 = 239 * 269&lt;br /&gt;  64349 = 229 * 281&lt;br /&gt;  64367 = 191 * 337&lt;br /&gt;  64507 = 251 * 257&lt;br /&gt;  64541 = 233 * 277&lt;br /&gt;  64769 = 239 * 271&lt;br /&gt;  64777 = 211 * 307&lt;br /&gt;  64807 = 229 * 283&lt;br /&gt;  64829 = 241 * 269&lt;br /&gt;  64979 = 181 * 359&lt;br /&gt;  65041 = 193 * 337&lt;br /&gt;  65207 = 197 * 331&lt;br /&gt;  65311 = 241 * 271&lt;br /&gt;  65339 = 223 * 293&lt;br /&gt;  65473 = 233 * 281&lt;br /&gt;  65621 = 211 * 311&lt;br /&gt;  65869 = 199 * 331&lt;br /&gt;  65939 = 233 * 283&lt;br /&gt;  66013 = 251 * 263&lt;br /&gt;  66043 = 211 * 313&lt;br /&gt;  66049 = 257 * 257&lt;br /&gt;  66203 = 239 * 277&lt;br /&gt;  66277 = 191 * 347&lt;br /&gt;  66389 = 197 * 337&lt;br /&gt;  66511 = 227 * 293&lt;br /&gt;  66659 = 191 * 349&lt;br /&gt;  66757 = 241 * 277&lt;br /&gt;  66887 = 211 * 317&lt;br /&gt;  66971 = 193 * 347&lt;br /&gt;  67063 = 199 * 337&lt;br /&gt;  67097 = 229 * 293&lt;br /&gt;  67159 = 239 * 281&lt;br /&gt;  67357 = 193 * 349&lt;br /&gt;  67423 = 191 * 353&lt;br /&gt;  67519 = 251 * 269&lt;br /&gt;  67591 = 257 * 263&lt;br /&gt;  67637 = 239 * 283&lt;br /&gt;  67721 = 241 * 281&lt;br /&gt;  68021 = 251 * 271&lt;br /&gt;  68129 = 193 * 353&lt;br /&gt;  68203 = 241 * 283&lt;br /&gt;  68269 = 233 * 293&lt;br /&gt;  68359 = 197 * 347&lt;br /&gt;  68461 = 223 * 307&lt;br /&gt;  68569 = 191 * 359&lt;br /&gt;  68753 = 197 * 349&lt;br /&gt;  69053 = 199 * 347&lt;br /&gt;  69133 = 257 * 269&lt;br /&gt;  69169 = 263 * 263&lt;br /&gt;  69287 = 193 * 359&lt;br /&gt;  69353 = 223 * 311&lt;br /&gt;  69451 = 199 * 349&lt;br /&gt;  69527 = 251 * 277&lt;br /&gt;  69541 = 197 * 353&lt;br /&gt;  69647 = 257 * 271&lt;br /&gt;  69689 = 227 * 307&lt;br /&gt;  69799 = 223 * 313&lt;br /&gt;  69841 = 211 * 331&lt;br /&gt;  70027 = 239 * 293&lt;br /&gt;  70097 = 191 * 367&lt;br /&gt;  70247 = 199 * 353&lt;br /&gt;  70303 = 229 * 307&lt;br /&gt;  70531 = 251 * 281&lt;br /&gt;  70597 = 227 * 311&lt;br /&gt;  70613 = 241 * 293&lt;br /&gt;  70691 = 223 * 317&lt;br /&gt;  70723 = 197 * 359&lt;br /&gt;  70747 = 263 * 269&lt;br /&gt;  70831 = 193 * 367&lt;br /&gt;  71033 = 251 * 283&lt;br /&gt;  71051 = 227 * 313&lt;br /&gt;  71107 = 211 * 337&lt;br /&gt;  71189 = 257 * 277&lt;br /&gt;  71219 = 229 * 311&lt;br /&gt;  71243 = 191 * 373&lt;br /&gt;  71273 = 263 * 271&lt;br /&gt;  71441 = 199 * 359&lt;br /&gt;  71531 = 233 * 307&lt;br /&gt;  71677 = 229 * 313&lt;br /&gt;  71959 = 227 * 317&lt;br /&gt;  71989 = 193 * 373&lt;br /&gt;  72217 = 257 * 281&lt;br /&gt;  72299 = 197 * 367&lt;br /&gt;  72361 = 269 * 269&lt;br /&gt;  72389 = 191 * 379&lt;br /&gt;  72463 = 233 * 311&lt;br /&gt;  72593 = 229 * 317&lt;br /&gt;  72731 = 257 * 283&lt;br /&gt;  72851 = 263 * 277&lt;br /&gt;  72899 = 269 * 271&lt;br /&gt;  72929 = 233 * 313&lt;br /&gt;  73033 = 199 * 367&lt;br /&gt;  73147 = 193 * 379&lt;br /&gt;  73217 = 211 * 347&lt;br /&gt;  73373 = 239 * 307&lt;br /&gt;  73441 = 271 * 271&lt;br /&gt;  73481 = 197 * 373&lt;br /&gt;  73543 = 251 * 293&lt;br /&gt;  73639 = 211 * 349&lt;br /&gt;  73813 = 223 * 331&lt;br /&gt;  73861 = 233 * 317&lt;br /&gt;  73903 = 263 * 281&lt;br /&gt;  73919 = 193 * 383&lt;br /&gt;  73987 = 241 * 307&lt;br /&gt;  74227 = 199 * 373&lt;br /&gt;  74329 = 239 * 311&lt;br /&gt;  74429 = 263 * 283&lt;br /&gt;  74483 = 211 * 353&lt;br /&gt;  74513 = 269 * 277&lt;br /&gt;  74663 = 197 * 379&lt;br /&gt;  74807 = 239 * 313&lt;br /&gt;  74951 = 241 * 311&lt;br /&gt;  75067 = 271 * 277&lt;br /&gt;  75137 = 227 * 331&lt;br /&gt;  75151 = 223 * 337&lt;br /&gt;  75301 = 257 * 293&lt;br /&gt;  75421 = 199 * 379&lt;br /&gt;  75433 = 241 * 313&lt;br /&gt;  75451 = 197 * 383&lt;br /&gt;  75589 = 269 * 281&lt;br /&gt;  75749 = 211 * 359&lt;br /&gt;  75763 = 239 * 317&lt;br /&gt;  75799 = 229 * 331&lt;br /&gt;  76127 = 269 * 283&lt;br /&gt;  76151 = 271 * 281&lt;br /&gt;  76217 = 199 * 383&lt;br /&gt;  76397 = 241 * 317&lt;br /&gt;  76499 = 227 * 337&lt;br /&gt;  76633 = 197 * 389&lt;br /&gt;  76693 = 271 * 283&lt;br /&gt;  76729 = 277 * 277&lt;br /&gt;  77057 = 251 * 307&lt;br /&gt;  77059 = 263 * 293&lt;br /&gt;  77123 = 233 * 331&lt;br /&gt;  77173 = 229 * 337&lt;br /&gt;  77381 = 223 * 347&lt;br /&gt;  77411 = 199 * 389&lt;br /&gt;  77437 = 211 * 367&lt;br /&gt;  77827 = 223 * 349&lt;br /&gt;  77837 = 277 * 281&lt;br /&gt;  78061 = 251 * 311&lt;br /&gt;  78391 = 277 * 283&lt;br /&gt;  78521 = 233 * 337&lt;br /&gt;  78563 = 251 * 313&lt;br /&gt;  78703 = 211 * 373&lt;br /&gt;  78719 = 223 * 353&lt;br /&gt;  78769 = 227 * 347&lt;br /&gt;  78817 = 269 * 293&lt;br /&gt;  78899 = 257 * 307&lt;br /&gt;  78961 = 281 * 281&lt;br /&gt;  79003 = 199 * 397&lt;br /&gt;  79109 = 239 * 331&lt;br /&gt;  79223 = 227 * 349&lt;br /&gt;  79403 = 271 * 293&lt;br /&gt;  79463 = 229 * 347&lt;br /&gt;  79523 = 281 * 283&lt;br /&gt;  79567 = 251 * 317&lt;br /&gt;  79771 = 241 * 331&lt;br /&gt;  79921 = 229 * 349&lt;br /&gt;  79927 = 257 * 311&lt;br /&gt;  79969 = 211 * 379&lt;br /&gt;  80057 = 223 * 359&lt;br /&gt;  80089 = 283 * 283&lt;br /&gt;  80131 = 227 * 353&lt;br /&gt;  80441 = 257 * 313&lt;br /&gt;  80543 = 239 * 337&lt;br /&gt;  80741 = 263 * 307&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-02-05T19:25:00Z",
"URL":" http://kenta.blogspot.com/2022/02/vnhqmqp-semiprimes.html "
}
,
{
"title":"Richard Eisenberg: singletons v0.9 Released!",
"textBody":"&lt;p&gt;I just uploaded singletons-0.9.2 to hackage. This is a significant upgrade from previous versions, and it gives me a good chance to explain some of its features here.&lt;/p&gt; &lt;p&gt;This post is a literate Haskell file. Copy and paste it into a .lhs file, and you’re off to the races. But first, of course, a little throat-clearing:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; &lt;span style=&quot;color: green;&quot;&gt;{-# LANGUAGE TemplateHaskell, PolyKinds, DataKinds, TypeFamilies, &amp;gt;              ScopedTypeVariables, GADTs, StandaloneDeriving, RankNTypes, &amp;gt;              TypeOperators #-}&lt;/span&gt; &amp;gt;  &amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;import&lt;/span&gt; Data.Singletons.TH &amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;import&lt;/span&gt; Unsafe.Coerce    &lt;span style=&quot;color: green;&quot;&gt;-- don't hate me yet! keep reading!&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The singletons library was developed as part of the research behind this &lt;a href=&quot;http://www.cis.upenn.edu/~eir/papers/2012/singletons/paper.pdf&quot;&gt;paper&lt;/a&gt;, published at the Haskell Symposium, 2012.&lt;/p&gt; &lt;h2 id=&quot;what-are-singletons&quot;&gt;What are singletons?&lt;/h2&gt; &lt;p&gt;Singleton types are a technique for “faking” dependent types in non-dependent languages, such as Haskell. They have been known for some time – please see the original research &lt;a href=&quot;https://richarde.dev/papers/2012/singletons/paper.pdf&quot;&gt;paper&lt;/a&gt; for more history and prior work. A singleton type is a type with exactly one value. (Note that &lt;code&gt;undefined&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a value!) Because of this curious fact, learning something about the value of a singleton type tells you about the type, and vice versa.&lt;/p&gt; &lt;p&gt;A few lines of example is worth several paragraphs of awkward explanation, so here we go (the underscores are to differentiate from our second version, below):&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; Nat_ &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Zero_ &lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt; Succ_ Nat_ &amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; SNat_ &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Nat_ &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; * &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt; &amp;gt;   SZero_ &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; SNat_ Zero_ &amp;gt;   SSucc_ &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; SNat_ n &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; SNat_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Succ_ n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &amp;gt;  &amp;gt; plus_ &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Nat_ &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Nat_ &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Nat_ &amp;gt; plus_ Zero_     n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; n &amp;gt; plus_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Succ_ m&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Succ_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;plus_ m n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &amp;gt;  &amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; family Plus_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;m &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Nat_&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;n &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Nat_&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Nat_ &amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;instance&lt;/span&gt; Plus_ Zero_     n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; n &amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;instance&lt;/span&gt; Plus_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Succ_ m&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Succ_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Plus_ m n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &amp;gt;  &amp;gt; sPlus_ &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; SNat_ m &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; SNat_ n &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; SNat_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Plus_ m n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &amp;gt; sPlus_ SZero_     n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; n &amp;gt; sPlus_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;SSucc_ m&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; SSucc_ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;sPlus_ m n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here, &lt;code&gt;SNat_&lt;/code&gt; defines a singleton family of types. Note that, for any &lt;code&gt;n&lt;/code&gt;, there is exactly one value of &lt;code&gt;SNat_ n&lt;/code&gt;. This means that when we pattern-match on a &lt;code&gt;SNat_&lt;/code&gt;, we learn about the &lt;em&gt;type&lt;/em&gt; variable along with the term-level variable. This, in turn, allows for more type-level reasoning to show correctness for our code. See the &lt;a href=&quot;http://www.cis.upenn.edu/~eir/papers/2012/singletons/paper.pdf&quot;&gt;paper&lt;/a&gt; for more explanation here.&lt;/p&gt; &lt;p&gt;Using singletons, we can pretend Haskell is dependently typed. For example, I have written a &lt;a href=&quot;https://github.com/goldfirere/singletons/blob/master/Test/Database.hs&quot;&gt;richly-typed database client&lt;/a&gt; and a provably* correct &lt;a href=&quot;https://github.com/goldfirere/singletons/blob/master/Test/InsertionSortImp.hs&quot;&gt;sorting algorithm&lt;/a&gt; using singletons.&lt;/p&gt; &lt;p&gt;*Of course, Haskell is not a &lt;em&gt;total&lt;/em&gt; language (that is, it has &lt;code&gt;undefined&lt;/code&gt; and friends), so any proof should be viewed with suspicion. More accurately, it is a proof of &lt;em&gt;partial&lt;/em&gt; correctness. When the sorting algorithm compiles in finite time and when it runs in finite time, the result it produces is indeed a sorted list.&lt;/p&gt; &lt;h2 id=&quot;dont-repeat-yourself&quot;&gt;Don’t Repeat Yourself&lt;/h2&gt; &lt;p&gt;The above definitions are neat and all, but they sure are annoying. Haskell’s built-in promotion mechanism duplicates &lt;code&gt;Nat_&lt;/code&gt; at the type and kind level for us, but we have to be responsible for all &lt;em&gt;three&lt;/em&gt; versions of &lt;code&gt;plus_&lt;/code&gt;. Let’s use the singletons library to help us!&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; $&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;singletons &lt;span style=&quot;color: red;&quot;&gt;[&lt;/span&gt;d&lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt; &amp;gt;   &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; Nat &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Zero &lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt; Succ Nat &amp;gt;     &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;deriving&lt;/span&gt; Eq &amp;gt;  &amp;gt;   plus &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Nat &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Nat &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Nat &amp;gt;   plus Zero     n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; n &amp;gt;   plus &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Succ m&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; n &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Succ &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;plus m n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &amp;gt;   &lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The code above is a Template Haskell splice, containing a call to the &lt;code&gt;singletons&lt;/code&gt; function (exported from &lt;code&gt;Data.Singletons.TH&lt;/code&gt;). That function’s one argument is a Template Haskell quote, containing the abstract syntax tree of the definitions in the quote. The singletons library chews on those definitions to produce all the definitions above, and more.&lt;/p&gt; &lt;p&gt;To demonstrate the usefulness of singletons, we’ll need length-indexed vectors:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; Vec &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; * &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Nat &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; * &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt; &amp;gt;   VNil  &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Vec a Zero &amp;gt;   VCons &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Vec a n &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Vec a &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Succ n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &amp;gt;  &amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;instance&lt;/span&gt; Show a &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; Show &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Vec a n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt; &amp;gt;   show VNil        &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: teal;&quot;&gt;&quot;VNil&quot;&lt;/span&gt; &amp;gt;   show &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;VCons h t&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; show h ++ &lt;span style=&quot;color: teal;&quot;&gt;&quot; : &quot;&lt;/span&gt; ++ show t &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now, we can write a well-typed &lt;code&gt;vReplicate&lt;/code&gt; function:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; vReplicate &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; SNat n &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Vec a n &amp;gt; vReplicate SZero      &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;_&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; VNil &amp;gt; vReplicate &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;SSucc n'&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; x &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; VCons x &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;vReplicate n' x&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This works as expected:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: gray;&quot;&gt;ghci&amp;gt; &lt;/span&gt;vReplicate (SSucc (SSucc (SSucc SZero))) &quot;hi&quot;   &quot;hi&quot; : &quot;hi&quot; : &quot;hi&quot; : VNil &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Even better, we can make the numerical argument to &lt;code&gt;vReplicate&lt;/code&gt; &lt;em&gt;implicit&lt;/em&gt;, using &lt;code&gt;SingI&lt;/code&gt;. The &lt;code&gt;SingI&lt;/code&gt; class is very simple:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;class&lt;/span&gt; SingI &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; k&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt;   sing &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Sing a&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A dictionary for (that is, a class constraint of) &lt;code&gt;SingI&lt;/code&gt; just holds an implicit singleton. (See the &lt;a href=&quot;http://www.cis.upenn.edu/~eir/papers/2012/singletons/paper.pdf&quot;&gt;paper&lt;/a&gt; for more info about &lt;code&gt;Sing&lt;/code&gt;, which I won’t go over in this post.) Now, we can define the improved &lt;code&gt;vReplicateI&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; vReplicateI &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;forall&lt;/span&gt; a n. SingI n &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Vec a n &amp;gt; vReplicateI x &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; &amp;gt;   &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;case&lt;/span&gt; sing &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; SNat n &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;of&lt;/span&gt; &amp;gt;     SZero    &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VNil &amp;gt;     SSucc n' &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; VCons x &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;withSingI n' $ vReplicateI x&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;/code&gt; &lt;code&gt;&lt;span style=&quot;color: gray;&quot;&gt;ghci&amp;gt; &lt;/span&gt;vReplicateI &quot;hi&quot; :: Vec String (Succ (Succ (Succ Zero)))    &lt;span style=&quot;color: blue;&quot;&gt;&quot;hi&quot; : &quot;hi&quot; : &quot;hi&quot; : VNil&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Cool!&lt;/p&gt; &lt;p&gt;At this point, you may also want to check out the &lt;a href=&quot;http://www.cis.upenn.edu/~eir/packages/singletons/haddock/&quot;&gt;generated documentation&lt;/a&gt; for the singletons library to see a little more of what’s going on. The rest of this post will focus on some of the strange and wonderful new features of v0.9.&lt;/p&gt; &lt;h2 id=&quot;magic-singi-dictionaries&quot;&gt;Magic &lt;code&gt;SingI&lt;/code&gt; dictionaries&lt;/h2&gt; &lt;p&gt;Previous versions of singletons had definitions like this:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;instance&lt;/span&gt; Sing &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;n &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Nat&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt;   SZero &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Sing Zero   SSucc &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; SingI n &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; Sing n &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Sing &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Succ n&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The key difference here is the &lt;code&gt;SingI&lt;/code&gt; constraint in the &lt;code&gt;SSucc&lt;/code&gt; constructor. This constraint meant that if you pattern-matched on an &lt;code&gt;SNat&lt;/code&gt; and got a &lt;code&gt;SSucc&lt;/code&gt;, you would get &lt;em&gt;both&lt;/em&gt; an explicit singleton for (n-1) and an implicit singleton (that is, a &lt;code&gt;SingI&lt;/code&gt; dictionary) for (n-1). This was useful, and it meant that the old version of &lt;code&gt;vReplicateI&lt;/code&gt; wouldn’t need the &lt;code&gt;withSingI&lt;/code&gt; business. But, it also meant that &lt;em&gt;every&lt;/em&gt; node in a singleton had duplicated information. Since this was true at &lt;em&gt;every&lt;/em&gt; (interior) node, singleton trees were &lt;strong&gt;exponentially&lt;/strong&gt; larger than necessary. Yuck. Somehow, none of my advisor, our reviewers, nor me noticed this before. My advisor (&lt;a href=&quot;http://www.cis.upenn.edu/~sweirich/&quot;&gt;Stephanie Weirich&lt;/a&gt;) and I somehow convinced ourselves that the duplication would lead to trees that were double the necessary size, which we deemed acceptable. Oops!&lt;/p&gt; &lt;p&gt;In singletons 0.9, though, a singleton just contains the explicit version. We then needed a way to convert from explicit ones to implicit ones. To do this, I used a trick I learned from Edward Kmett at ICFP this year: take advantage of the fact that classes with exactly one method (and no superclass) are represented solely by the method, and nothing else. Thus, a dictionary for &lt;code&gt;SingI&lt;/code&gt; is actually the same, in memory, as a real singleton! To go from explicit to implicit, then, we just have to wave a magic wand and change the type of a singleton from &lt;code&gt;Sing a&lt;/code&gt; to &lt;code&gt;SingI a&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The magic wand is easy; it’s called &lt;code&gt;unsafeCoerce&lt;/code&gt;. What’s a little trickier is the fact that, of course, we can’t have dictionaries in the same place as normal datatypes in Haskell code. The first step is to create a way to explicitly talk about dictionaries. We make a datatype wrapper:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; SingInstance &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; k&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt; &amp;gt;   SingInstance &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; SingI a &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; SingInstance a &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To call the &lt;code&gt;SingInstance&lt;/code&gt; constructor, we need to have a &lt;code&gt;SingI a&lt;/code&gt; lying around. When we pattern-match on a &lt;code&gt;SingInstance&lt;/code&gt;, we get that &lt;code&gt;SingI a&lt;/code&gt; back. Perfect.&lt;/p&gt; &lt;p&gt;Now, we need a way to call the &lt;code&gt;SingInstance&lt;/code&gt; constructor when we have an &lt;em&gt;explicit&lt;/em&gt; singleton. Naively, we could imagine saying something like&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;... &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;unsafeCoerce SingInstance &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Sing a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; SingInstance a&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;because, after all, &lt;code&gt;SingI a =&amp;gt; SingInstance a&lt;/code&gt; is the same under the hood as &lt;code&gt;Sing a -&amp;gt; SingInstance a&lt;/code&gt;. The problem here is that as soon as we say &lt;code&gt;SingInstance&lt;/code&gt; in Haskell code, GHC helpfully tries to solve the arising &lt;code&gt;SingI a&lt;/code&gt; constraint – something we do &lt;em&gt;not&lt;/em&gt; want here. (Once the &lt;code&gt;SingInstance&lt;/code&gt; is instantiated, its type is just &lt;code&gt;SingInstance a&lt;/code&gt;, which is &lt;em&gt;not&lt;/em&gt; the same as &lt;code&gt;Sing a -&amp;gt; SingInstance a&lt;/code&gt;!) The answer is to use a &lt;code&gt;newtype&lt;/code&gt; the prevents instantiation:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;newtype&lt;/span&gt; DI a &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Don'tInstantiate &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;SingI a &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; SingInstance a&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now, after a call to the &lt;code&gt;Don'tInstantiate&lt;/code&gt; constructor, GHC will refrain from instantiating. Great – now we just need to connect the dots:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; singInstance &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;forall&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; k&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;. Sing a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; SingInstance a &amp;gt; singInstance s &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; with_sing_i SingInstance &amp;gt;   &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt; &amp;gt;     with_sing_i &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;SingI a &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; SingInstance a&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; SingInstance a &amp;gt;     with_sing_i si &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; unsafeCoerce &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Don'tInstantiate si&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; s &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It’s dirty work, but someone’s got to do it. And it saves us from exponential blow-up, so I’d say it’s worth it. The &lt;code&gt;withSingI&lt;/code&gt; function we saw used above is just a convenient wrapper:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&amp;gt; withSingI &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; Sing n &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;SingI n &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; r&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; r &amp;gt; withSingI sn r &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; &amp;gt;   &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;case&lt;/span&gt; singInstance sn &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;of&lt;/span&gt; &amp;gt;     SingInstance &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;decidable-propositional-equality&quot;&gt;Decidable propositional equality&lt;/h2&gt; &lt;p&gt;A &lt;a href=&quot;http://typesandkinds.wordpress.com/2012/12/01/decidable-propositional-equality-in-haskell/&quot;&gt;previous post&lt;/a&gt; on this blog discussed the different between Boolean equality and propositional equality. Previous versions of singletons contained the &lt;code&gt;SEq&lt;/code&gt; “kind class” to use Boolean equality on singleton types. Singletons 0.9 also contains the &lt;code&gt;SDecide&lt;/code&gt; class to allow for decidable propositional equality on singleton types.&lt;/p&gt; &lt;p&gt;Before we dive right into &lt;code&gt;SDecide&lt;/code&gt; though, let’s review a few new definitions in the standard library (&lt;code&gt;base&lt;/code&gt; package) shipping with GHC 7.8. Under &lt;code&gt;Data.Type.Equality&lt;/code&gt;, we have these handy definitions:&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; a :~: b &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt;   Refl &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; a :~: a  gcastWith &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a :~: b&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a &lt;span style=&quot;color: red;&quot;&gt;~&lt;/span&gt; b&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; r&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; r gcastWith Refl x &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; x  &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;class&lt;/span&gt; TestEquality &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;f &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; k &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; *&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt;    testEquality &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; f a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; f b &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Maybe &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a :~: b&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The idea behind the &lt;code&gt;TestEquality&lt;/code&gt; class is that it should classify datatypes whose definitions are such that we can (perhaps) learn about the equality of type variables by looking at terms. Singletons are the chief candidates for instances of this class. &lt;code&gt;Typeable&lt;/code&gt; almost is, but it’s at the wrong kind – &lt;code&gt;k -&amp;gt; Constraint&lt;/code&gt; instead of &lt;code&gt;k -&amp;gt; *&lt;/code&gt;. (See the new function &lt;code&gt;Data.Typeable.eqT&lt;/code&gt; for comparison.)&lt;/p&gt; &lt;p&gt;&lt;code&gt;SDecide&lt;/code&gt; takes the &lt;code&gt;TestEquality&lt;/code&gt; idea one step further, providing full decidable propositional equality. See the &lt;a href=&quot;http://typesandkinds.wordpress.com/2012/12/01/decidable-propositional-equality-in-haskell/&quot;&gt;previous post&lt;/a&gt; on propositional equality for more background.&lt;/p&gt; &lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; Void &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;type&lt;/span&gt; Refuted a &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Void &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;data&lt;/span&gt; Decision a &lt;span style=&quot;color: red;&quot;&gt;=&lt;/span&gt; Proved a                 &lt;span style=&quot;color: red;&quot;&gt;|&lt;/span&gt; Disproved &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;Refuted a&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;kproxy &lt;span style=&quot;color: red;&quot;&gt;~&lt;/span&gt; &lt;span style=&quot;color: teal;&quot;&gt;'&lt;/span&gt;KProxy&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;=&amp;gt;&lt;/span&gt; SDecide &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;kproxy &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; KProxy k&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;where&lt;/span&gt;   &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;%~&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: blue; font-weight: bold;&quot;&gt;forall&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; k&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;b &lt;span style=&quot;color: red;&quot;&gt;::&lt;/span&gt; k&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;. Sing a &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Sing b &lt;span style=&quot;color: red;&quot;&gt;-&amp;gt;&lt;/span&gt; Decision &lt;span style=&quot;color: red;&quot;&gt;(&lt;/span&gt;a :~: b&lt;span style=&quot;color: red;&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We can now use &lt;code&gt;(%~)&lt;/code&gt; to (perhaps) produce an equality that GHC can use to complete type inference. Instances of &lt;code&gt;SDecide&lt;/code&gt; (and of &lt;code&gt;SEq&lt;/code&gt;, for that matter) are generated for any datatype passed to the &lt;code&gt;singletons&lt;/code&gt; Template Haskell function that derive &lt;code&gt;Eq&lt;/code&gt;. Or, you can use other functions exported by &lt;code&gt;Data.Singletons.TH&lt;/code&gt; to create these instances; see the &lt;a href=&quot;http://www.cis.upenn.edu/~eir/packages/singletons/haddock/&quot;&gt;generated documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt; &lt;p&gt;While the improvements in v0.9 are substantial, there is still much distance to cover. In particular, I conjecture that &lt;em&gt;almost any&lt;/em&gt; function definable at the term level can be promoted to the type level. The exceptions would be unpromotable datatypes (like &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;IO&lt;/code&gt;, or GADTs) and higher-rank functions (there are no higher-rank kinds). Short of that, I think it’s all within reach.&lt;/p&gt; &lt;p&gt;How?&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://www.cis.upenn.edu/~eir/papers/2014/axioms/axioms-extended.pdf&quot;&gt;Closed type families&lt;/a&gt; allow for overlapping patterns.&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://typesandkinds.wordpress.com/2013/04/01/defunctionalization-for-the-win/&quot;&gt;Defunctionalization&lt;/a&gt; allows for unsaturated type-level functions.&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;The &lt;a href=&quot;http://hackage.haskell.org/package/th-desugar-1.2.1&quot;&gt;th-desugar&lt;/a&gt; library desugars Haskell’s fancy constructs into a manageable set.&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;Case statements can be straightforwardly encoded using lambda lifting.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;But, I don’t seem to have the time to put this all into action. If you’re interested in taking some or all of this on, I’d be very happy to collaborate. I believe some interesting research-y things might come out of it all, too, so there might even be something publishable in it. Drop &lt;a href=&quot;http://www.cis.upenn.edu/~eir/&quot;&gt;me&lt;/a&gt; a line to discuss!&lt;/p&gt; &lt;div class=&quot;references&quot;&gt;&lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-02-04T15:58:54Z",
"URL":" https://typesandkinds.wordpress.com/2013/12/17/singletons-v0-9-released/ "
}
,
{
"title":"Chris Smith 2: Monoids are Composable List Summarizers",
"textBody":"&lt;p&gt;The standard definition of a monoid goes something like this: a monoid is any &lt;em&gt;set&lt;/em&gt; (if you’re a mathematician) or &lt;em&gt;type&lt;/em&gt; (if you’re a Haskell programmer), together with an &lt;em&gt;associative binary operation&lt;/em&gt; ∗ (if you’re a mathematician) or &amp;lt;&amp;gt; (if you’re a Haskeller) that has an &lt;em&gt;identity&lt;/em&gt;. That’s nice and abstract. Unfortunately, those without much math background can find it difficult to follow or think of examples.&lt;/p&gt;&lt;p&gt;So here’s a different definition that I’ve used when talking to programmers in particular. I’m sure this isn’t new, but I don’t know of a reference I can point to for it. If you know of a good beginner-accessible reference for this, I’d like to know. It goes something like this: a monoid is any way to &lt;em&gt;summarize a list&lt;/em&gt; so that you can &lt;em&gt;combine&lt;/em&gt; just the summaries of two lists to get a summary of their &lt;em&gt;concatenation.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This second definition is interesting to programmers because it suggests all sorts of strategies for decomposition, parallelism, and distributed computing. Anything that I want to compute from a list is much easier to do if I can take this approach of (1) splitting up the list into parts, (2) computing on each of the parts, then (3) merging the results together. I can do this to build distributed systems where each node computes on only the part of the data it has. I can do it to build parallel code where I effectively use multiple CPUs or even GPUs or SIMD instructions to perform operations on different subsets of data. And it’s useful just for making it easier to express and reason about a program even if there’s nothing fancy going on. (For example, foldMap in Haskell’s Foldable class uses monoids in this way.)&lt;/p&gt;&lt;h4&gt;Examples&lt;/h4&gt;&lt;p&gt;Let’s look at some examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Counts&lt;/strong&gt;: I can summarize a finite list by counting its elements. If I have the counts of two lists, I can compute the count of their concatenation by adding the two counts together.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Sums: &lt;/strong&gt;I can summarize a finite list by its sum. If I have the sum of two lists, I can compute the sum of their concatenation, again by adding.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Minima&lt;/strong&gt; and &lt;strong&gt;Maxima&lt;/strong&gt;: I can summarize a finite list by its minimum and maximum elements. (Lists may be empty, but we can define the minimum and maximum of an empty list to be ∞ and -∞, respectively). And again, if I have the minima and maxima of two lists, I can compute the minimum and maximum of their concatenation, by taking the least of the two minima and the greater of the two maxima.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;GCDs:&lt;/strong&gt; If I’m doing something with number theory, I might summarize a finite list with its greatest common divisor. If I have the greatest common divisors of two lists, I can compute the greatest common divisor of their concatenation, by computing the gcd of the gcds.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Heads:&lt;/strong&gt; I can summarize a list by its head (i.e., first element), if it exists! If the list is empty, I will just note that it has no head. Given the heads of two lists, I can tell you the first element of their concatenation: it’s the head of the left-hand list if it exists, and the head of the right-hand list otherwise.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;The Whole List:&lt;/strong&gt; This one may seem a bit silly, but I’ll reference it later. You can trivially “summarize” a list by just keeping the whole list. Your summarizer here is the identity function! That obviously gives you enough information to know the concatenation, as well, so it’s a perfectly good monoid.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Counter-examples and how to fix them&lt;/h4&gt;&lt;p&gt;At this point, our examples of monoids include counts, sums, minima, maxima, gcds, and heads. With so many examples, one might start to suspect that &lt;em&gt;any&lt;/em&gt; function on lists is a monoid. But of course, that’s not the case. We can look at some instructive counterexamples.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Means:&lt;/strong&gt; If you’re thinking of ways to summarize a list of numbers, one that probably comes to mind is the &lt;em&gt;mean.&lt;/em&gt; The mean is not quite a monoid, because knowing the means of two lists &lt;em&gt;isn’t enough information&lt;/em&gt; to compute the mean of their concatenation. Just averaging the averages doesn’t work, unless the lists happen to be the same length!&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While means themselves aren’t monoids, I can quite easily deal with means using a monoid structure: Instead of keeping the mean itself, I can keep an ordered pair of sum and count, which are monoids, and actually do the division only when I need the final result.&lt;/p&gt;&lt;p&gt;Imagine you are designing parallel or distributed algorithm for computing the mean of some data set. By finding an actual monoid — pairs of counts and sums — I can use it as a sort of halfway point. The monoid structure on counts and sums means you can use a divide-and-conquer approach to take advantage of data parallelism when computing the sums and counts. Split up the list, sum and count each piece, and then combine them. Or maybe the data already lives on different compute nodes, so you can have each node compute the count and sum locally before combining their results. Once you have the overall monoid value (sum and count), it still remains to compute the mean. But luckily, that last step of computation is pretty easy: just one division!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Medians:&lt;/strong&gt; Going down the list of averages, you might also want to know the median of a list. Now things get more dicey, but also more intriguing! Once again, the median itself is not a monoid: knowing the medians of two lists still doesn’t tell you the median of the concatenation.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This leads to the same question as before. Is there some other monoid I can use as my halfway point? There’s one answer that &lt;em&gt;always&lt;/em&gt; works here, but isn’t useful: remember that &lt;em&gt;the whole list&lt;/em&gt; is a monoid. But that answer corresponds to just concatenating the whole list together and only running the summarizer function on the final concatenated list. That avoids interesting uses of monoids entirely.&lt;/p&gt;&lt;p&gt;For the median, can we do better? Honestly, it looks difficult. In general, &lt;em&gt;any&lt;/em&gt; element of a list could wind up being the median of some concatenated list containing it. So it seems that any monoid we choose here will need to contain information about &lt;em&gt;each&lt;/em&gt; element of the list. That’s already looking a lot like the trivial “the whole list” monoid above.&lt;/p&gt;&lt;p&gt;There’s one improvement we can make, though. We don’t care about the order of elements in the list! We can then choose the &lt;em&gt;sorted list&lt;/em&gt; as our monoid.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;First, is that even a monoid? Well, (a) given a list I can always sort it. And (b) If I have the sorted versions of two lists, I can merge them to get the sorted concatenation of those lists. So yes, it’s a monoid.&lt;/li&gt;&lt;li&gt;Not only is it a monoid, but the monoid structure is helpful. It’s actually &lt;em&gt;easier&lt;/em&gt; to merge sorted lists than it is to sort the concatenation of the originals — this is the whole basis of merge sort, after all.&lt;/li&gt;&lt;li&gt;Finally, this monoid helps with computing a median. Although we don’t save on the size of data, it’s trivial to find the median of a list after sorting it.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So we do find an approach to computing medians that can take advantage of monoid structure after all. Ultimately, it amounts to this: sort the list using merge sort, then pick the middle element after sorting. Indeed, merge sort is often used because it has many of the properties we’re interested in: it’s easy to parallelize, distribute over multiple nodes, etc. That’s exactly because of the monoid structure it exploits.&lt;/p&gt;&lt;p&gt;It’s worth mentioning, though, that sorting and then picking the middle element is &lt;em&gt;not&lt;/em&gt; the classically optimal way to find a median. The median-of-medians algorithm can famously do the computation in O(n) time. Perhaps there is some suitably clever monoid that takes advantage of these ideas, but I don’t see how that would happen. In the end, I suppose not all classical algorithms on lists can be expressed as a monoid in this way.&lt;/p&gt;&lt;h4&gt;Why is this equivalent to abstract monoids?&lt;/h4&gt;&lt;p&gt;I haven’t yet justified calling these list-summarizers &lt;em&gt;monoids&lt;/em&gt;. Are they really the same thing as monoids in their traditional mathematical definition? They are, indeed. The short justification is that finite lists are &lt;a href=&quot;https://en.wikipedia.org/wiki/Free_monoid&quot;&gt;&lt;em&gt;free monoids&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Here’s the more complete justification. Let’s call the typical algebra meaning for monoids an &lt;em&gt;abstract monoid&lt;/em&gt;, and this definition as list-summarizers a &lt;em&gt;concrete monoid&lt;/em&gt;. We want to prove that abstract monoids and concrete monoids are equivalent, so the proof has two directions.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Part I:&lt;/strong&gt; Every concrete monoid gives rise to an abstract monoid.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt; The concrete monoid consists of a 4-tuple (S, ∗, E, &lt;em&gt;f&lt;/em&gt;) so that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;f&lt;/em&gt; maps finite lists with elements in E &lt;strong&gt;onto&lt;/strong&gt; S.&lt;/li&gt;&lt;li&gt;If ⧺ denotes concatenation of finite lists, then &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt; ⧺ &lt;em&gt;b&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;b&lt;/em&gt;).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The claim is that (S, ∗) is an abstract monoid. This means we have to prove:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The ∗ operation is associative. That is, for any &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, and &lt;em&gt;z&lt;/em&gt; in S, (&lt;em&gt;x&lt;/em&gt; ∗ &lt;em&gt;y&lt;/em&gt;) ∗ &lt;em&gt;z&lt;/em&gt; = &lt;em&gt;x&lt;/em&gt; ∗ (&lt;em&gt;y&lt;/em&gt; ∗ &lt;em&gt;z&lt;/em&gt;). To show this, we use the fact that &lt;em&gt;f&lt;/em&gt; is onto to find lists &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;c&lt;/em&gt; so that &lt;em&gt;x&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;), &lt;em&gt;y&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;b&lt;/em&gt;), and &lt;em&gt;z&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;c&lt;/em&gt;). Then we have this chain of equalities: (&lt;em&gt;x&lt;/em&gt; ∗ &lt;em&gt;y&lt;/em&gt;) ∗ &lt;em&gt;z&lt;/em&gt; = (&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;b&lt;/em&gt;)) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;c&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a &lt;/em&gt;⧺&lt;em&gt; b&lt;/em&gt;) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;c&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;((&lt;em&gt;a &lt;/em&gt;⧺&lt;em&gt; b&lt;/em&gt;)&lt;em&gt; &lt;/em&gt;⧺ &lt;em&gt;c&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a &lt;/em&gt;⧺&lt;em&gt; &lt;/em&gt;(&lt;em&gt;b &lt;/em&gt;⧺ &lt;em&gt;c&lt;/em&gt;)) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;b&lt;/em&gt; ⧺ &lt;em&gt;c&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) ∗ (&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;b&lt;/em&gt;) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;c&lt;/em&gt;)) = &lt;em&gt;x&lt;/em&gt; ∗ (&lt;em&gt;y&lt;/em&gt; ∗ &lt;em&gt;z&lt;/em&gt;).&lt;/li&gt;&lt;li&gt;The ∗ operation has an identity. For any &lt;em&gt;x&lt;/em&gt; in S, we again use the fact that &lt;em&gt;f&lt;/em&gt; is onto to find &lt;em&gt;x&lt;/em&gt; with &lt;em&gt;x&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;). Then if &lt;em&gt;e&lt;/em&gt; is the empty list, we have &lt;em&gt;x&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a &lt;/em&gt;⧺ &lt;em&gt;e&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;e&lt;/em&gt;) = &lt;em&gt;x &lt;/em&gt;∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;e&lt;/em&gt;), and similarly on the other side. So &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;e&lt;/em&gt;) is the identity.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Part II:&lt;/strong&gt; Every abstract monoid gives rise to a concrete monoid.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt; Let (S, ∗) be an abstract monoid, so ∗ is associative and has an identity. The claim is that we can find an E and &lt;em&gt;f&lt;/em&gt; so that (S, ∗, E, &lt;em&gt;f&lt;/em&gt;) is a &lt;em&gt;concrete monoid&lt;/em&gt; by the definition above. To put this a more conventional way, we want to prove that every monoid arises as the &lt;em&gt;homomorphic image&lt;/em&gt; of a free monoid.&lt;/p&gt;&lt;p&gt;The trick is going to be to let E = S, and &lt;em&gt;f&lt;/em&gt; be the canonical homomorphism from the free monoid generated by S back to S itself. That canonical homomorphism is defined by just mapping the empty list to the identity, and any other finite list like (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, …, &lt;em&gt;z&lt;/em&gt;) to the result of the chained monoid operation &lt;em&gt;x &lt;/em&gt;∗ &lt;em&gt;y &lt;/em&gt;∗ … ∗ &lt;em&gt;z&lt;/em&gt;. We then need to check:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;That this &lt;em&gt;f&lt;/em&gt; is &lt;strong&gt;onto&lt;/strong&gt;. It is, because you can get any &lt;em&gt;x&lt;/em&gt; in S by applying &lt;em&gt;f&lt;/em&gt; to the one-element list containing &lt;em&gt;x&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;That &lt;em&gt;f&lt;/em&gt; is a monoid homomorphism, so &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt; ⧺ &lt;em&gt;b&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) ∗ &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;b&lt;/em&gt;). We need only expand the definition of &lt;em&gt;f&lt;/em&gt; to get &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;a&lt;/em&gt;) and &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;b&lt;/em&gt;) as chains of the monoid operation, and then appeal to the associative property to arrange the parentheses as needed.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Note that a concrete monoid is still just a &lt;em&gt;little&lt;/em&gt; more information than an abstract monoid. An abstract monoid might arise as homomorphic images of &lt;em&gt;more than one&lt;/em&gt; free monoid, whereas our concrete monoids come with a baked-in choice of which free monoid they are the image of, and by which homomorphism. In this sense, we’ve got something roughly analogous to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Concrete_category&quot;&gt;concrete category&lt;/a&gt;, which comes equipped with a faithful functor to another category (often Set). But I think this justifies thinking of these things as capturing the essence of monoids.&lt;/p&gt;&lt;h4&gt;Where next?&lt;/h4&gt;&lt;p&gt;This line of thought leads more places, as well. If monoids are composable summarizers of finite lists, then what about some other structures? In general, any algebraic structure should be describable as homomorphic images of the free structure. But what makes this interesting is that free monoids have a particularly simple meaning. So this is the same as asking which other structures have particularly simple free constructions.&lt;/p&gt;&lt;p&gt;We have:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Semigroups are summarizers of &lt;em&gt;nonempty&lt;/em&gt; finite lists.&lt;/li&gt;&lt;li&gt;Commutative monoids are summarizers of &lt;em&gt;bags&lt;/em&gt; (aka &lt;em&gt;multisets&lt;/em&gt;), where elements can occur more than once, but the order is not significant.&lt;/li&gt;&lt;li&gt;Magmas (that is, sets with a binary operation but no axioms at all) are summarizers of &lt;a href=&quot;https://www.schoolofhaskell.com/user/bss/magma-tree&quot;&gt;binary trees&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are probably more, as well!&lt;/p&gt;&lt;p&gt;Finally, &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/sbgkmb/monoids_are_composable_list_summarizers/hu01bwv/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;this Reddit comment&lt;/a&gt; ties it all together within the Haskell programming language, by astonishingly defining both the notion of a free object &lt;em&gt;and&lt;/em&gt; defining the List data type itself in terms of free monoids, in only a few lines of code:&lt;/p&gt;&lt;pre&gt;type Free :: (Type -&amp;gt; Constraint) -&amp;gt; (Type -&amp;gt; Type)&lt;br /&gt;type Free cls a = (forall x. cls x =&amp;gt; (a -&amp;gt; x) -&amp;gt; x)&lt;/pre&gt;&lt;pre&gt;type List :: Type -&amp;gt; Type&lt;br /&gt;type List a = Free Monoid a&lt;/pre&gt;&lt;pre&gt;toList :: Foldable f =&amp;gt; f a -&amp;gt; List a&lt;br /&gt;toList = flip foldMap&lt;/pre&gt;&lt;p&gt;Cheers!&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=77d2baf23ffc&quot; width=&quot;1&quot; /&gt;",
"source":"Planet Haskell",
"PubDate":"2022-02-04T07:36:06Z",
"URL":" https://cdsmithus.medium.com/monoids-are-composable-list-summarizers-77d2baf23ffc?source=rss-18bd5acaea78------2 "
}
,
{
"title":"Magnus Therning: Keeping Projectile's cache tidy",
"textBody":"&lt;p&gt; A while back I added a function to find all projects recursively from a directory and add them to Projectile's cache (see the &lt;a href=&quot;https://magnus.therning.org/2019-11-05-000-populating-projectile-s-cache.html&quot;&gt;Populating Projectile's cache&lt;/a&gt;). Since then I've just made a tiny change to also include containing a &lt;code&gt;.projectile&lt;/code&gt; file. &lt;/p&gt;  &lt;div class=&quot;org-src-container&quot;&gt; &lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-1&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;org-function-name&quot;&gt;projectile-extra-add-projects-in-subfolders&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;(&lt;/span&gt;projects-root&lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;list &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;read-directory-name &lt;span class=&quot;org-string&quot;&gt;&quot;Add to known projects: &quot;&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;org-string&quot;&gt;&quot;Searching for projects in %s...&quot;&lt;/span&gt; projects-root&lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;proj-rx &lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;rx&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-6&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;and&lt;/span&gt; line-start ?. &lt;span class=&quot;org-rainbow-delimiters-depth-7&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;org-string&quot;&gt;&quot;projectile&quot;&lt;/span&gt; &lt;span class=&quot;org-string&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-7&quot;&gt;)&lt;/span&gt; line-end&lt;span class=&quot;org-rainbow-delimiters-depth-6&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;dirs &lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;(&lt;/span&gt;seq-map                 'file-name-directory                 &lt;span class=&quot;org-rainbow-delimiters-depth-6&quot;&gt;(&lt;/span&gt;directory-files-recursively projects-root                                              proj-rx                                              t&lt;span class=&quot;org-rainbow-delimiters-depth-6&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;seq-do 'projectile-add-known-project dirs&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;org-string&quot;&gt;&quot;Added %d projects&quot;&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;length dirs&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-1&quot;&gt;)&lt;/span&gt; &lt;/pre&gt; &lt;/div&gt;  &lt;p&gt; Since then I've also found a need for tidying the cache, in my casse that means removing entries in the cache that no longer exist on disk. I didn't find a function for it, so I wrote one. &lt;/p&gt;  &lt;div class=&quot;org-src-container&quot;&gt; &lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-1&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;org-function-name&quot;&gt;projectile-extra-tidy-projects&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;missing-dirs &lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;(&lt;/span&gt;seq-remove 'file-directory-p projectile-known-projects&lt;span class=&quot;org-rainbow-delimiters-depth-5&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;seq-do 'projectile-remove-known-project missing-dirs&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;org-string&quot;&gt;&quot;Tidied %d projects&quot;&lt;/span&gt; &lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;(&lt;/span&gt;length missing-dirs&lt;span class=&quot;org-rainbow-delimiters-depth-4&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-3&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-2&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;org-rainbow-delimiters-depth-1&quot;&gt;)&lt;/span&gt; &lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;taglist&quot;&gt;&lt;a href=&quot;https://magnus.therning.org/tags.html&quot;&gt;Tags&lt;/a&gt;: &lt;a href=&quot;https://magnus.therning.org/tag-emacs.html&quot;&gt;emacs&lt;/a&gt; &lt;a href=&quot;https://magnus.therning.org/tag-elisp.html&quot;&gt;elisp&lt;/a&gt; &lt;a href=&quot;https://magnus.therning.org/tag-projectile.html&quot;&gt;projectile&lt;/a&gt; &lt;/div&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-30T14:14:00Z",
"URL":" https://magnus.therning.org/2022-01-30-keeping-projectile's-cache-tidy.html "
}
,
{
"title":"IOHK Haskell: Simple property-based tests for Plutus validators",
"textBody":"",
"source":"Planet Haskell",
"PubDate":"2022-01-27T00:00:00Z",
"URL":" https://iohk.io/blog/posts/2022/01/27/simple-property-based-tests-for-plutus-validators/ "
}
,
{
"title":"Oleg Grenrus: Folding the unfoldable",
"textBody":"&lt;div class=&quot;info&quot;&gt;     Posted on 2022-01-25              by Oleg Grenrus            &lt;/div&gt;  &lt;p&gt;You may be aware of &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt; type-class. It’s quite useful one. For example, instead of writing your own &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt;&lt;/code&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://oleg.fi/gists/atom.xml#fn1&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; as&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;sum' ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb1-2&quot;&gt;&lt;/a&gt;sum' &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; Data.List.foldl' (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;you may generalize it to an arbitrary &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://oleg.fi/gists/atom.xml#fn2&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;sum' ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; f, &lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb2-2&quot;&gt;&lt;/a&gt;sum' &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; Data.Foldable.foldl' (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;And the everything would be great...&lt;/p&gt; &lt;p&gt;... except if your data comes in unboxed vector. You may try to use that generic sum algorithm:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;values ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Vector&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb3-2&quot;&gt;&lt;/a&gt;values &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; U.fromList [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;]&lt;/span&gt; &lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb3-3&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb3-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;result ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb3-5&quot;&gt;&lt;/a&gt;result &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; sum' values&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;and then GHC says, without further explanation:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; for (&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Vector&lt;/span&gt;) arising from a use &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; ‘sum'’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&quot;Why not?!&quot; you wonder.&lt;/p&gt; &lt;p&gt;Unboxed vectors are backed by bytearrays, so you need an &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Unbox&lt;/span&gt;&lt;/code&gt; instance to be able to &lt;em&gt;read&lt;/em&gt; (or write) any values from there. (That’s different from e.g. &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt;&lt;/code&gt;, which is &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt;, as you can walk the structure of &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt;&lt;/code&gt; without having &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;&lt;/code&gt; instance for the elements).&lt;/p&gt; &lt;p&gt;Bummer.&lt;/p&gt; &lt;p&gt;One idea is to&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb5-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Unbox&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Vector&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;When the &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Unbox&lt;/span&gt;&lt;/code&gt; instance is next to the data, we will be able to write &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt; instance: pattern match on the &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt;&lt;/code&gt;, use the &quot;local&quot; instance to fold. However, people have told me, that sometimes it doesn’t work that well: GHC may not specialize things, even the dictionary is (almost) right there. Though in my small experiments it did:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb6-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;sumU ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt; a, &lt;span class=&quot;dt&quot;&gt;U.Unbox&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Vector&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb6-2&quot;&gt;&lt;/a&gt;sumU xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; sum' (&lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt; xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;produced nice loops.&lt;/p&gt; &lt;p&gt;Yet, having to bundle instance feels somehow wrong. Distant &lt;em&gt;data type contexts&lt;/em&gt; vibes, brr..&lt;/p&gt; &lt;p&gt;There is another way to make &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt; work, with a&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb7-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; a b &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb7-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Vector&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; a a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This is a two type-parameter wrapper, but the types are always the same! (I wish that could be a &lt;code&gt;newtype&lt;/code&gt;). The &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt; instance is simply:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb8-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Unbox&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; a) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb8-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;foldr&lt;/span&gt; f z (&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; v)  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; U.foldr f z v&lt;/span&gt; &lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb8-3&quot;&gt;&lt;/a&gt;    foldl' f z (&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; v) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; U.foldl' f z v&lt;/span&gt; &lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb8-4&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb8-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;and specialized &lt;code class=&quot;sourceCode haskell&quot;&gt;sum'&lt;/code&gt; for unboxed vector looks the same as with &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb9-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;sumU ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt; a, &lt;span class=&quot;dt&quot;&gt;U.Unbox&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Vector&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb9-2&quot;&gt;&lt;/a&gt;sumU xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; sum' (&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;but now &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Unbox&lt;/span&gt;&lt;/code&gt; instance comes from the &quot;outside&quot;: it’s required by &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; a)&lt;/code&gt; instance, not to wrap vector in &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt;&lt;/code&gt;. When GHC sees just &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;X&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;...&lt;/span&gt;&lt;/code&gt; it could already start simplifying stuff, if it knows something about &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;X&lt;/span&gt;&lt;/code&gt; (i.e. its &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Unbox&lt;/span&gt;&lt;/code&gt; instance), without waiting to see what the members of the instance are applied to!&lt;/p&gt; &lt;p&gt;We could write also write&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb10-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# SPECIALIZE instance Foldable (UV Double) #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;to force GHC do some work in advance. We couldn’t with &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt;&lt;/code&gt; approach.&lt;/p&gt; &lt;p&gt;Is this &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt;&lt;/code&gt; terrible or terrific? I’m not sure, yet.&lt;/p&gt; &lt;p&gt;Anyhow, that’s all I have this time. This (just a little) tongue-in-cheek post is &quot;inspired&quot; by the fact that &lt;code&gt;statistics&lt;/code&gt; package wants unboxed vectors everywhere, for &quot;performance&quot; reasons, and that is soooo inconvenient.&lt;/p&gt; &lt;p&gt;Please, use &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt; for inputs you will fold over anyway. (Asking for a selector function, like &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;fu&quot;&gt;foldMap&lt;/span&gt;&lt;/code&gt; would avoid creating intermediate structures!). People can choose to &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Bundle&lt;/span&gt;&lt;/code&gt; or &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Hack&lt;/span&gt;&lt;/code&gt; their way around to provide unboxed (or storable) vectors or primarrays to your algorithm, and others don’t need to suffer when they play with your lib in the GHCi.&lt;/p&gt; &lt;p&gt;P.S. I leave this here:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb11-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;HackText&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb11-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;HackText&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;HackText&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Char&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;P.P.S. I know there is &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;MonoFoldable&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;lens&lt;/code&gt; with its &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Fold&lt;/span&gt;&lt;/code&gt;s and a lot of other stuff. But &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt;&lt;/code&gt; is right there, in our &lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Prelude&lt;/span&gt;&lt;/code&gt;!&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell literate&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- e.g. with optics' Each:&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; s a b &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; s &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; s a a&lt;/span&gt; &lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-4&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Each&lt;/span&gt; i s s a a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foldable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; s a) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;foldMap&lt;/span&gt; f  (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; foldMapOf each f   x&lt;/span&gt; &lt;span id=&quot;cb12-7&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;foldr&lt;/span&gt;  f z (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; foldrOf   each f z x&lt;/span&gt; &lt;span id=&quot;cb12-8&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-8&quot;&gt;&lt;/a&gt;    foldl' f z (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; foldlOf'  each f z x&lt;/span&gt; &lt;span id=&quot;cb12-9&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-9&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb12-10&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;{-# SPECIALIZE instance Foldable (O (U.Vector Double) Double) #-}&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb12-11&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-11&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb12-12&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- works too&lt;/span&gt;&lt;/span&gt; &lt;span id=&quot;cb12-13&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;sumO ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt; a, &lt;span class=&quot;dt&quot;&gt;U.Unbox&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;U.Vector&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt; &lt;span id=&quot;cb12-14&quot;&gt;&lt;a href=&quot;https://oleg.fi/gists/atom.xml#cb12-14&quot;&gt;&lt;/a&gt;sumO xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; sum' (&lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt; xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;section class=&quot;footnotes&quot;&gt; &lt;hr /&gt; &lt;ol&gt; &lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;it’s already that way in &lt;code&gt;base&lt;/code&gt;, check yourself &lt;a href=&quot;https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.List.html#sum&quot;&gt;https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.List.html#sum&lt;/a&gt;&lt;a class=&quot;footnote-back&quot; href=&quot;https://oleg.fi/gists/atom.xml#fnref1&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;Though you probably should write it using strict &lt;code class=&quot;sourceCode haskell&quot;&gt;foldMap'&lt;/code&gt; as in base &lt;a href=&quot;https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Foldable.html#sum&quot;&gt;https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Foldable.html#sum&lt;/a&gt; to let container decide how to do it best&lt;a class=&quot;footnote-back&quot; href=&quot;https://oleg.fi/gists/atom.xml#fnref2&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-25T00:00:00Z",
"URL":" https://oleg.fi/gists/posts/2022-01-25-folding-unfoldable.html "
}
,
{
"title":"Well-Typed.Com: Haskell development job with Well-Typed",
"textBody":"&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; &lt;em&gt;If you’d like a job with us, send your application as soon as possible.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Over the next few months, we are looking for one or more Haskell experts to join our team at Well-Typed. At the moment, we are looking particularly for someone who is knowledgeable and interested in one or more of the following areas:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;General Haskell development, possibly with a focus on networking and/or performance.&lt;/li&gt; &lt;li&gt;Teaching Haskell, both at the introductory and the advanced level.&lt;/li&gt; &lt;li&gt;Smart contract development with Plutus (note that this still requires very solid Haskell knowledge as a basis).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This is a great opportunity for someone who is passionate about Haskell and who is keen to improve and promote Haskell in a professional context.&lt;/p&gt; &lt;h3 id=&quot;about-well-typed&quot;&gt;About Well-Typed&lt;/h3&gt; &lt;p&gt;We are a team of top notch Haskell experts. Founded in 2008, we were the first company dedicated to promoting the mainstream commercial use of Haskell. To achieve this aim, we help companies that are using or moving to Haskell by providing a range of services including consulting, development, training, and support and improvement of the Haskell development tools. We work with a wide range of clients, from tiny startups to well-known multinationals. We have established a track record of technical excellence and satisfied customers.&lt;/p&gt; &lt;p&gt;Our company has a strong engineering culture. All our managers and decision makers are themselves Haskell developers. Most of us have an academic background and we are not afraid to apply proper computer science to customers’ problems, particularly the fruits of FP and PL research.&lt;/p&gt; &lt;p&gt;We are a self-funded company so we are not beholden to external investors and can concentrate on the interests of our clients, our staff and the Haskell community.&lt;/p&gt; &lt;h3 id=&quot;about-the-job&quot;&gt;About the job&lt;/h3&gt;  &lt;p&gt;The roles are not tied to a single specific project or task, and are fully remote.&lt;/p&gt; &lt;p&gt;In general, work for Well-Typed could cover any of the projects and activities that we are involved in as a company. The work may involve:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;working on GHC, libraries and tools;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Haskell application development;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;working directly with clients to solve their problems;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;teaching Haskell and developing training materials.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We try wherever possible to arrange tasks within our team to suit peoples’ preferences and to rotate to provide variety and interest.&lt;/p&gt; &lt;p&gt;Well-Typed has a variety of clients. For some we do proprietary Haskell development and consulting. For others, much of the work involves open-source development and cooperating with the rest of the Haskell community: the commercial, open-source and academic users.&lt;/p&gt; &lt;h3 id=&quot;about-you&quot;&gt;About you&lt;/h3&gt; &lt;p&gt;Our ideal candidate has excellent knowledge of Haskell, whether from industry, academia or personal interest. Familiarity with other languages, low-level programming and good software engineering practices are also useful. Good organisation and ability to manage your own time and reliably meet deadlines is important. You should also have good communication skills.&lt;/p&gt; &lt;p&gt;You are likely to have a bachelor’s degree or higher in computer science or a related field, although this isn’t a requirement.&lt;/p&gt; &lt;p&gt;Further (optional) bonus skills:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;experience in teaching Haskell or other technical topics,&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;experience of consulting or running a business,&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;experience with Cardano and/or Plutus,&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;knowledge of and experience in applying formal methods,&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;familiarity with (E)DSL design,&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;knowledge of networking, concurrency and/or systems programming,&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;experience with working on GHC,&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;experience with web programming (in particular front-end),&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;… (you tell us!)&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;offer-details&quot;&gt;Offer details&lt;/h3&gt; &lt;p&gt;The offer is initially for one year full time, with the intention of a long term arrangement. Living in England is not required. We may be able to offer either employment or sub-contracting, depending on the jurisdiction in which you live. The salary range is 50k–90k GBP per year.&lt;/p&gt; &lt;p&gt;If you are interested, please apply by email to &lt;a class=&quot;email&quot; href=&quot;mailto:jobs@well-typed.com&quot;&gt;jobs@well-typed.com&lt;/a&gt;. Tell us why you are interested and why you would be a good fit for Well-Typed, and attach your CV. Please indicate how soon you might be able to start.&lt;/p&gt; &lt;p&gt;We are expecting that we need to fill multiple roles over the next few months, with some flexibility as to the starting dates, so there is no firm application deadline.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-20T00:00:00Z",
"URL":" https://well-typed.com/blog/2022/01/haskell-teaching-and-development-jobs-with-well-typed "
}
,
{
"title":"FP Complete: Confused about Cloud-Native? Want to speed up your dev team's productivity?",
"textBody":"&lt;p&gt;You hear &quot;go Cloud-Native,&quot; but if you're like many, you wonder, &quot;what does that mean, and how can applying a Cloud-Native strategy help my company's Dev Team be more productive?&quot; At a high level, Cloud-Native architecture means adapting to the many new possibilities—but a very different set of architectural constraints—offered by the cloud compared to traditional on-premises infrastructure.&lt;/p&gt; &lt;p&gt;Cloud-Native architecture optimizes systems and software for the cloud. This optimization creates an efficient way to utilize the platform by streamlining the processes and workflows. This is accomplished by harnessing the cloud's inherent strengths: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;its flexibility, &lt;/li&gt; &lt;li&gt;on-demand infrastructure; and &lt;/li&gt; &lt;li&gt;robust managed services. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Cloud-native computing couples these strengths with cloud-optimized technologies such as microservices, containers, and continuous delivery. Cloud-Native takes advantage of the cloud's distributed, scalable and adaptable nature. By doing this, Cloud-Native will maximize your dev team's focus on writing code, reducing operational tasks, creating business value, and keeping your customers happy by building high-impact applications faster, without compromising on quality. You might even think you can’t do cloud-native without using one of the big cloud providers- this simply isn’t true, many of the benefits of cloud-native are the approaches and emphasis on better tooling around automation.&lt;/p&gt; &lt;h2 id=&quot;why-move-to-cloud-native-now&quot;&gt;Why Move to Cloud-Native Now?&lt;/h2&gt; &lt;p&gt;&lt;em&gt;#1 - High-Frequency Software Release&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Faster and more frequent updates and new features releases allow your organization to respond to user needs in near real-time, increasing user retention. For example, new software versions with novel features can be released incrementally and more often as they become available. In addition, Cloud-native makes high-frequency software possible via continuous integration (CI) and continuous deployment (CD), where full version commits are no longer needed. Instead, one can modify, test, and commit just a few lines of code continuously and automatically to meet changing customer trends, thereby giving your organization an edge. &lt;/p&gt; &lt;p&gt;&lt;em&gt;#2 - Automatic Software Updates&lt;/em&gt;&lt;/p&gt; &lt;p&gt;One of the most valuable Cloud-native features is automation. For example, updates are deployed automatically without interfering with core applications or user base. Automated redundancies for infrastructure can automatically move applications between data centers as needed with little to zero human intervention. Even scalability, testing, and resource allocation can be automated. There are many available automation tools in the marketplace, such as FP Complete Corporation's widely accepted tool, &lt;a href=&quot;https://www.fpcomplete.com/products/kube360/&quot;&gt;Kube360&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;#3 - Greater Protection from Software Failures&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Isolation of containers is another important cloud-native feature. Software failures and bugs can be traced to a specific microservice version, rolled back, or fixed quickly. Software fixes can be tested in isolation without compromising the stability of the entire application. On the other hand, if there's a widespread failure, automation can restore the application to a previous stable state, minimizing downtime. Automated DevOps testing before code goes to production (example: linting and software scrubbing) drives faster bug detection and resolution- reducing the risk of bugs in production.&lt;/p&gt; &lt;h2 id=&quot;wow-cloud-native-seems-perfect-what-s-the-catch&quot;&gt;WOW – Cloud-Native Seems Perfect – What's the Catch?&lt;/h2&gt; &lt;p&gt;Switching over to Cloud-Native architecture requires a thorough assessment of your existing application setup. The biggest question you and your team need to ask before making any moves is, &quot;should our business modernize our current applications, or should we build new applications from scratch and utilize Cloud-Native development practices?&quot;&lt;/p&gt; &lt;p&gt;If you choose to modernize your existing application, you will save time and money by capitalizing on the cloud's agility, flexibility, and scalability. Your dev team can retain existing application functionality and business logic, re-architect into a Cloud-Native app, and containerize to utilize the cloud platform's strengths.&lt;/p&gt; &lt;p&gt;You can also build a net-new application using Cloud-Native development practices instead of upgrading your legacy applications. Building from scratch may make more sense from a corporate culture, risk management, and regulatory compliance standpoint. You keep running old application code unchanged while developing and phasing in a platform. Building new applications also allows dev teams to develop applications free from prior architectural constraints, allowing developers to experiment and deliver innovation to users.&lt;/p&gt; &lt;h2 id=&quot;three-essential-tools-for-successful-cloud-native-architecture&quot;&gt;Three Essential Tools for Successful Cloud-Native Architecture&lt;/h2&gt; &lt;p&gt;Whether you decide to create a new Cloud-Native application or modernize your existing ones, your dev team needs to use these three tools for successful implementation of Cloud-Native Architecture:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;em&gt;Microservices Architecture&lt;/em&gt;. &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A cloud-native microservice architecture is considered a &quot;best practice&quot; architectural approach for creating cloud applications because each application makes up a set of services. Each service runs its processes and communicates through clearly defined APIs, which provide good foundations for continuous delivery. With microservices, ideally each service is independently deployable This architecture allows each service to be updated independently without interfering with another service. This results in:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;reduced downtime for users; &lt;/li&gt; &lt;li&gt;simplified troubleshooting; and &lt;/li&gt; &lt;li&gt;minimized disruptions even if a problem's identified.  Which allows for high-frequency updates and continuous delivery. &lt;/li&gt; &lt;/ul&gt; &lt;ol start=&quot;2&quot;&gt; &lt;li&gt;&lt;em&gt;Container-based Infrastructure Platform&lt;/em&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Now that your microservice architecture is broken down into individual container-based services, the next essential tool is a system to manage all those containers automatically - known as a ‘container orchestrator. The most widely accepted platform is Kubernetes, an open-source system originally developed in collaboration with Google, Microsoft, and others. It runs the containerized applications and controls the automated deployment, storage, scaling, scheduling, load balancing, updates, and monitors containers across clusters of hosts. Kubernetes supports all major public cloud service providers, including Azure, AWS, Google Cloud Platform, and Oracle Cloud.&lt;/p&gt; &lt;ol start=&quot;3&quot;&gt; &lt;li&gt;&lt;em&gt;CI/CD Pipeline&lt;/em&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A CI/CD Pipeline is the third essential tool for a cloud-native environment to work seamlessly. Continuous integration and continuous delivery embody a set of operating principles and a collection of practices that allow dev teams to deliver code changes more frequently and reliably. This implementation is known as the CI/CD Pipeline. By automating deployment processes, the CI/CD pipeline will allow your dev team to focus on:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;meeting business requirements; &lt;/li&gt; &lt;li&gt;code quality; and &lt;/li&gt; &lt;li&gt;security.  CI/CD tools preserve the environment-specific parameters that must be included with each delivery. CI/CD automation then performs any necessary service calls to web servers, databases, and other services that may require a restart or follow other procedures when applications are deployed.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;cloud-native-isn-t-plug-play-is-there-a-comprehensive-tool-that-my-dev-team-can-use&quot;&gt;Cloud-Native Isn't Plug &amp;amp; Play – Is there a Comprehensive Tool that my Dev Team Can Use?&lt;/h2&gt; &lt;p&gt;As you can probably guess, countless tools make up the cloud-native architecture.  Unfortunately, these tools are complex, require separate authentication, and frequently do not interact with each other. In essence, you are expected to integrate these cloud tools yourself as a user. We at FP Complete became frustrated with this approach. So, to save time and provide a turn-key solution, we created Kube360.  Kube360 puts all necessary tools into one easy-to-use toolbox, accessed via a single sign-on, and operating as a fully integrated environment. Kube360 combines best practices, technologies, and processes into one complete package, and Kube360 has been proven an effective tool at multiple customer site deployments. In addition, Kube360 supports multiple cloud providers and on-premise infrastructure. Kube360 is vendor agnostic, fully customizable, and has no vendor lock-in.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Kube360 - Centralized Management&lt;/strong&gt;. Kube360 employs centralized management, which increases your dev team's productivity. Increased Dev Team productivity will happen through:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;single-sign-on functionality &lt;/li&gt; &lt;li&gt;speed-up of installation and setup&lt;/li&gt; &lt;li&gt;Quick access to all tools&lt;/li&gt; &lt;li&gt;Automation of logs, backups, and alerts&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This simplified administration hides frequent login complexities and allows single-sign-on through existing company identity management. Kube360 also streamlines tool authentication and access, eliminating many standard security holes. In the background, Kube360 automatically runs everyday tasks such as backups, log aggregation, and alerts.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Kube360 - Automated Features&lt;/strong&gt;. Kube360's automated features include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;automatic backups of the etcd config;&lt;/li&gt; &lt;li&gt;log aggregation and indexing of all services; and&lt;/li&gt; &lt;li&gt;integrated monitoring and alert framework.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Kube360 - Kubernetes Tooling Features&lt;/strong&gt;. Kube360 simplifies Kubernetes management and allows you to take advantage of many cloud-native features such as: autoscaling; to stay cost efficient with growing and shrinking demands on systems&lt;/p&gt; &lt;ul&gt; &lt;li&gt;high availability;&lt;/li&gt; &lt;li&gt;health checks; and&lt;/li&gt; &lt;li&gt;integrated secrets management.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Kube360 - Service Mesh&lt;/strong&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Mutual TLS based encryption within the cluster&lt;/li&gt; &lt;li&gt;Tracing tools&lt;/li&gt; &lt;li&gt;Rerouting traffic&lt;/li&gt; &lt;li&gt;Canary deployments&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Kube360 - Integration&lt;/strong&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Integrates into existing AWS &amp;amp; Azure infrastructures&lt;/li&gt; &lt;li&gt;Deploys into existing VPCs&lt;/li&gt; &lt;li&gt;Leverages existing subnets&lt;/li&gt; &lt;li&gt;Communicates with components outside of Kube360&lt;/li&gt; &lt;li&gt;Supports multiple clusters per organization&lt;/li&gt; &lt;li&gt;Installed by FP Complete team or customer&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As you can see – Kube360 is one of the most comprehensive tools you can rely on for Cloud Native architecture. Kube360 is your one-stop, fully integrated enterprise Kubernetes ecosystem. Kube360 standardizes containerization, software deployment, fault tolerance, auto-scaling, auto-healing, and security - by design. Kube360's modular, standardized architecture mitigates proprietary lock-in, high support costs, and obsolescence. In addition, Kube360 delivers a seamless deployment experience for you and your team. Find out how Kube360 can make your business more efficient, more reliable, and more secure, all in a fraction of the time. Speed up your dev team's productivity - &lt;a href=&quot;https://www.fpcomplete.com/contact-us/&quot;&gt;Contact us today!&lt;/a&gt;&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-17T00:00:00Z",
"URL":" https://www.fpcomplete.com/blog/cloud-native/ "
}
,
{
"title":"FP Complete: Blockchain Technology, Smart Contracts, and Your Company",
"textBody":"&lt;p&gt;With the cost of goods only going up and the increased scarcity of quality workers and resources, saving money and time in your day-to-day business operations is paramount. Therefore, adopting blockchain technology into your traditional day-to-day business operations is key to giving you back valuable time, saving you money, creating less dependency on workers, and modernizing your business operations for good. There are many ways blockchain technology can help you and your business save money and resources, but one profound way is through the use of smart contracts.&lt;/p&gt; &lt;p&gt;Smart contracts are software contracts that execute predefined logic based on the parameters coded into the system.  Smart contracts are digital agreements that automatically run transactions between parties, increasing speed, accuracy, and integrity in payment and performance. In addition, smart contracts are legally enforceable if they comply with contract law. &lt;/p&gt; &lt;p&gt;The smart contract aims to provide transactional security while reducing surplus transaction costs. In addition, smart contracts can automate the execution of an agreement so that all parties are immediately sure of the outcome without the need for intermediary involvement. For example, instead of hiring a department to handle contract review and purchasing, your business can run smart contracts that enforce the same procedures more effectively at substantial cost savings.  In addition, your business can use smart contracts to manage your corporate documents, regulatory compliance procedures, cross-border financial transactions, real property ownership, supply management, and the chronology of ownership of your business IP, materials, and licenses. &lt;/p&gt; &lt;p&gt;Finance and banking are prime examples of industries that have benefited from smart contract applications.  Smart contracts track corporate spending, stock trading, investing, lending, and borrowing. Smart contracts are also used in corporate mergers and acquisitions and are frequently used to configure or reconfigure entire corporate structures. &lt;/p&gt; &lt;p&gt;Below is an illustration of how smart contracts work:&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;CPU usage&quot; src=&quot;https://www.fpcomplete.com/images/blog/how-smart-contracts-work.png&quot; /&gt;&lt;/p&gt; &lt;p&gt;As you can imagine, blockchain technology and smart contracts are still developing. They do have some roadblocks and implementational challenges. Still, these pitfalls and hassles cannot take away from the many benefits blockchain technology offers to businesses needing to save money and resources.&lt;/p&gt; &lt;p&gt;FP Complete Corporation has direct experience working with blockchain technologies &lt;a href=&quot;https://www.fpcomplete.com/blockchain/&quot;&gt;(learn more here)&lt;/a&gt;, most recently the &lt;a href=&quot;https://www.fpcomplete.com/blog/levana-nft-launch/&quot;&gt;Levana NFT launch&lt;/a&gt;, which relied on blockchain technology written by one of our engineers. Previously, one of our senior engineers released a video titled “&lt;a href=&quot;https://www.youtube.com/watch?v=jngHo0Gzk6s&quot;&gt;How to be Successful at Blockchain Development&lt;/a&gt;,” highlighting our expertise in this area in detail.   If you want to learn more about how we can help you with blockchain technology, please &lt;a href=&quot;https://www.fpcomplete.com/contact-us/&quot;&gt;contact us today&lt;/a&gt;.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-16T00:00:00Z",
"URL":" https://www.fpcomplete.com/blog/blockchain-technology-smart-contracts-save-money/ "
}
,
{
"title":"Ken T Takusagawa: [vgkevtpx] sampling large binomial with random-fu",
"textBody":"&lt;p&gt;here are some results of single samples from the binomial distribution using Data.Random.Distribution.Binomial in the &lt;a href=&quot;https://hackage.haskell.org/package/random-fu&quot;&gt;random-fu Haskell package&lt;/a&gt;, version 0.2.7.0 .&lt;/p&gt;  &lt;p&gt;N=320000000000000000000000000000000 p=0.5 sample=160000000000000017763568049748834&lt;/p&gt;&lt;p&gt;   N=330000000000000000000000000000000 p=0.5 sample=165000000000000000000000000000000&lt;/p&gt;&lt;p&gt;   N=320000000000000000000000000000000 p=6.25e-2 sample=20000000000000004440892003541839&lt;/p&gt;&lt;p&gt;   N=330000000000000000000000000000000 p=6.25e-2 sample=20625000000000000000000000000000&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://web.mit.edu/kenta/www/three/binomial-sample/vgkevtpx/&quot;&gt;Haskell source code.&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;in the first line, our one sample from the binomial distribution is equivalent to simulating flipping a fair coin 3.2*10^32 times and counting the number of heads.  (however, all these results are calculated instantly.)  things seem to work correctly: about half heads, with statistical noise of order sqrt(N) as would be expected from a random sample.&lt;/p&gt;  &lt;p&gt;in the second line, we flip 3.3*10^32 times.  things have gone wrong: the number of heads is precisely half with no statistical noise.&lt;/p&gt;  &lt;p&gt;the following two examples use an unfair coin whose probability of success is 1/16.  (we use probabilities expressible exactly in binary to eliminate decimal-to-binary conversion as a possible source of noise).  things go wrong similarly: the threshold does not depend on the probability.&lt;/p&gt;  &lt;p&gt;the threshold seems to be around N=2^108, probably related to 53 bits of mantissa in double precision (108 / 2 = 54).  (incidentally, 2^108 ~= 3.2*10^32.  the digits of the decimal mantissa coincide with the exponent.  &lt;a href=&quot;http://kenta.blogspot.com/2019/11/qevvjvoh-binary-exponent-and-decimal.html&quot;&gt;previously similar.&lt;/a&gt;)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://hackage.haskell.org/package/random-fu-0.2.7.7/docs/src/Data.Random.Distribution.Binomial.html&quot;&gt;this issue is mentioned in comments in the source code of integralBinomial random-fu&lt;/a&gt;, but not in the Haddock documentation.  (that Hackage makes it easy to browse source code makes it much better than similar library documentation for other programming languages.  one wonders if the Log4j/Log4shell vulnerability would have been discovered sooner if Java documentation had made it easier to view implementation source code.)&lt;/p&gt;  &lt;p&gt;on one hand, of course it's unfortunate that things go wrong for large N.  on the other hand, the failure mode is not too bad.  (there might not be much incentive to fix the bug.)  if you're going to sample the binomial, getting the mode (the most likely result) as an answer might be fine for many applications.&lt;/p&gt;&lt;p&gt;inspired by wanting to draw &lt;a href=&quot;http://kenta.blogspot.com/2021/10/wouxhrxb-selecting-points-for.html&quot;&gt;lots and lots of stars&lt;/a&gt;.  if one always gets the mode, there will not be pixels containing a statistically unusual large number of stars.&lt;/p&gt;  &lt;p&gt;sampling the binomial distribution efficiently for large N is a non-trivial but seemingly well studied topic.  the comment in random-fu's source code cites Knuth's TAOCP.  &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Binomial_distribution&amp;amp;oldid=1007110990#cite_note-28&quot;&gt;wikipedia cites:&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Devroye, Luc (1986) Non-Uniform Random Variate Generation, New York: Springer-Verlag.&lt;/p&gt;  &lt;p&gt;and links to &lt;a href=&quot;http://luc.devroye.org/chapter_ten.pdf&quot;&gt;an online chapter of the book&lt;/a&gt;.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-15T17:25:00Z",
"URL":" http://kenta.blogspot.com/2022/01/vgkevtpx-sampling-large-binomial-with.html "
}
,
{
"title":"Matthew Sackman: Let's build! A distributed, concurrent editor: Part 6 - Testing",
"textBody":"&lt;p&gt;In this series:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_intro/&quot;&gt;Let‘s build! A distributed, concurrent editor: Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_protocol/&quot;&gt;Let’s build! A distributed, concurrent editor: Part 2 - Protocols&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_client/&quot;&gt;Let‘s build! A distributed, concurrent editor: Part 3 - Client&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_disk/&quot;&gt;Let’s build! A distributed, concurrent editor: Part 4 - Writing to disk&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_actors/&quot;&gt;Let‘s build! A distributed, concurrent editor: Part 5 - Actors&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_testing/&quot;&gt;Let’s build! A distributed, concurrent editor: Part 6 - Testing&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;hr /&gt;  &lt;p&gt;So far, I’ve defined some semantics for this distributed, concurrent editor. I’ve defined a &lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_protocol/&quot;&gt;protocol&lt;/a&gt;, built a really basic browser-based &lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_client/&quot;&gt;client&lt;/a&gt; in TypeScript, and a &lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_disk/&quot;&gt;server&lt;/a&gt; in Go. But I’ve not written a single test. This must be rectified: some of the algorithms are not trivial or obviously correct, particularly those that deal with calculating the document state when reading from disk.&lt;/p&gt;  &lt;p&gt;I’ve built the server using &lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_actors/&quot;&gt;actors&lt;/a&gt;, and each document is managed by its own actor. The actor provides a nice API to test against. All it &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/document.go&amp;amp;ln=95&quot;&gt;depends on&lt;/a&gt; is the disk-store, for which I’m using &lt;a href=&quot;https://pkg.go.dev/github.com/etcd-io/bbolt&quot;&gt;bbolt&lt;/a&gt;. Because this is an embedded key-value store, using it in tests is very easy: just create a fresh new database file, use it, and make sure you delete it at the end. No need for horrendous choreography to spin up fresh PostgreSQL or MySQL databases, no maddening complexity of trying to rendezvous on some fresh network port, and no need for mocks. Testing nirvana.&lt;/p&gt;  &lt;p&gt;I’ve written a little &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=20-126&quot;&gt;&lt;code&gt;documentTester&lt;/code&gt; struct&lt;/a&gt;. This has a few fields and methods to help support the tests: the ability to create a fresh database, spawn an actor manager, spawn a document, and shut everything down. With that in place, I can start writing some tests that verify an empty document is indeed empty.&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestListenEmptyDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newDocumentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plainManagerSpawnFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawnDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newListeningClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextDocumentRendering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it's a new document so it must be empty &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;closeDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextDocumentRendering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// listener should have observed death of document &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This checks that I can create a new document, I can subscribe to it (listing to changes to the document), and as soon as I subscribe I should be given the current state of the document, which should be the empty string. It also checks that once the document actor has been terminated, the subscription should be cancelled. This is all machinery that the WebSocket code relies on: as soon as a browser-client connects, I ensure the correct document actor is running, and &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=http/connection.go&amp;amp;ln=21-23&quot;&gt;subscribe to changes&lt;/a&gt; to the document. That subscription should immediately be sent the current state of the document so it can be sent down to the browser.&lt;/p&gt;  &lt;p&gt;I’ve chosen to use Mat Ryer’s &lt;a href=&quot;https://github.com/matryer/is&quot;&gt;is&lt;/a&gt; test assertions library, rather than the more normal (I think) &lt;a href=&quot;https://github.com/stretchr/testify&quot;&gt;testify&lt;/a&gt;. So that’s why some of the assertions look a little different if you’re used to &lt;code&gt;testify&lt;/code&gt;. Mainly, I wanted to try something different. I don’t think there’s anything too wrong with &lt;code&gt;testify&lt;/code&gt;, but its API is &lt;a href=&quot;https://pkg.go.dev/github.com/stretchr/testify@v1.7.0/require&quot;&gt;bonkersly huge&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;As this test shows, the &lt;code&gt;documentTester&lt;/code&gt; has a &lt;code&gt;newListeningClient&lt;/code&gt; method that allows me to subscribe to the document actor and listen for updates. That listener has its own, independent, &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=148-158&quot;&gt;representation of the document&lt;/a&gt; which is based purely on the updates it has received from the document actor. I can test that this document, constructed from updates received from the actor, matches the document that the test thinks should have been constructed.&lt;/p&gt;  &lt;p&gt;The &lt;code&gt;documentTester&lt;/code&gt; also has a &lt;code&gt;newMutatingClient&lt;/code&gt; method which allows me to create a document and mutate it in the test code, and then send those mutations up to the document actor. This mutating client models a document as a &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=222&quot;&gt;list of words&lt;/a&gt;, just like the browser-client and like the server.  Its API allows for the document to be modified: existing words can be &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=262-267&quot;&gt;edited&lt;/a&gt; or &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=269-293&quot;&gt;deleted&lt;/a&gt;, new words can be &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=295-335&quot;&gt;added&lt;/a&gt;, and all such changes can be &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=337-365&quot;&gt;sent&lt;/a&gt; to the document actor. I can use these methods to make basic changes to the document and check the listener receives updates that result in the expected document; the document can be rendered to a simple string by joining together all of its words. These strings can be tested for equality.&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestSingleMutationToRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newDocumentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plainManagerSpawnFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawnDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newMutatingClientWithEmptyRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;editExistingWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newListeningClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextDocumentRendering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we created the listener AFTER sending the mutation. So we should definitely observe the mutation &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;closeDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextDocumentRendering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// listener should have observed death of document &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;What is this &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=225-229&quot;&gt;&lt;code&gt;unsentGeneration&lt;/code&gt;&lt;/a&gt; thing and this &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=217-223&quot;&gt;&lt;code&gt;generation&lt;/code&gt; type&lt;/a&gt;? Back in &lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_protocol/&quot;&gt;episode 2&lt;/a&gt; where I work on the client-server protocol, and again in &lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_disk/&quot;&gt;episode 4&lt;/a&gt; where I decide what I want to write to disk, I discuss different ways of modelling how the document evolves over time. In this test-code, I take the view it’s best to try to keep the code simple and obvious at the expense of efficiency. A &lt;em&gt;generation&lt;/em&gt; is a snapshot of the entire document, and I maintain a &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=174&quot;&gt;list of generations&lt;/a&gt; which show how the document evolved. I can use this to look back at the previous generation and see what I expect the document to be if I &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=374-381&quot;&gt;send an &lt;em&gt;undo&lt;/em&gt; message&lt;/a&gt; to the document actor. Equivalently for &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=388-395&quot;&gt;redo&lt;/a&gt;. The &lt;em&gt;unsent&lt;/em&gt; generation is a copy of the current generation but potentially with modifications that are yet to be sent to the document actor. Once they get sent, the &lt;em&gt;unsent&lt;/em&gt; generation gets &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=361-364&quot;&gt;moved appropriately into the list of generations&lt;/a&gt; and a new unsent generation gets created based on what’s just been sent.&lt;/p&gt;  &lt;p&gt;I can now write tests that check that when I send &lt;em&gt;undo&lt;/em&gt; and &lt;em&gt;redo&lt;/em&gt; messages, the document formed from the updates the listener receives matches the document the mutating client thinks it’s created:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestUndoAndOverwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newDocumentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plainManagerSpawnFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawnDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newMutatingClientWithEmptyRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;c1&quot;&gt;// mutate the root word twice &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;editExistingWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;editExistingWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;c1&quot;&gt;// undo twice, and redo the first change. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendUndo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendUndo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendRedo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;c1&quot;&gt;// mutate again, then undo it &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;editExistingWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendUndo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newListeningClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextDocumentRendering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;documentTester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;randomised-sequences-of-events&quot;&gt;Randomised sequences of events&lt;/h2&gt;  &lt;p&gt;One of the “fun” challenges of programs that deal with event streams, is that bugs often result from a particular order of events. Some sequence of events, which had been overlooked when designing the system, causes the system to misbehave. If I only write bog standard unit tests, I can end up merely verifying the effect of a single event at a time, or really short sequences of events, as demonstrated above. Whilst each individual event could be correctly handled (at least as far as the limited unit test is concerned), a longer sequence of events could be incorrectly handled. Ideally, for any set of events, you want to test every &lt;em&gt;permutation&lt;/em&gt;. But that can become tricky, because the number of permutations of a set of items is the factorial of the number of items. 10 events leads to 3.6 million permutations, which could take a while to test.&lt;/p&gt;  &lt;p&gt;What I tend to do in these situations is to generate a stream of random events. Yes, given enough time, it will generate every possible permutation of events; though extremely inefficiently. But I think what’s more important is that it doesn’t spend hours exploring a large number of permutations which all start with a certain sequence of events, that guarantee no error will occur. It’s quite inviting to construct the permutations depth-first, but that means you then have to go through a lot of the permutations before the first items change. You could generate them all, and then shuffle them randomly before “running” any of them, but you can spend a lot of time (and memory) generating all those permutations. If you want to, you can structure the test code in such a way as to make it easy to switch between a randomly-generated stream of events, and a permutation.&lt;/p&gt;  &lt;p&gt;It’s important that the tests are still repeatable and deterministic, even when randomly generating events. For this, I create a new random number generator, and seed it with either a &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/main_test.go&amp;amp;ln=15&quot;&gt;value given on the command line, or with the current Unix time&lt;/a&gt;, and I make sure I &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=42&quot;&gt;print it to the log&lt;/a&gt;. Then, if an error does occur, I can re-run the test with the exact same seed, and the random number generator will generate the same sequence of numbers, which will lead to the same sequence of events, and the bug should continue to manifest itself until it’s fixed. I’ve already been using this random number generator in the tests covered so far. For example the &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?ci=f83c1422bc51ce61&amp;amp;name=document/utils_test.go&amp;amp;ln=262-267&quot;&gt;&lt;code&gt;editExistingWord&lt;/code&gt;&lt;/a&gt; method uses the random number generator to pick which word in the document to edit, and what to change it to. The behaviour of the system should be the same no matter which word is edited or what that word is changed to. I believe tests that are precise about what properties they are testing for, and what properties they are agnostic about, lead to a more robust system: I would consider these tests less useful if they’d hard-coded which word is being edited or what the word is being changed to.&lt;/p&gt;  &lt;p&gt;For this style of longer-running randomised tests (I tend to call these &lt;em&gt;soak tests&lt;/em&gt;), I think it’s preferable to validate the state of the system after every event, or as close to that as possible. That way, if an error does crop up, I should be able to find it quickly and not have to wade back through hundreds of events wondering which one caused the problem.&lt;/p&gt;  &lt;p&gt;Given the machinery already build, my &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?name=document/soak_test.go&amp;amp;ci=f83c1422bc51ce61&quot;&gt;soak test&lt;/a&gt; isn’t too long. The guts of it is this:&lt;/p&gt; &lt;pre class=&quot;chroma&quot; tabindex=&quot;0&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;soaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performRandomAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zerolog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;restarting document&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;closeDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawnDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newListeningClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validateExpected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;canUndo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;undo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendUndo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validateExpected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;canRedo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendRedo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validateExpected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mutating words&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;         &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;         &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;         &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;         &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderedWords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deleteWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;         &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;editExistingWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsentGeneration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validateExpected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I do have to hard-code the probability of each event type. I could either try to make weird and bizarre sequences of events more likely (which might expose more corner cases), or I could try to make the sequence of events be kinda similar to what a user might do. Here I think I’ve gone for the latter: about 50% of the time the document’s going to get edited – a few changes to a few words. Abort 20% of the time the event will be an undo, and 20% of the time it’ll be a redo. And the remaining 10% of the time will terminate the document actor, spawn a new one (which will read the list of events back in from disk), and create a new listener. After each event, I validate that the document as the mutator believes it is, matches with the document as the listener believes it is.&lt;/p&gt;  &lt;p&gt;Because every actor has a single mailbox (a single linear queue of messages), it doesn’t matter if these events are coming from one client or several: it’ll make no difference to the document actor as all the events get added to the same mailbox. The mutating client does though make sure that when it sends an update, the updated words all carry a version number that’s high enough to guarantee it’ll take effect. I probably should extend this test with the ability to send updates with lower version numbers, to simulate several users editing the same document at the same time and occasionally colliding when editing the same word.&lt;/p&gt;  &lt;p&gt;Running all of these tests with &lt;a href=&quot;https://go.dev/blog/cover&quot;&gt;code coverage turned on&lt;/a&gt; shows I’m hitting around 90% of &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?name=document/document.go&amp;amp;ci=f83c1422bc51ce61&quot;&gt;document.go&lt;/a&gt;, &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?name=document/db.go&amp;amp;ci=f83c1422bc51ce61&quot;&gt;db.go&lt;/a&gt;, &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?name=document/frame.go&amp;amp;ci=f83c1422bc51ce61&quot;&gt;frame.go&lt;/a&gt;, and &lt;a href=&quot;https://fossil.wellquite.org/repo/edist/file?name=document/wordmanager.go&amp;amp;ci=f83c1422bc51ce61&quot;&gt;wordmanager.go&lt;/a&gt;, which seems quite good. I’m not testing any part of the document registry though, so at some point I should add some tests for that. Code coverage metrics are a minimal measurement: it shows me which bits of my code I should definitely work on adding tests for; but even 100% code coverage is far from sufficient, which is kinda the point of this whole thing: bugs can manifest from the order of events; you could get to 100% code coverage just by writing unit tests and never uncover such bugs.&lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;I do want to adapt this soak test so that it can be used with &lt;a href=&quot;https://go.dev/doc/fuzz/&quot;&gt;fuzz testing&lt;/a&gt;: my plan is either for the fuzzer to provide the seed for the random number generator, or for the fuzzer to provide a slice of bytes, and the test grabs numbers from that slice of bytes in place of grabbing numbers from the random number generator. However, Go’s support for fuzz testing is arriving in version 1.18, which is expected at some point in February 2022 - a month away. The fuzzer is meant to be coverage-guided: i.e. it’s meant to try to vary the test input to provoke more code to be run. Whether that’s just “does this line of code get run?” or “is this particular path through the control-flow-graph run?” I don’t yet know. The latter would be much more powerful, because that would enable it to explore different sequences of events. But until Go 1.18 is released, I think I’ll have to put this series on hold.&lt;/p&gt;  &lt;p&gt;Last week, when I wrote about my &lt;a href=&quot;https://wellquite.org/posts/golmdb/&quot;&gt;binding to LMDB&lt;/a&gt;, I mentioned there’s a &lt;a href=&quot;https://fossil.wellquite.org/repo/golmdb/file?name=soak_test.go&amp;amp;ci=4daa79868d51159b&quot;&gt;soak test&lt;/a&gt; in there too. It doesn’t benefit from quite the same level of machinery and framework as I’ve built here, but the principle is the same.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-13T11:01:09Z",
"URL":" https://wellquite.org/posts/lets_build/edist_testing/ "
}
,
{
"title":"Don Stewart (dons): Glean on aarch64 on Apple Silicon : part 3",
"textBody":"&lt;p&gt;&lt;strong&gt;Creating a Glean index for React&lt;/strong&gt;&lt;/p&gt;    &lt;p&gt;See &lt;a href=&quot;https://donsbot.com/2022/01/07/glean-on-aarch64-on-apple-silicon-part-1/&quot;&gt;part 1 (creating a working aarch64 env on Mac)&lt;/a&gt; and &lt;a href=&quot;https://donsbot.com/2022/01/09/glean-on-aarch64-on-apple-silicon-part-2/&quot;&gt;part 2 (building Glean for ARM)&lt;/a&gt;.&lt;/p&gt;    &lt;p&gt;In &lt;a href=&quot;https://donsbot.com/2022/01/09/glean-on-aarch64-on-apple-silicon-part-2/&quot;&gt;the last post&lt;/a&gt; we got a working Glean installation built on aarch64 with native emulation on the ARM-based M1 MacBook Air. To be useful, we need to “index” some code and store the code facts in Glean. See (&lt;a href=&quot;https://glean.software/docs/introduction/&quot;&gt;What is Glean?&lt;/a&gt;).&lt;/p&gt;    &lt;p&gt;Indexing is the process of analysing source code and logging the things we find. Indexers look a lot like parsers or compiler front-ends: they take source code and build up semantic information, then record it to files for ingestion into Glean, or write directly to the database. &lt;/p&gt;    &lt;p&gt;Almost all linters, static analysis tools, compilers, transpilers, formatters parse the code, analyse and write out transformed results, usually throwing away what they learned in the process. What Glean lets us do is efficiently persist the semantic information the compiler discovered, in a way that can be very efficiently queried. We turn compilers into data sources for a distributed cache.&lt;/p&gt;    &lt;p&gt;This splits up the usual compiler frontend &amp;lt;-&amp;gt; backend coupling, with Glean as a cache between the two phases.This lets us scale: we can index a repo frequently, and share the results with thousands of engineers, or support millions of concurrent queries to a Glean database, with very low latency. It’s like the compiler AST and type environment are now in memcache, and our IDEs and code analysis tools can hit the cache instead of painfully reconstructing the frontend themselves.&lt;/p&gt;    &lt;h2 id=&quot;what-makes-a-good-index&quot;&gt;What makes a good index?&lt;/h2&gt;    &lt;p&gt;What we index is described by a Glean schema written in &lt;a href=&quot;https://glean.software/docs/schema/syntax/&quot;&gt;Angle&lt;/a&gt;. The schema describes the types, predicates (tables) and references between facts, as well as how they are represented. It’s broadly “pay as you go” — you don’t need to capture everything about the language, but just what you need for specific tasks. There are &lt;a href=&quot;https://github.com/facebookincubator/Glean/tree/main/glean/schema/source&quot;&gt;schemas for most common languages&lt;/a&gt;, as well as many mini-languages (like GraphQL, Thrift, Buck). (But n.b. there aren’t _indexers_ for most languages, just schemas. The indexers a quite a bit more work as they usually hook into custom compiler toolchains).&lt;/p&gt;    &lt;p&gt;Common examples of things we would capture are:&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;file names&lt;/li&gt;&lt;li&gt;declarations, definition locations&lt;/li&gt;&lt;li&gt;uses of definitions (“xrefs”)&lt;/li&gt;&lt;li&gt;language elements: module names, type names, functions, methods, classes, ..&lt;/li&gt;&lt;/ul&gt;    &lt;p&gt;That’s usually enough to get a working navigation service up (e.g. jump-to-definition or find-references). For more sophisticated static analysis you will need to capture more of the compiler environment. It’s a good idea to float out strings and values that are repeated a lot into their own predicates, so as to maximise sharing. And to have a sense of the queries you need to write when constructing the index schema.&lt;/p&gt;    &lt;p&gt;Once you have a schema, you can store data in that format. Indexers are standalone programs, often with no dependency on Glean itself, that parse code (and add other type information, resolve names, resolve packages), before writing out lines and lines of JSON in the schema format you specified (or writing directly to the Glean db over binary thrift).&lt;/p&gt;    &lt;h2 id=&quot;ok-let-s-index-some-javascript&quot;&gt;Ok, let’s index some JavaScript&lt;/h2&gt;    &lt;p&gt;Let’s see if we can index the React codebase. React is written in JavaScript, and uses the Flow type system. &lt;a href=&quot;https://glean.software/docs/indexer/flow/#run-the-indexer&quot;&gt;Flow knows about Glean&lt;/a&gt;, and can be run directly as an indexer. My aim here is to use the aarch64 VM as the glean server, but the indexer can run anywhere we want — on any box. We just have to write the data into Glean on the VM. Let’s have a go at installing Flow on aarch64/Debian though, for fun, as arm64/Linux is supported by Flow.&lt;/p&gt;    &lt;p&gt;We can build from source (needs opam/OCaml) or install a pre-built binary from &lt;a href=&quot;https://github.com/facebook/flow/releases&quot; rel=&quot;nofollow&quot;&gt;https://github.com/facebook/flow/releases&lt;/a&gt; . I installed the binary into my aarch64 VM and we are in business:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;$ flow/flow --version&lt;br /&gt;Flow, a static type checker for JavaScript, version 0.169.0&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;We’ll need the React source , so get that. This will be our source code to index:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;git clone https://github.com/facebook/react.git&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Initialize flow and process the source using &lt;code&gt;flow glean:&lt;/code&gt;&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;$ flow glean packages --output-dir=/tmp/flow-out/ --write-root=&quot;react&quot; &amp;gt;&amp;gt;&amp;gt; Launching report... Wrote facts about 787 JavaScript files.&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;And we are in business! What did we index? Have a look in /tmp/flow-out at the raw JSON. The index is in textual JSON format, and are just arrays of predicates + fact pairs. Each predicate has a set of facts associated (and facts are unique in Glean, any duplicates will be de-duped when ingested).&lt;/p&gt;    &lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;a href=&quot;https://donsbot.files.wordpress.com/2022/01/image.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-1037&quot; src=&quot;https://donsbot.files.wordpress.com/2022/01/image.png?w=1024&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;Flow indexer output&lt;/figcaption&gt;&lt;/figure&gt;    &lt;p&gt;The whole React index is about 58M of JSON, while the raw source code was 17M. We have a few predicates defined with facts:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;$ sed 's/&quot;predicate&quot;:&quot;\([^&quot;]*\)&quot;,/\n\1\n/g' * | grep '^flow.' | sort | uniq flow.DeclarationInfo.3 flow.FileOfStringModule.3 flow.ImportDeclaration.3 flow.LocalDeclarationReference.3 flow.MemberDeclarationInfo.3 flow.MemberDeclarationReference.3 flow.SourceOfExport.3 flow.SourceOfTypeExport.3 flow.TypeDeclarationInfo.3 flow.TypeDeclarationReference.3 flow.TypeImportDeclaration.3&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;The definitions of these predicates are in &lt;a href=&quot;https://raw.githubusercontent.com/facebookincubator/Glean/main/glean/schema/source/flow.angle&quot;&gt;flow.angle&lt;/a&gt;, which define all the possible predicates we might have facts for in Flow/JavaScript. Looking at the first entry in the first file:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;[{&quot;predicate&quot;:&quot;flow.LocalDeclarationReference.3&quot;  ,&quot;facts&quot;:[{&quot;key&quot;:{&quot;declaration&quot;:{&quot;key&quot;:{&quot;name&quot;:{&quot;key&quot;:&quot;ownerDocument&quot;},&quot;loc&quot;:{&quot;key&quot;:{&quot;module&quot;:{&quot;key&quot;:{&quot;file&quot;:{&quot;key&quot;:&quot;react/packages/react-devtools-shared/src/devtools/views/SearchInput.js&quot;}}},&quot;span&quot;:{&quot;start&quot;:1849,&quot;length&quot;:13}}}}},&quot;loc&quot;:{&quot;key&quot;:{&quot;module&quot;:{&quot;key&quot;:{&quot;file&quot;:{&quot;key&quot;:&quot;react/packages/react-devtools-shared/src/devtools/views/SearchInput.js&quot;}}},&quot;span&quot;:{&quot;start&quot;:1901,&quot;length&quot;:13}}}}} ,{&quot;key&quot;:{&quot;declaration&quot;:{&quot;key&quot;:{&quot;name&quot;:{&quot;key&quot;:&quot;ownerDocument&quot;},&quot;loc&quot;:{&quot;key&quot;:{&quot;module&quot;:{&quot;key&quot;:{&quot;file&quot;:{&quot;key&quot;:&quot;react/packages/react-devtools-shared/src/devtools/views/SearchInput.js&quot;}}},&quot;span&quot;:{&quot;start&quot;:1849,&quot;length&quot;:13}}}}},&quot;loc&quot;:{&quot;key&quot;:{&quot;module&quot;:{&quot;key&quot;:{&quot;file&quot;:{&quot;key&quot;:&quot;react/packages/react-devtools-sha..&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;We can parse this fact as:&lt;/p&gt;    &lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;There is a  “LocalDeclarationReference” of “ownerDocument’ in react/packages/react-devtools-shared/src/devtools/views/SearchInput.js at bytespan 1849, length 13. which has a reference at offset 1901.&lt;/p&gt;&lt;/blockquote&gt;    &lt;p&gt;Seems plausible. The structure of schema tells us the shape of the JSON we need to generate. E.g. LocalDeclarationReferences are bytespans associated with the use of a Declaration. Represented in Angle as::&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;predicate Range: {   module : Module,   span: src.ByteSpan, } predicate Name: string predicate Declaration: {   name: Name,   loc: Range, } # connects a variable to its declaration within the same file predicate LocalDeclarationReference: {   declaration: Declaration,   loc: Range, }&lt;/code&gt;&lt;/pre&gt;    &lt;h2 id=&quot;write-the-data-to-glean&quot;&gt;Write the data to Glean&lt;/h2&gt;    &lt;p&gt;Now let’s ingest that into Glean to query. I’ll make a directory in &lt;code&gt;$HOME/gleandbs&lt;/code&gt; to store the Glean db images. We can install the standard schema, or just point Glean at the source. Now load all that JSON in. You can do this in parallel on multiple cores to speed things up — &lt;code&gt;+RTS -N8 -A32m -RTS&lt;/code&gt; if it is a very, very big DB, but this is fine to run single threaded.&lt;/p&gt;    &lt;p&gt;Our first db will be called “react” with tag “main”, but in a production setting you would probably use the commit hash as the tag to identify the data set. Glean data is immutable once the DB is finished, so its fine to use the commit hash if it is also immutable.&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;$ mkdir ~/gleandbs $ glean --db-root $HOME/gleandbs --schema $HOME/Glean/glean/schema/source/ create --repo react/main /tmp/flow-out/*.json&lt;/code&gt;  And the Glean RTS does some work:&lt;/pre&gt;    &lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;a href=&quot;https://donsbot.files.wordpress.com/2022/01/image-1.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-1041&quot; src=&quot;https://donsbot.files.wordpress.com/2022/01/image-1.png?w=1024&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;    &lt;p&gt;We can look at the DB in the glean shell:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;$ glean shell --db-root $HOME/gleandbs --schema $HOME/Glean/glean/schema/source/ Glean Shell, built on 2022-01-08 07:22:56.472585205 UTC, from rev 9adc5e80b7f6f7fb9b556fbf3d7a8774fa77d254 type :help for help. &amp;gt; :list react/main (incomplete)   Created: 2022-01-12 02:01:04 UTC (3 minutes ago) &amp;gt; :pager on &amp;gt; :db react/main &amp;gt; :stat&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Use :stat to see a summary of the data we have stored. It’s already a basic form of code analysis:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;flow.Declaration.3   count: 33527   size:  1111222 (1.06 MB) 7.1861% flow.DeclarationInfo.3   count: 33610   size:  1177304 (1.12 MB) 7.6135% flow.Documentation.3   count: 2215   size:  61615 (60.17 kB) 0.3985% flow.Export.3   count: 1803   size:  53050 (51.81 kB) 0.3431% flow.ImportDeclaration.3   count: 5504   size:  196000 (191.41 kB) 1.2675% flow.LocalDeclarationReference.3   count: 86297   size:  2922952 (2.79 MB) 18.9024%&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;So just basic info but the React project has 33k unique declarations, 5,500 import declarations, 86k local variable uses, 3,600 type declarations, 1,117 modules, and 904 files. You can use these summaries over time to understand code complexity growth. Things may be missing here — its up to the indexer owner to run the indexer and capture all the things that need capturing. Glean is just reporting what was actually found.&lt;/p&gt;    &lt;p&gt;The DB is in “incomplete” state, meaning we could write more data to it (e.g. if the indexer failed part way through we could restart it and resume safely, or we could shard analysis of very  large projects). But before we “finish” the DB to freeze it, we need to derive additional predicates.&lt;/p&gt;    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; there are some limitations here: the Glean index need to know about the JavaScript and Flow modules system (in particular, names of modules to strings, and module string names to filepaths), so that imports like ‘react’ resolve to the correct module filepath.&lt;/p&gt;    &lt;p&gt;&lt;code&gt;import {useDebugValue, useEffect, useState} from 'react';&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;However, if we look closely at our default Flow index, the string to file facts are all empty. This will limit our ability to see through file names imported via string names (e.g. “React.js” gets imported as ‘react’).&lt;/p&gt;    &lt;p&gt;&lt;code&gt;&quot;predicate&quot;:&quot;flow.FileOfStringModuleExport.3&quot;,&quot;facts&quot;:[]}&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;which I think means I haven’t configured Flow correctly or set up the module maps properly (halp Flow folks?).&lt;/p&gt;    &lt;h2 id=&quot;derived-predicates-in-glean&quot;&gt;Derived predicates in Glean&lt;/h2&gt;    &lt;p&gt;A bit like stored procedures, we can write Angle predicates that are defined in terms of other, existing predicates. This is how we do abstraction. It’s morally equivalent to defining SQL tables on the fly in terms of other tables, with some different guarantees as Glean is more like &lt;a href=&quot;https://en.wikipedia.org/wiki/Datalog&quot;&gt;datalog&lt;/a&gt; than a relational system. Derived predicates can be computed on the fly, or fully generated and stored. A very common use case is to compute inverse indices (e.g. find-references is the inverse of jump-to-definition). We can index all uses of definitions, then compute the inverse by deriving. &lt;/p&gt;    &lt;p&gt;An example is the “FileXRef” predicate in Flow, which builds an index of File name facts to cross-references in those files. You would do this to quickly discover all outbound references from a file.&lt;/p&gt;    &lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;a href=&quot;https://donsbot.files.wordpress.com/2022/01/image-2.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-1048&quot; src=&quot;https://donsbot.files.wordpress.com/2022/01/image-2.png?w=1024&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;    &lt;p&gt;This is a stored predicate. The indexer doesn’t write facts of this sort — they are defined in terms of other facts: LocalDeclarationReferences etc. To populate this index we need to derive it first. Let’s do that:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;$ glean --db-root $HOME/gleandbs --schema $HOME/Glean/glean/schema/source/ derive --repo react/main flow.FileXRef I0112 12:20:10.484172 241107 Open.hs:344] react/main: opening I0112 12:20:10.526576 241107 rocksdb.cpp:605] loadOwnershipSets loaded 0 sets, 0 bytes I0112 12:20:10.526618 241107 Open.hs:350] react/main: opened I0112 12:20:10.749966 241107 Open.hs:352] react/main: schema has 799 predicates flow.FileXRef : 0 facts I0112 12:20:11.119634 241107 Stats.hs:223] mut_lat: 59ms [59ms] mut_thp: - [-] ded_thp: - [-] dup_thp: - [-] rnm_thp: - [-] cmt_thp: - [-] ibk_mis: - [-] tbi_mis: - [-] fbi_mis: - [-] lch_mem: 0B lch_cnt: 0 I0112 12:20:11.547000 241108 rocksdb.cpp:605] loadOwnershipSets loaded 0 sets, 0 bytes flow.FileXRef : 112662 facts&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;We generated 112,662 facts about cross-references. Taking a peek at the DB now with :stat&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;flow.FileXRef.3   count: 112662   size:  4043028 (3.86 MB) 20.7266%&lt;/code&gt; &lt;/pre&gt;    &lt;p&gt;We’ve increased the DB size by 3.8M. We can derive the rest of the stored predicates now and finalize the DB. Note we have to derive in dependency order, as some stored predicates depend on the results of others. I just do this in two phases:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;$ glean --db-root $HOME/gleandbs --schema $HOME/Glean/glean/schema/source/ derive --repo react/main flow.NameLowerCase flow.FileDeclaration flow.FileXRef flow.FlowEntityImportUses flow.FlowTypeEntityImportUses&lt;br /&gt;I0112 12:43:12.098162 241911 Open.hs:344] react/main: opening&lt;br /&gt;I0112 12:43:12.141024 241911 rocksdb.cpp:605] loadOwnershipSets loaded 0 sets, 0 bytes&lt;br /&gt;I0112 12:43:12.141064 241911 Open.hs:350] react/main: opened&lt;br /&gt;I0112 12:43:12.322456 241911 Open.hs:352] react/main: schema has 799 predicates&lt;br /&gt;I0112 12:43:12.367130 242084 Stats.hs:223] mut_lat: 112us [112us] mut_thp: - [-] ded_thp: - [-] dup_thp: - [-] rnm_thp: - [-] cmt_thp: - [-] ibk_mis: - [-] tbi_mis: - [-] fbi_mis: - [-] lch_mem: 0B lch_cnt: 0&lt;br /&gt;flow.FileDeclaration : 46594 facts&lt;br /&gt;flow.FileXRef : 112662 facts&lt;br /&gt;flow.FlowEntityImportUses : 3022 facts&lt;br /&gt;flow.NameLowerCase : 9621 facts&lt;br /&gt;flow.FlowTypeEntityImportUses : 692 facts&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;And freeze the data.&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;$ glean --db-root $HOME/gleandbs --schema $HOME/Glean/glean/schema/source finish --repo react/main&lt;/code&gt; &lt;code&gt;I0112 12:45:54.415550 242274 Open.hs:344] react/main: opening&lt;/code&gt; I&lt;code&gt;0112 12:45:54.451892 242274 Open.hs:350] react/main: opened I0112 12:45:54.671070 242274 Open.hs:352] react/main: schema has 799 predicates I0112 12:45:54.701830 242270 Work.hs:506] workFinished Work {work_repo = Repo {repo_name = &quot;react&quot;, repo_hash = &quot;main&quot;}, work_task = &quot;&quot;, work_parcelIndex = 0, work_parcelCount = 0, work_handle = &quot;glean@9adc5e80b7f6f7fb9b556fbf3d7a8774fa77d254&quot;} I0112 12:45:54.707198 242274 Backup.hs:334] thinned schema for react/main contains src.1, flow.3 I0112 12:45:54.707224 242274 Open.hs:287] updating schema for: react/main I0112 12:45:54.824131 242274 Open.hs:299] done updating schema for open DBs I0112 12:45:54.824172 242274 Backup.hs:299] react/main: finalize: finished&lt;/code&gt; &lt;/pre&gt;    &lt;p&gt;The db is now frozen and cannot be changed.&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;&amp;gt; :list react/main (complete)   Created: 2022-01-12 02:01:04 UTC (45 minutes ago)   Completed: 2022-01-12 02:45:55 UTC (51 seconds ago)&lt;/code&gt;&lt;/pre&gt;    &lt;h2 id=&quot;poking-around-a-glean-database&quot;&gt;Poking around a Glean database&lt;/h2&gt;    &lt;p&gt;We can look at this data by querying in the Glean shell. E.g. to count all xrefs in ReactHooks.js.,&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;react&amp;gt; :limit 0 react&amp;gt; :count flow.FileXRef { file = &quot;react/packages/react/src/ReactHooks.js&quot; } 134 results, 605 facts, 2.84ms, 310224 bytes, 1032 compiled bytes&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;To see say, only local references, and just the names of the definitions they point at:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;react&amp;gt; N where flow.FileXRef { file = &quot;react/packages/react/src/ReactHooks.js&quot;, ref = { localRef = { declaration =  { name = N } } } } { &quot;id&quot;: 14052, &quot;key&quot;: &quot;deps&quot; } { &quot;id&quot;: 4327, &quot;key&quot;: &quot;callback&quot; } { &quot;id&quot;: 13980, &quot;key&quot;: &quot;dispatcher&quot; } { &quot;id&quot;: 9459, &quot;key&quot;: &quot;create&quot; } { &quot;id&quot;: 5957, &quot;key&quot;: &quot;ReactCurrentDispatcher&quot; } { &quot;id&quot;: 1353, &quot;key&quot;: &quot;getServerSnapshot&quot; } { &quot;id&quot;: 1266, &quot;key&quot;: &quot;getSnapshot&quot; } { &quot;id&quot;: 1279, &quot;key&quot;: &quot;subscribe&quot; } { &quot;id&quot;: 14130, &quot;key&quot;: &quot;initialValue&quot; } { &quot;id&quot;: 3073, &quot;key&quot;: &quot;init&quot; } { &quot;id&quot;: 5465, &quot;key&quot;: &quot;source&quot; }&lt;/code&gt;...&lt;/pre&gt;    &lt;p&gt;Or we could query for types used in the file:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;react&amp;gt; N where flow.FileXRef { file = &quot;react/packages/react/src/ReactHooks.js&quot;, ref = { typeRef =  { typeDeclaration = { name =  N }  } } } { &quot;id&quot;: 1416, &quot;key&quot;: &quot;T&quot; } { &quot;id&quot;: 3728, &quot;key&quot;: &quot;A&quot; } { &quot;id&quot;: 14493, &quot;key&quot;: &quot;Dispatch&quot; } { &quot;id&quot;: 14498, &quot;key&quot;: &quot;S&quot; } { &quot;id&quot;: 14505, &quot;key&quot;: &quot;I&quot; } { &quot;id&quot;: 14522, &quot;key&quot;: &quot;BasicStateAction&quot; } { &quot;id&quot;: 3318, &quot;key&quot;: &quot;ReactContext&quot; } { &quot;id&quot;: 2363, &quot;key&quot;: &quot;Snapshot&quot; } { &quot;id&quot;: 14551, &quot;key&quot;: &quot;AbortSignal&quot; } { &quot;id&quot;: 6196, &quot;key&quot;: &quot;Source&quot; } { &quot;id&quot;: 8059, &quot;key&quot;: &quot;Dispatcher&quot; } { &quot;id&quot;: 7362, &quot;key&quot;: &quot;MutableSourceSubscribeFn&quot; } { &quot;id&quot;: 7357, &quot;key&quot;: &quot;MutableSourceGetSnapshotFn&quot; } { &quot;id&quot;: 7369, &quot;key&quot;: &quot;MutableSource&quot; }&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Ok this is starting to get useful.&lt;/p&gt;    &lt;p&gt;We’re doing some basic code analysis on the fly in the shell. But I had to know / explore the flow schema to make these queries. That doesn’t really scale if we have a client that needs to look at multiple languages — we can’t reasonably expect the client to know how declarations and definitions etc are defined in every single language. Luckily, Glean defines abstractions for us in &lt;a href=&quot;https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/code.angle#L16&quot;&gt;code.angle&lt;/a&gt; and codemarkup.angle to generically query for common code structures.&lt;/p&gt;    &lt;h2 id=&quot;querying-generically&quot;&gt;Querying generically&lt;/h2&gt;    &lt;p&gt;Entities are an Angle abstraction for “things that have definitions” in programming languages — like types, modules, classes etc. There are some common queries we need across any language:&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;files to their cross-references , of any entity sort&lt;/li&gt;&lt;li&gt;references to definitions&lt;/li&gt;&lt;li&gt;definitions in this file&lt;/li&gt;&lt;li&gt;entity to its definition location and file&lt;/li&gt;&lt;/ul&gt;    &lt;p&gt;For these common operations, a language-agnostic layer is defined in codemarkup.angle, taking care of all the subtleties resolving imports/headers/ .. for each language. E.g. for find-references, there’s a derived “&lt;code&gt;EntityUses&lt;/code&gt;” predicate for a bunch of languages here: &lt;a href=&quot;https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/codemarkup.angle#L259&quot; rel=&quot;nofollow&quot;&gt;https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/codemarkup.angle#L259&lt;/a&gt;&lt;/p&gt;    &lt;p&gt;We can use this to query Flow too E.g. how many known entities are defined or declared in ReactHooks.js? 99.&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;react&amp;gt; :count codemarkup.FileEntityLocations { file = &quot;react/packages/react/src/ReactHooks.js&quot; } 99 results, 354 facts, 13.15ms, 9297888 bytes, 54232 compiled bytes&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;And how many uses (xrefs) are in that file? 132.&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;:count codemarkup.FileEntityXRefLocations { file = &quot;react/packages/react/src/ReactHooks.js&quot; } 132 results, 329 facts, 40.44ms, 27210432 bytes, 160552 compiled bytes&lt;/code&gt;&lt;/pre&gt;    &lt;h2 id=&quot;quick-and-dirty-find-references-for-javascript&quot;&gt;Quick and dirty find-references for JavaScript&lt;/h2&gt;    &lt;p&gt;So we probably have enough now to do some basic semantic code search. i.e. not just textual search like grep, but semantically precise search as the compiler would see it. Let’s pick an entity and find its references. Since React is basically purely functional programming for UIs, let’s look for how often state is used — find-references to useState.&lt;/p&gt;    &lt;p&gt;First, we get the entity. This tells us the definition site. The Glean key of the entity is $&lt;code&gt;575875&lt;/code&gt;. and its structure is as below. Note the compound query here (the semicolon), where I name the entity ‘E’, then filter on its body for only those ‘Es’ with the name “useState” &lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;react&amp;gt; E where codemarkup.FileEntityLocations { file = &quot;react/packages/react/src/ReactHooks.js&quot;, entity = E } ; { flow = { decl = { localDecl = { name = &quot;useState&quot; } } } }  = E {   &quot;id&quot;: 575875,   &quot;key&quot;: {     &quot;flow&quot;: {       &quot;decl&quot;: {         &quot;localDecl&quot;: {           &quot;id&quot;: 14269,           &quot;key&quot;: {             &quot;name&quot;: { &quot;id&quot;: 1317, &quot;key&quot;: &quot;useState&quot; },             &quot;loc&quot;: {               &quot;id&quot;: 14268,               &quot;key&quot;: {                 &quot;module&quot;: {                   &quot;id&quot;: 12232,                   &quot;key&quot;: {                     &quot;file&quot;: { &quot;id&quot;: 12231, &quot;key&quot;: &quot;react/packages/react/src/ReactHooks.js&quot; }                   }                 },                 &quot;span&quot;: { &quot;start&quot;: 2841, &quot;length&quot;: 8 }&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Now to direct references to this elsewhere in React, we add &lt;code&gt;codemarkup.EntityUses { target = E, file = F }&lt;/code&gt; to the query and return the files F:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;react&amp;gt; F where codemarkup.FileEntityLocations { file = &quot;react/packages/react/src/ReactHooks.js&quot;, entity = E } ; { flow = { decl = { localDecl = { name = &quot;useState&quot; } } } } = E ; codemarkup.EntityUses { target = E, file = F }&lt;br /&gt;{ &quot;id&quot;: 10971, &quot;key&quot;: &quot;&lt;strong&gt;react/packages/react/src/React.js&lt;/strong&gt;&quot; }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;1 results, 1 facts, 9.19ms, 5460072 bytes, 8140 compiled bytes&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;So that finds the first-order direct reference to useState from ReactHooks.js to React.js.. To find the actual uses in the rest of the react package, we need a proper index for module names to strings, so that an import of ‘react’ can be resolved to ‘React.js’ and thus to the origin. Glean knows about this, but my indexer doesn’t have StringToModule facts — I need the flow indexer to generate these somehow.&lt;/p&gt;    &lt;p&gt;For now, this is enough. We are alive. &lt;/p&gt;    &lt;p&gt;In the next part I’ll look at writing a simple code search client to the Glean server running on the VM.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-12T03:48:35Z",
"URL":" https://donsbot.com/2022/01/11/glean-on-aarch64-on-apple-silicon-part-3/ "
}
,
{
"title":"Don Stewart (dons): Glean on aarch64 on Apple Silicon : part 2",
"textBody":"&lt;p&gt;See: Part 1: &lt;a href=&quot;https://donsbot.com/2022/01/07/glean-on-aarch64-on-apple-silicon-part-1/&quot;&gt;get an aarch64/Linux VM running in UTM on the M1&lt;/a&gt;&lt;/p&gt;    &lt;p&gt;I want to develop and use &lt;a href=&quot;https://glean.software/&quot;&gt;Glean&lt;/a&gt; on ARM as I have a MacBook Air (road warrior mode) and I’m interested in making Glean more useful for local developer IDE backends. (c.f &lt;a href=&quot;https://glean.software/docs/introduction/&quot;&gt;What is Glean?&lt;/a&gt;)&lt;/p&gt;    &lt;p&gt;To build Glean just read the &lt;a href=&quot;https://glean.software/docs/building/#building&quot;&gt;fine instructions&lt;/a&gt;  and fix any compilation errors, right? Actually, we need a few patches to disable Intel-specific things, but otherwise the instructions are the same. It’s a fairly normal-ish Haskell set of projects with an FFI into some moderately bespoke C++ runtime relying on folly and a few other C++ libs.&lt;/p&gt;    &lt;p&gt;Thankfully, all the non-portable parts of Glean are easily isolated to the &lt;a href=&quot;https://github.com/facebookincubator/Glean/tree/main/glean/rts/ownership&quot;&gt;rts/ownership&lt;/a&gt; parts of the Glean database runtime. In this case “ownership” is only used for incremental updates to the database and other semi-advanced things I don’t need right now.&lt;/p&gt;    &lt;p&gt;The only real bits of non-portable code are:&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;Flags to tell folly and thrift to use haswell or corei7 (we will ignore this on non-x86_64)&lt;/li&gt;&lt;li&gt;An implementation of &lt;a href=&quot;https://github.com/facebookincubator/Glean/blob/main/glean/rts/ownership/setu32.h#L27&quot;&gt;256-bit bitsets&lt;/a&gt; (via AVX).&lt;/li&gt;&lt;li&gt;Use of folly/&lt;a href=&quot;https://github.com/facebook/folly/blob/main/folly/experimental/EliasFanoCoding.h#L18&quot;&gt;Elias-Fano coding&lt;/a&gt;, for efficient compression of sorted integer list or sets as offsets (how we represent ownership of facts to things they depend on).&lt;/li&gt;&lt;/ul&gt;    &lt;p&gt;Why is this stuff in Glean? Well, Glean is a database for storing and querying very large scale code information, represented as 64 bit keys into “tables” (predicates) which represent facts. These facts relate to each other forming DAGs. Facts are named by 64 bit key. A Glean db is millions (or billions) of facts across hundreds of predicates. I.e. lots of 64 bit values.&lt;/p&gt;    &lt;p&gt;So we’re in classic information retrieval territory – hence the focus on efficient bit and word encodings and operations. Generally, you flatten AST information (or other code facts) into tables, then write those tables into Glean. Glean then goes to a lot of work to store that efficiently. That’s how we get the sub-millisecond query times.&lt;/p&gt;    &lt;p&gt;What is a &lt;a href=&quot;https://glean.software/docs/schema/basic/&quot;&gt;“fact about code”&lt;/a&gt;? A single true statement about the code. E.g. for a method M in file F we might have quite a lot of information:&lt;/p&gt;    &lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;M is a method M is located at file F M is located at span 102-105 M has parent P F is a file M has type signature T M is referred to by file/spans (G, 107-110) and (H, 23-26)&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Real code bases have millions of such facts, all relating things in the code to each other – types to methods, methods to container modules, declarations to uses, definitions to declarations etc. We want that to be efficient, hence all the bit fiddling.&lt;/p&gt;    &lt;p&gt;So let’s try to build this on non-x86 and see what breaks.&lt;/p&gt;    &lt;h1 id=&quot;building-glean-from-scratch&quot;&gt;Building Glean from scratch&lt;/h1&gt;    &lt;p&gt;The normal way to&lt;a href=&quot;https://glean.software/docs/building/&quot;&gt; build Glean is from source&lt;/a&gt;. There are two repos:&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;Glean itself, &lt;a href=&quot;https://github.com/facebookincubator/Glean&quot;&gt;https://github.com/facebookincubator/Glean&lt;/a&gt; &lt;/li&gt;&lt;li&gt;hsthrift and its dependencies (i.e. folly) , &lt;a href=&quot;https://github.com/facebookincubator/hsthrift&quot;&gt;https://github.com/facebookincubator/hsthrift&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;    &lt;p&gt;I’ve put some PRs up for the non-x86_64 builds, so if you’re building for ARM or something else, you’ll need these from here:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;git clone &lt;/code&gt;&lt;a href=&quot;https://github.com/donsbot/Glean.git&quot;&gt;&lt;code&gt;https://github.com/donsbot/Glean.git&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;&lt;code&gt;cd Glean&lt;/code&gt;&lt;br /&gt;&lt;code&gt;git clone &lt;/code&gt;&lt;a href=&quot;https://github.com/donsbot/hsthrift.git&quot;&gt;&lt;code&gt;https://github.com/donsbot/hsthrift.git&lt;/code&gt;&lt;/a&gt;&lt;/pre&gt;    &lt;p&gt;Worth doing a cabal update as well, just in case you never built Haskell stuff before.&lt;/p&gt;    &lt;p&gt;Now we can build the dependent libraries and the thrift compiler (n.b. we need some stuff installed in /usr/local (needs sudo).&lt;/p&gt;    &lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&lt;code&gt;export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;So let’s build thrift and folly:&lt;/p&gt;    &lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt; cd hsthrift  ./install-deps –sudo&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;I’m doing this on the aarch64 Debian 11 image running in UTM on a Macbook Air.&lt;/p&gt;    &lt;p&gt;Now… first time build I seem to reliably get a gcc segfault on both x86 and aarch64, which I will conveniently sidestep by running it again. This seems mildly concerning as open source thrift might be miscompiled with gcc. I should likely be using clang here.&lt;/p&gt;    &lt;p&gt;&lt;code&gt;[ 57%] Building CXX object thrift/lib/cpp2/CMakeFiles/thriftprotocol.dir/protocol/TableBasedSerializer.cpp.o&lt;br /&gt;In file included from :&lt;br /&gt;/usr/include/stdc-predef.h: In substitution of ‘template constexpr T apache::thrift::detail::identity(T) [with T = ]’:&lt;br /&gt;/home/dons/Glean/hsthrift/fbthrift/thrift/lib/cpp2/protocol/TableBasedSerializer.cpp:37:1: required from here&lt;br /&gt;/usr/include/stdc-predef.h:32:92: internal compiler error: Segmentation fault&lt;br /&gt;32 | whether the overall intent is to support these features; otherwise,&lt;br /&gt;| ^&lt;br /&gt;Please submit a full bug report,&lt;br /&gt;with preprocessed source if appropriate.&lt;br /&gt;See for instructions.&lt;br /&gt;make[2]: *** [thrift/lib/cpp2/CMakeFiles/thriftprotocol.dir/build.make:173: thrift/lib/cpp2/CMakeFiles/thriftprotocol.dir/protocol/TableBasedSerializer.cpp.o] Error 1&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;Vanilla Debian gcc.&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;$ gcc --version&lt;br /&gt;gcc (Debian 10.2.1-6) 10.2.1 20210110&lt;/pre&gt;    &lt;p&gt;That really looks like a gcc bug and probably other things lurking there. Urk. Re-run the command and it seems to make progress. Hmm. Compilers in memory-unsafe languages eh? Moving along quickly…&lt;/p&gt;    &lt;h1 id=&quot;build-the-glean-rts-and-haskell-bits&quot;&gt;Build the Glean rts and Haskell bits&lt;/h1&gt;    &lt;p&gt;Once hsthrift is built installed, we have all the various C++ deps (folly, xxhash etc). So we can try building Glean itself now. Glean is a mixture of Haskell tools over a C++ runtime. There’s a ton of schemas, bytecode generators, thrift mungers. Glean is sort of an ecosystem of indexers (analyzing code and spitting out facts as logs), a database runtime coupled to a Thrift server (“Glean” itself) and tooling for building up distributed systems around this (for restoring/ migrating/ monitoring / administering clusters of Glean services).&lt;/p&gt;    &lt;p&gt;Building Glean .. if you get an error about missing HUnit, that means we haven’t synced the cabal package list. I got this on the first go with a blank Debian iso as the initial cabal package list is a basic one.&lt;/p&gt;    &lt;p&gt;&lt;code&gt;Resolving dependencies…&lt;br /&gt;cabal: Could not resolve dependencies:&lt;br /&gt;[__0] trying: fb-stubs-0.1.0.0 (user goal)&lt;br /&gt;[__1] unknown package: HUnit (dependency of fb-stubs)&lt;br /&gt;[__1] fail (backjumping, conflict set: HUnit, fb-stubs)&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;That’s fixable with a &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt;    &lt;p&gt;If you’re not using my branch, and building on non-x86 you’ll fail at the first AVX header.&lt;/p&gt;    &lt;div class=&quot;wp-container-61de6e683dc4c wp-block-group&quot;&gt;&lt;div class=&quot;wp-block-group__inner-container&quot;&gt; &lt;p&gt;&lt;code&gt;Preprocessing library 'rts' for glean-0.1.0.0..&lt;br /&gt;Building library 'rts' for glean-0.1.0.0..&lt;br /&gt;In file included from ./glean/rts/ownership/uset.h:11,&lt;br /&gt;from ./glean/rts/ownership.h:12, from glean/rts/ffi.cpp:18:0: error:&lt;/code&gt; &lt;code&gt;glean/rts/ownership/setu32.h:11:10: error:&lt;br /&gt;fatal error: immintrin.h: No such file or directory&lt;br /&gt;11 | #include&lt;/code&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;    &lt;p&gt;Similarly, hsthrift needed some patches where the intel arch was baked in, otherwise you’ll get:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;cc1plus: error: unknown value ‘haswell’ for ‘-march’&lt;br /&gt;cc1plus: note: valid arguments are: armv8-a armv8.1-a armv8.2-a armv8.3-a armv8.4-a&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;I fixed up all the .cabal files and other bits:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;$ find . -type f -exec grep -hl haswell {} \;&lt;br /&gt;./hsthrift/server/thrift-server.cabal&lt;br /&gt;./hsthrift/cpp-channel/thrift-cpp-channel.cabal&lt;br /&gt;./hsthrift/common/util/fb-util.cabal&lt;br /&gt;./glean.cabal&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;See this PR for the tweaks for hsthrift &lt;a href=&quot;https://github.com/facebookincubator/hsthrift/pull/53/commits&quot;&gt;https://github.com/facebookincubator/hsthrift/pull/53/commits&lt;/a&gt;&lt;/p&gt;    &lt;h2 id=&quot;avx-instructions&quot;&gt;AVX instructions&lt;/h2&gt;    &lt;p&gt;Now, Glean itself uses a whole set of &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX instructions &lt;/a&gt;for different things. To see what’s actually needed I added a define to conditionally compile immintrin.h on arm, and then sub out each of the methods until the compiler was happy.&lt;/p&gt;    &lt;p&gt;&lt;code&gt;$ find . -type f -exec grep -hl immintrin.h {} \;&lt;br /&gt;./glean/rts/ownership/setu32.h&lt;br /&gt;./glean/rts/ownership.cpp&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;The methods we need to stub out are:&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;int _mm256_testc_si256(__m256i __M, __m256i __V);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;int _mm256_testz_si256(__m256i __M, __m256i __V);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;__m256i _mm256_setzero_si256();&lt;/code&gt;&lt;br /&gt;&lt;code&gt;__m256i _mm256_set1_epi32(int __A);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;__m256i _mm256_sllv_epi32(__m256i __X, __m256i __Y);__m256i _mm256_sub_epi32(__m256i __A, __m256i __B);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;__m256i _mm256_set_epi32(int __A, int __B, int __C, int __D, int __E, int __F, int __G, int __H);&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Ooh AV512&lt;/p&gt;    &lt;pre class=&quot;wp-block-preformatted&quot;&gt;&lt;code&gt;long long _mm_popcnt_u64(unsigned long long __X);&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Also&lt;/p&gt;    &lt;p&gt;&lt;code&gt;unsigned long long _lzcnt_u64(unsigned long long __X);&lt;br /&gt;__m256i _mm256_or_si256(__m256i __A, __m256i __B);__m256i _mm256_and_si256(__m256i __A, __m256i __B);&lt;br /&gt;__m256i _mm256_xor_si256(__m256i __A, __m256i __B);&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;Figuring out what these are all used for &lt;a href=&quot;https://github.com/facebookincubator/Glean/blob/main/glean/rts/ownership/setu32.h#L78&quot;&gt;is interesting.&lt;/a&gt; We have 256-bit bitsets everywhere, and e.g. 4 64 bit popcnts to count things (fact counts?).&lt;/p&gt;    &lt;p&gt;&lt;code&gt;size_t count() const {&lt;br /&gt;const uint64_t* p = reinterpret_cast(&amp;amp;value);&lt;br /&gt;// _mm256_popcnt instructions require AVX512&lt;br /&gt;return&lt;br /&gt;_mm_popcnt_u64(p[0]) +&lt;br /&gt;_mm_popcnt_u64(p[1]) +&lt;br /&gt;_mm_popcnt_u64(p[2]) +&lt;br /&gt;_mm_popcnt_u64(p[3]);&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;Anyway, its relatively trivial to stub these out, match the types and we have a mocked AVX layer. Left to the reader to write a portable shim for 256 bitsets that does these things on vectors of words.&lt;/p&gt;    &lt;h1 id=&quot;elias-fano&quot;&gt;Elias Fano&lt;/h1&gt;    &lt;p&gt;So the other bit is a little more hairy. Glean uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Shannon%E2%80%93Fano%E2%80%93Elias_coding&quot;&gt;Elias Fano&lt;/a&gt; to compress all these sets of 64 bit keys we have floating around. Tons of sets indicating facts are owned or related to other facts. The folly implementation of Elias Fano is x86_64 only, so just falls over on aarch64:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;/usr/local/include/folly/experimental/EliasFanoCoding.h:43:2: error:&lt;br /&gt;error: #error EliasFanoCoding.h requires x86_64&lt;br /&gt;43 | #error EliasFanoCoding.h requires x86_64&lt;br /&gt;| ^~~~~&lt;br /&gt;|&lt;br /&gt;43 | #error EliasFanoCoding.h requires x86_64&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;So hmm. Reimplement? No its Saturday so I’m going to sub this out as well, just enough to get it to compile. My guess is we don’t use many methods here, read/write/iterate and some constructors. So I copy &lt;a href=&quot;https://github.com/facebookincubator/Glean/pull/66/commits/9adc5e80b7f6f7fb9b556fbf3d7a8774fa77d254#diff-2ded34afae421cb1c73b2ced3defdfa1a9b729ad3499c807647b2a2217710bfcR85&quot;&gt;just enough of the canonical implementation declarations&lt;/a&gt; and dummy bodies to get it all to go through. Hsthrift under aarch64 emulation on UMT on an arm64 M1 takes about 10 mins to build with no custom flags.&lt;/p&gt;    &lt;h1 id=&quot;build-and-test&quot;&gt;Build and test&lt;/h1&gt;    &lt;p&gt;So we should be good to go now. Compile the big thing: Glean. Some of these generated bits of schema are pretty big too.&lt;/p&gt;    &lt;p&gt;Glean storage is described via “schemas” for languages. Schemas represent what predicates (tables and their types) we want to capture. Uniquely, Glean’s &lt;a href=&quot;https://glean.software/docs/schema/syntax/#referring-to-other-predicates&quot;&gt;Angle language is rich enough&lt;/a&gt; to support abstracting over types and predicates, building up layers of API that let you hide language complexity. You can paper over differences between languages while also providing precise language-specific captur&lt;/p&gt;    &lt;p&gt;To see an example, look at the mulit-language find-references layer in codemarkup.angle:&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;One abstract (“derived”) method for fast find-references across a dozen languages: &lt;a href=&quot;https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/codemarkup.angle#L231&quot;&gt;https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/codemarkup.angle#L231&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Built up from language-specific queries: &lt;a href=&quot;https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/codemarkup.angle#L557&quot;&gt;https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/codemarkup.angle#L557&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;    &lt;p&gt;The joy of this is that a client only has to know to query codemarkup:find-references and the right query will be issued for the right language. Client doesn’t have to know language-specific stuff, its all hidden in the database engine.&lt;/p&gt;    &lt;p&gt;But .. that does end up meaning we generate quite a lot of code. With some trial and error I needed something under 16G to compile the “codemarkup” abstraction layer (this is a language-angostic navigation layer over the Glean schemas).&lt;/p&gt;    &lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;&lt;code&gt;make&lt;br /&gt;make test&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;    &lt;p&gt;That should pass and we are in business. We can run the &lt;a href=&quot;https://glean.software/docs/walkthrough/&quot;&gt;little hello world demo&lt;/a&gt;.&lt;/p&gt;    &lt;p&gt;&lt;code&gt;$ uname -msr&lt;br /&gt;Linux 5.10.0-10-arm64 aarch64&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;$ glean shell --db-root /tmp/glean/db/ --schema /tmp/glean/schema/&lt;br /&gt;Glean Shell, built on 2022-01-08 07:22:56.472585205 UTC, from rev 9adc5e80b7f6f7fb9b556fbf3d7a8774fa77d254&lt;br /&gt;type :help for help.&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;Check our little db created from the walkthrough:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;:list&lt;br /&gt;facts/0 (complete)&lt;br /&gt;Created: 2022-01-08 10:59:17 UTC (1 day, 18 hours ago)&lt;br /&gt;Completed: 2022-01-08 10:59:18 UTC (1 day, 18 hours ago)&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;What predicates does it have?&lt;/p&gt;    &lt;p&gt;&lt;code&gt;facts&amp;gt; :schema&lt;br /&gt;predicate example.Member.1 :&lt;br /&gt;{ method : { name : string, doc : maybe string } | variable : { name : string } | }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;predicate example.FileClasses.1 : { file : string, classes : [example.Class.1] &lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;predicate example.Reference.1 :&lt;br /&gt;{ file : string, line : nat, column : nat }&lt;br /&gt;-&amp;gt; example.Class.1&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;predicate example.Class.1 : { name : string, line : nat }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;predicate example.Parent.1 : { child : example.Class.1, parent : example.Class.1 }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;predicate example.Has.1 :&lt;br /&gt;{ class_ : example.Class.1, has : example.Member.1, access : enum { Public | Private | } }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;&lt;code&gt;predicate example.Child.1 : { parent : example.Class.1, child : example.Class.1 }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;Try a query or two: e.g. “How many classes do we have?”&lt;/p&gt;    &lt;p&gt;&lt;code&gt;facts&amp;gt; example.Class _&lt;br /&gt;{ &quot;id&quot;: 1026, &quot;key&quot;: { &quot;name&quot;: &quot;Fish&quot;, &quot;line&quot;: 30 } }&lt;br /&gt;{ &quot;id&quot;: 1027, &quot;key&quot;: { &quot;name&quot;: &quot;Goldfish&quot;, &quot;line&quot;: 40 } }&lt;br /&gt;{ &quot;id&quot;: 1025, &quot;key&quot;: { &quot;name&quot;: &quot;Lizard&quot;, &quot;line&quot;: 20 } }&lt;br /&gt;{ &quot;id&quot;: 1024, &quot;key&quot;: { &quot;name&quot;: &quot;Pet&quot;, &quot;line&quot;: 10 } }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;What is the parent of the Fish class?&lt;/p&gt;    &lt;p&gt;&lt;code&gt;facts&amp;gt; example.Parent { child = { name = &quot;Fish&quot; } }&lt;br /&gt;{&lt;br /&gt;&quot;id&quot;: 1029,&lt;br /&gt;&quot;key&quot;: {&lt;br /&gt;&quot;child&quot;: { &quot;id&quot;: 1026, &quot;key&quot;: { &quot;name&quot;: &quot;Fish&quot;, &quot;line&quot;: 30 } },&lt;br /&gt;&quot;parent&quot;: { &quot;id&quot;: 1024, &quot;key&quot;: { &quot;name&quot;: &quot;Pet&quot;, &quot;line&quot;: 10 } }&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;1 results, 3 facts, 5.59ms, 172320 bytes, 1014 compiled bytes&lt;/p&gt;    &lt;p&gt;Ok we have a working ARM64 port of Glean. In the next post I’ll look at indexing some real code and serving up queries.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-10T11:58:56Z",
"URL":" https://donsbot.com/2022/01/09/glean-on-aarch64-on-apple-silicon-part-2/ "
}
,
{
"title":"Philip Wadler: Gödel, Animated",
"textBody":"&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;A five-minute &lt;a href=&quot;https://www.youtube.com/watch?v=I4pQbo5MQOs&quot;&gt;primer&lt;/a&gt; on GÃ¶del and incompleteness, courtesy of Marcus du Sautoy and TED-Ed. While not named, the fellow in the hat disgruntled by the discovery is clearly Hilbert.&lt;p&gt;&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-10T11:34:27Z",
"URL":" https://wadler.blogspot.com/2022/01/godel-animated.html "
}
,
{
"title":"Don Stewart (dons): Glean on aarch64 on Apple Silicon : part 1",
"textBody":"&lt;h2 id=&quot;get-a-working-aarch64-box&quot;&gt;Get a working aarch64 box&lt;/h2&gt;    &lt;p&gt;This post show how to get a working aarch64 env on the MacBook Air (M1) for Haskell.&lt;/p&gt;    &lt;p&gt;I’m working on the road at the moment, so picked up a MacBook Air with the M1 chip, to travel light. I wanted to use it as a development environment for &lt;a href=&quot;https://glean.software/&quot;&gt;Glean&lt;/a&gt; (c.f. &lt;a href=&quot;https://twitter.com/simonmar/status/1432641578401730567?s=20&quot;&gt;what is Glean&lt;/a&gt;), the code search system I work on. But Glean is a Linux/x86_64 only at the moment due to use of some fancy AVX extensions deep down in the runtime. Let’s fix that.&lt;/p&gt;    &lt;p&gt;Motivation: getting Glean working on Apple ARM chips could be useful for a few reasons. Apple Silicon is becoming really common, and a lot of devs have MacBooks as their primary development environment (essentially expensive dumb terminals to run VS Code). Glean is/could be the core of a lot of developer environments, as it indexes source code and serves up queries extremely efficiently, so it could be killer as a local language server backend for your Mac IDE. (e.g. a common backend for all your languages, with unified search, jump-to-def, find-refs etc).&lt;/p&gt;    &lt;h2 class=&quot;has-dark-gray-color has-text-color&quot; id=&quot;setup-up-utm&quot;&gt;Setup up UTM&lt;/h2&gt;    &lt;p&gt;Glean is still very Linux-focused. So we need a VM. I’m building on an M1 MacBook Air (ARM64). So I install &lt;a href=&quot;https://mac.getutm.app/&quot;&gt;UTM&lt;/a&gt; from the app store or internet – this will be our fancy iOS QEMU virtualization layer.&lt;/p&gt;    &lt;p&gt;Configure the OS image as per &lt;a href=&quot;https://medium.com/@lizrice/linux-vms-on-an-m1-based-mac-with-vscode-and-utm-d73e7cb06133&quot;&gt;https://medium.com/@lizrice/linux-vms-on-an-m1-based-mac-with-vscode-and-utm-d73e7cb06133&lt;/a&gt; for aarch64 debian, using &lt;a href=&quot;https://mac.getutm.app/gallery/ubuntu-20-04&quot;&gt;https://mac.getutm.app/gallery/ubuntu-20-04&lt;/a&gt; for the basic configuration.&lt;/p&gt;    &lt;p&gt;In particular, I set up the following.&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;Information -&amp;gt; Style: Operating system &lt;/li&gt;&lt;li&gt;System -&amp;gt; Hardware -&amp;gt; Architecture: aarch64&lt;/li&gt;&lt;li&gt;System -&amp;gt; Memory -&amp;gt; 16G (compiling stuff!)&lt;/li&gt;&lt;li&gt;Drives -&amp;gt; VirtIO at least 20G, this will be the install drive and build artifacts&lt;/li&gt;&lt;li&gt;Drives -&amp;gt; Removable USB , for the installation .iso&lt;/li&gt;&lt;li&gt;Display -&amp;gt; console only (we’ll use ssh)&lt;/li&gt;&lt;li&gt;Network -&amp;gt; Mode: Emulated VLAN&lt;/li&gt;&lt;/ul&gt;    &lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh5.googleusercontent.com/P0vyey6tXZjz66SyYWxOUJo4xgVmUikgCOEqBQmmjMWImeN1FzvPdnsPM5pXOl1SpeYqdueslmBSbMH-6RQgfJlRfIX3_TM8aOydc3Mi_X6eg5RDcK5UI9iaX8im7_xGo4C6l368&quot; /&gt;&lt;figcaption&gt;VM disk configuration&lt;/figcaption&gt;&lt;/figure&gt;    &lt;p&gt;I’ll point VS Code and other things at this VM, so I’m going to forward port 2200 on the Mac to port 22 on the Debian VM.&lt;/p&gt;    &lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh3.googleusercontent.com/tEn1dfBtYGvzxhIfff8vU2UVq1jSGhS72IyFRigTUhyTUDJV9an0Re0qAPFoFGb57v3dy3Fh9jJnn3XC1cg7KlVdpgL99FDmk_L35K4dQlljJdF2pq9Y00LB1H-rNlDE6Buwmwz6&quot; /&gt;&lt;figcaption&gt;Network settings for the VM&lt;/figcaption&gt;&lt;/figure&gt;    &lt;h2 id=&quot;choose-os-installer-and-boot&quot;&gt;Choose OS installer and boot&lt;/h2&gt;    &lt;p&gt;Set the CD/DVD to the Debian ISO file path. I used the arm64 netinst iso for Debian 11 from &lt;a href=&quot;https://cdimage.debian.org/debian-cd/current/arm64/iso-cd/&quot;&gt;https://cdimage.debian.org/debian-cd/current/arm64/iso-cd/&lt;/a&gt;&lt;/p&gt;    &lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh4.googleusercontent.com/H__tJuO4ofTSn-KeQSoFK8muys5Bj6aWUTuDVQWQAq3qQcdaBypYEHgZf6zSzlQzcqhbAMl-bJipTPmD8hkMv9UrS1vTMGbmSLBRzNMHo9ycA7gnPHSJQoI1w-WFTMFcNuLBFYAD&quot; /&gt;&lt;/figure&gt;    &lt;p&gt;Boot the machine and run the Debian install. It’s like 1999 here. (So much nostalgia when I used to scavenge x86 boxes from dumpsters in the Sydney CBD 20 years ago to put Linux on them).&lt;/p&gt;    &lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh5.googleusercontent.com/mptf1RBqe7xF5e5GpFPA-ICfcaUYGBCOX1iQjwk4Y_RwMKHP2BB-regTsyXmkd9kher0gIRMTFWoUleOmT8ZHg6uBnPf7AVNFY5V449_JnpfRvHElXoYWSCb2PloaT-aOfcDUURd&quot; /&gt;&lt;figcaption&gt;Yeah!&lt;/figcaption&gt;&lt;/figure&gt;    &lt;p&gt;Boot the image and log in. Now we have a working Linux aarch64 box on the M1, running very close to native speed (arm on arm virtualization).&lt;/p&gt;    &lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh3.googleusercontent.com/Y0uYg2Kr3IqltXl4nPal7R7FnOb4lQe4vCVMTnGMkIIYDgNtx9fjJ-nLixdSsRLCAcnoI45gDh0jx1_kxnXQ-0XJFeX7Uhp08PWQJvWu3QEygvbleLb_i09biA8m8ZY45kC3jeDs&quot; /&gt;&lt;/figure&gt;    &lt;p&gt;You can ssh into this from the Mac OS side, or set it up as a remote host for VS Code just fine, which is shockingly convenient (on port 2200).&lt;/p&gt;    &lt;h2 id=&quot;install-the-dev-env&quot;&gt;Install the dev env&lt;/h2&gt;    &lt;p&gt;This is a really basic Debian image, so you need a couple of things to get started with a barebones Haskell env:&lt;/p&gt;    &lt;p&gt;&lt;code&gt;apt install sudo curl cabal-install&lt;/code&gt;&lt;/p&gt;    &lt;p&gt;We have a basic dev env now.&lt;/p&gt;    &lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;$ uname -msr Linux 5.10.0-10-arm64 aarch64  $ ghci GHCi, version 8.8.4: https://www.haskell.org/ghc/  :? for help Prelude&amp;gt; System.Info.arch &quot;aarch64&quot; Prelude&amp;gt; let s = 1 : 1 : zipWith (+) s (tail s) in take 20 s [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765]&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;To build Glean a la &lt;a href=&quot;https://glean.software/docs/building/&quot;&gt;https://glean.software/docs/building/&lt;/a&gt; we need to update Cabal to the 3.6.x or greater, as Glean uses some fancy Cabal configuration features.. &lt;/p&gt;    &lt;h2 id=&quot;update-cabal&quot;&gt;Update cabal&lt;/h2&gt;    &lt;p&gt;We need cabal &amp;gt; 3.6.x  which &lt;a href=&quot;https://tracker.debian.org/pkg/haskell-cabal-install&quot;&gt;isn’t in Debian stable&lt;/a&gt;, so I’ll just use the pre-built binary from &lt;a href=&quot;https://www.haskell.org/cabal/download.html&quot;&gt;https://www.haskell.org/cabal/download.html&lt;/a&gt;&lt;/p&gt;    &lt;p&gt;Choose: Binary download for Debian 10 (aarch64, requires glibc 2.12 or later): &lt;a href=&quot;https://downloads.haskell.org/~cabal/cabal-install-3.6.0.0/cabal-install-3.6.0.0-aarch64-linux-deb10.tar.xz&quot;&gt;cabal-install-3.6.0.0-aarch64-linux-deb10.tar.xz&lt;/a&gt;&lt;/p&gt;    &lt;p&gt;Unpack that. You’ll also need apt-get libnuma-dev if you use that binary.&lt;/p&gt;    &lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&lt;code&gt;$ tar xvfJ  cabal-install-3.6.0.0-aarch64-linux-deb10.tar.xz $ ./cabal --version cabal-install version 3.6.0.0 compiled using version 3.6.1.0 of the Cabal library&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;I just copy that over the system cabal for great good. It’s a good idea now to sync the package list for Hackage, before we start trying to build anything Haskell. with a cabal update.&lt;/p&gt;    &lt;h2 id=&quot;install-the-glean-dependencies&quot;&gt;Install the Glean dependencies&lt;/h2&gt;    &lt;p&gt;To build Glean we need a bunch C++ things. Glean itself will bootstrap the Haskell parts. The Debian packages needed are identical to those for Ubuntu on the Glean install instructions : &lt;a href=&quot;https://glean.software/docs/building/#ubuntu&quot;&gt;https://glean.software/docs/building/#ubuntu&lt;/a&gt; except you might see “Package ‘libmysqlclient-dev’ has no installation candidate”. We will instead need default-libmysqlclient-dev. We also need libfmt-dev.&lt;/p&gt;    &lt;p&gt;So the full set of Debian Glean dependencies are:&lt;/p&gt;    &lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&amp;gt; apt install g++ \     cmake \     bison flex \     git cmake \     libzstd-dev \     libboost-all-dev \     libevent-dev \     libdouble-conversion-dev \     libgoogle-glog-dev \     libgflags-dev \     libiberty-dev \     liblz4-dev \     liblzma-dev \     libsnappy-dev \     make \     zlib1g-dev \     binutils-dev \     libjemalloc-dev \     default-libmysqlclient-dev \     libssl-dev \     pkg-config \     libunwind-dev \     libsodium-dev \     curl \     libpcre3-dev \     libfftw3-dev \     librocksdb-dev \     libxxhash-dev \     libfmt-dev&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;Now we have a machine ready to build Glean. We’ll do the ARM port of Glean in the next post and get something running.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-08T01:41:02Z",
"URL":" https://donsbot.com/2022/01/07/glean-on-aarch64-on-apple-silicon-part-1/ "
}
,
{
"title":"Matthew Sackman: Another Go binding for LMDB",
"textBody":"&lt;p&gt;In the series on designing and building a &lt;a href=&quot;https://wellquite.org/tags/edist/&quot;&gt;distributed concurrent editor&lt;/a&gt;, I’ve been using &lt;a href=&quot;https://pkg.go.dev/github.com/etcd-io/bbolt&quot;&gt;bbolt&lt;/a&gt; as the embedded key-value store. That is inspired by &lt;a href=&quot;http://lmdb.tech/&quot;&gt;LMDB&lt;/a&gt;, which is written in C, is extremely fast, is very widely used, and has been around for a fair while now.&lt;/p&gt;  &lt;p&gt;LMDB makes read-write transactions fully serialised (literally, only one can happen at a time). When a read-only transaction starts, it works on a snapshot of the database that contains every committed read-write transaction up to the moment the read-only transaction started. The read-only transaction continues to see this snapshot even if other read-write transactions start and commit concurrently with the read-only transaction. These are very nice and easy to work with semantics: you never have to worry about seeing data from uncommitted transactions, you always see a consistent snapshot, and you don’t have to worry about weird interactions between concurrent read-write transactions because there are none.&lt;/p&gt;  &lt;p&gt;Several years ago, I &lt;a href=&quot;https://github.com/msackman/gomdb&quot;&gt;tweaked&lt;/a&gt; an existing Go binding for LMDB and extended it a bit. I recently went back and had a look at that code, and the normal thing happened when looking at your own code from more than 6 months ago: “&lt;em&gt;Which idiot wrote this? This code is terrible. I would never write it like this today&lt;/em&gt;”. Etc. So, using the &lt;a href=&quot;https://wellquite.org/posts/lets_build/edist_actors/&quot;&gt;actors&lt;/a&gt; framework I wrote about last week, I decided to write a &lt;a href=&quot;https://pkg.go.dev/wellquite.org/golmdb&quot;&gt;new Go binding to LMDB&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;The most comprehensive existing Go binding I came across is &lt;a href=&quot;https://pkg.go.dev/github.com/bmatsuo/lmdb-go/lmdb&quot;&gt;Bryan Matsuo’s&lt;/a&gt;. However, even that is several years bit-rotten: the tests don’t pass without a bit of tweaking, and although he’s clearly gone to some trouble to minimise unnecessary copying of data between Go land and C land, on a close inspection, the &lt;a href=&quot;https://github.com/bmatsuo/lmdb-go/blob/a14b5a390eff52e52a20eceb3020038b3d291432/lmdb/lmdbgo.c#L73-L82&quot;&gt;C code&lt;/a&gt; does violate the &lt;a href=&quot;https://pkg.go.dev/cmd/cgo&quot;&gt;Cgo&lt;/a&gt; contract about &lt;a href=&quot;https://pkg.go.dev/cmd/cgo#hdr-Passing_pointers&quot;&gt;not storing any Go pointers in Go memory&lt;/a&gt;. I suspect the code was written before that detail of Cgo was formalised anyway.&lt;/p&gt;  &lt;p&gt;All of the existing bindings that I could find (including my previous one), are low-level bindings: they expose the LMDB API fairly faithfully. That has pros and cons: you get a lot of flexibility, but you also have to rebuild a lot of the things that these days you might expect to get for free – particularly things you get for free with BBolt. So I wanted this new binding to be pretty high-level: scenarios where it’s both fairly obvious what the ideal behaviour is, and it’s achievable, the binding should take care of things for you. Especially when the result is an API and semantics that are somewhat more idiomatic and user-friendly.&lt;/p&gt;  &lt;p&gt;With LMDB you get some similar stuff to BBolt:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;keys and values are byte arrays.&lt;/li&gt; &lt;li&gt;normal &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; APIs.&lt;/li&gt; &lt;li&gt;keys are sorted lexically (though there are flags to change to that to numerically sorted keys).&lt;/li&gt; &lt;li&gt;you can use cursors to move about, based on the key sorting.&lt;/li&gt; &lt;li&gt;many concurrent readers are supported, but just one writer at a time.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;But you also get some bits I wanted to hide:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;if the database file gets full, you get an error. There’s an API to increase the size, but it’s up to you to call it.&lt;/li&gt; &lt;li&gt;the cursors API is a little weird and &lt;a href=&quot;http://www.lmdb.tech/doc/group__mdb.html#ga1206b2af8b95e7f6b0ef6b28708c9127&quot;&gt;tersely documented&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;once you start a read-write transaction, you need to stay in the same OS-thread, which in Go means using &lt;a href=&quot;https://pkg.go.dev/runtime#LockOSThread&quot;&gt;os.LockOSThread&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Additionally, commits of lots of small read-write transactions can demonstrate instantaneous performance slower than you might expect. This can be alleviated by batching together read-write transactions where possible, and thus amortising the cost of the commit.&lt;/p&gt;  &lt;p&gt;An actor for the &lt;a href=&quot;https://fossil.wellquite.org/repo/golmdb/file?name=actor.go&amp;amp;ci=09a75ba3f804b153&quot;&gt;read-write&lt;/a&gt; side works quite nicely: that can take care of the batching, and auto-resizing, and the server-side Go-routine can lock itself to an OS thread. Read-only transactions can &lt;a href=&quot;https://fossil.wellquite.org/repo/golmdb/file?ci=09a75ba3f804b153&amp;amp;name=actor.go&amp;amp;ln=75-98&quot;&gt;hang off the same struct&lt;/a&gt; for a clean API design, but they don’t talk to the actor at all other using a RW-mutex to make sure there’s not a resize going on and so it’s safe to start.&lt;/p&gt;  &lt;p&gt;I’ve tried not to hide too much of LMDB, but there are a number of features I’ve decided to not support as they just don’t fit with the API design. I don’t particularly want to duplicate the LMDB documentation (except where it’s really necessary to improve it), so I frequently do refer back to the &lt;a href=&quot;http://www.lmdb.tech/doc/group__mdb.html&quot;&gt;upstream API docs&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;It’s all done, and it seems to work. I’ve written what I think is a fairly reasonable &lt;a href=&quot;https://fossil.wellquite.org/repo/golmdb/file?name=soak_test.go&amp;amp;ci=09a75ba3f804b153&quot;&gt;soak test&lt;/a&gt;: i.e. a test that runs for as long as you want, and stresses the API and concurrency. Nearly all of the rest of the API is covered by tests too.&lt;/p&gt;  &lt;p&gt;I am aware that there is a degree of competitiveness between LMDB and other designs for embedded key-value stores: LMDB is &lt;a href=&quot;https://en.wikipedia.org/wiki/B%2B_tree&quot;&gt;B+tree&lt;/a&gt; based and uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;mmap&lt;/a&gt;. Many other key-value stores use &lt;a href=&quot;https://en.wikipedia.org/wiki/Log-structured_merge-tree&quot;&gt;log-structured merge-trees&lt;/a&gt;. If you go searching, you’ll easily find some rivalry between these two camps, and evidence that performing benchmarks which are meaningful and make best use of all these designs is tricky, and so it’s easy to make conclusions from unsafe data. There’s also a very recent paper &lt;a href=&quot;http://cidrdb.org/cidr2022/papers/p13-crotty.pdf&quot;&gt;Are You Sure You Want to Use MMAP in Your Database Management System?&lt;/a&gt; which explains that once your dataset gets bigger than your RAM, relying on the OS to page data in and out (as is the case when using mmap) is almost certainly a bad idea. So, I’m not at all suggesting that LMDB (or BBolt) are the last word, or even the best option, in embedded key-value database designs. But, I’ve used them a fair amount over the years with success.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-07T16:01:09Z",
"URL":" https://wellquite.org/posts/golmdb/ "
}
,
{
"title":"Well-Typed.Com: The Interface for Multiple Home Units",
"textBody":"&lt;p&gt;Over the last few weeks I have been finishing and improving the implementation of support for Multiple Home Units. A lot of the preliminary work was completed by Fendor. In short, multiple home units allows you to load different packages which may depend on each other into one GHC session. This will allow both GHCi and HLS to support multi component projects more naturally. To get a more complete overview of the &lt;em&gt;why&lt;/em&gt; then you should first consult Fendor’s excellent &lt;a href=&quot;https://mpickering.github.io/ide/posts/2020-10-12-multiple-home-units.html&quot;&gt;introduction&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This post will concentrate on the interface and implementation of the feature. In particular we will talk about the solution to two of the issues he summarises at the end of the post, all the flags you need to know about and other limitations of the current implementation.&lt;/p&gt; &lt;p&gt;I originally implemented support for multiple components in Haskell Language Server (HLS) at the start of 2020 but the implementation has always been hacky. Stack also has rudimentary support for loading multiple home units into one ghci session but doesn’t allow different options or dependencies per component. Given the increasing importance of HLS, fundamental issues which affect it are now being given more priority under the normal GHC maintenance budget. Multiple Home Units is one of the first bigger projects which we hope will allow the language server to be implemented more robustly.&lt;/p&gt; &lt;h2 id=&quot;interface-of-multiple-home-units&quot;&gt;Interface of Multiple Home Units&lt;/h2&gt;  &lt;p&gt;Imagine that you have a project which contains two libraries, named &lt;code&gt;lib-core&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt;. &lt;code&gt;lib-core&lt;/code&gt; contains some utility functions which are used by &lt;code&gt;lib&lt;/code&gt;, so when editing &lt;code&gt;lib&lt;/code&gt; you are often also editing &lt;code&gt;lib-core&lt;/code&gt;. Multiple home units can make this less painful by allowing a build tool to compile &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;lib-core&lt;/code&gt; with one command line invocation. How would a build tool make use of this feature?&lt;/p&gt; &lt;p&gt;In order to specify multiple units, the &lt;code&gt;-unit @⟨filename⟩&lt;/code&gt; flag is given multiple times with a response file containing the arguments for each unit. The response file contains a newline separated list of arguments.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ghc -unit @unitLibCore -unit @unitLib&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where the &lt;code&gt;unitLibCore&lt;/code&gt; response file contains the normal arguments that cabal would pass to &lt;code&gt;--make&lt;/code&gt; mode.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;-this-unit-id lib-core-0.1.0.0 -i -isrc LibCore.Utils LibCore.Types&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The response file for &lt;code&gt;lib&lt;/code&gt;, can specify a dependency on &lt;code&gt;lib-core&lt;/code&gt;, so then modules in &lt;code&gt;lib&lt;/code&gt; can use modules from &lt;code&gt;lib-core&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;-this-unit-id lib-0.1.0.0 -package-id lib-core-0.1.0.0 -i -isrc Lib.Parse Lib.Render&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then when the compiler starts in &lt;code&gt;--make&lt;/code&gt; mode it will compile both units &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;lib-core&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;There is also very basic support for multiple home units in GHCi: at the moment you can start a GHCi session with multiple units but only the &lt;code&gt;:reload&lt;/code&gt; command is supported. Most commands in GHCi assume a single home unit, and so it is additional work (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20889&quot;&gt;#20889&lt;/a&gt;) to modify the interface to support multiple loaded home units.&lt;/p&gt; &lt;h3 id=&quot;options-used-when-working-with-multiple-home-units&quot;&gt;Options used when working with Multiple Home Units&lt;/h3&gt; &lt;p&gt;There are a few extra flags which have been introduced specifically for working with multiple home units. The flags allow a home unit to pretend it’s more like an installed package, for example, specifying the package name, module visibility and reexported modules.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;&lt;code&gt;-working-dir ⟨dir⟩&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;&lt;p&gt;It is common to assume that a package is compiled in the directory where its cabal file resides. Thus, all paths used in the compiler are assumed to be relative to this directory. When there are multiple home units the compiler is often not operating in the standard directory and instead where the cabal.project file is located. In this case the &lt;code&gt;-working-dir&lt;/code&gt; option can be passed which specifies the path from the current directory to the directory the unit assumes to be it’s root, normally the directory which contains the cabal file.&lt;/p&gt; &lt;p&gt;When the flag is passed, any relative paths used by the compiler are offset by the working directory. Notably this includes &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;-I⟨dir⟩&lt;/code&gt; flags.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;&lt;code&gt;-this-package-name ⟨name⟩&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;&lt;p&gt;This flag papers over the awkward interaction of the &lt;code&gt;PackageImports&lt;/code&gt; and multiple home units. When using &lt;code&gt;PackageImports&lt;/code&gt; you can specify the name of the package in an import to disambiguate between modules which appear in multiple packages with the same name.&lt;/p&gt; &lt;p&gt;This flag allows a home unit to be given a package name so that you can also disambiguate between multiple home units which provide modules with the same name.&lt;/p&gt; &lt;p&gt;This solves one problem that Fendor &lt;a href=&quot;https://mpickering.github.io/ide/posts/2020-10-12-multiple-home-units.html#package-imports&quot;&gt;described&lt;/a&gt; in his blog post.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;&lt;code&gt;-hidden-module ⟨module name⟩&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;&lt;p&gt;This flag can be supplied multiple times in order to specify which modules in a home unit should not be visible outside of the unit it belongs to.&lt;/p&gt; &lt;p&gt;The main use of this flag is to be able to recreate the difference between an exposed and hidden module for installed packages.&lt;/p&gt; &lt;p&gt;Fendor &lt;a href=&quot;https://mpickering.github.io/ide/posts/2020-10-12-multiple-home-units.html#module-visibility&quot;&gt;talked about&lt;/a&gt; the issue of module visibility in his blog post, and this flag solves the issue.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;&lt;code&gt;-reexported-module ⟨module name⟩&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;&lt;p&gt;This flag can be supplied multiple times in order to specify which modules are not defined in a unit but should be reexported. The effect is that other units will see this module as if it was defined in this unit.&lt;/p&gt; &lt;p&gt;The use of this flag is to be able to replicate the reexported modules feature of packages with multiple home units.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;h3 id=&quot;offsetting-paths-in-template-haskell-splices&quot;&gt;Offsetting Paths in Template Haskell splices&lt;/h3&gt; &lt;p&gt;When using Template Haskell to embed files into your program, traditionally the paths have been interpreted relative to the directory where the &lt;code&gt;.cabal&lt;/code&gt; file resides. This causes problems for multiple home units as we are compiling many different libraries at once which have &lt;code&gt;.cabal&lt;/code&gt; files in different directories.&lt;/p&gt; &lt;p&gt;For this purpose we have introduced a way to query the value of the &lt;code&gt;-working-dir&lt;/code&gt; flag to the Template Haskell API. By using this function we can implement a &lt;code&gt;makeRelativeToProject&lt;/code&gt; function which offsets a path which is relative to the original project root by the value of &lt;code&gt;-working-dir&lt;/code&gt;.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb4-1&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Language.Haskell.TH.Syntax&lt;/span&gt; ( makeRelativeToProject )&lt;/span&gt; &lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb4-2&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;https://well-typed.com/blog/rss2.xml#cb4-3&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;foo &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;(makeRelativeToProject &lt;span class=&quot;st&quot;&gt;&quot;./relative/path&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; embedFile)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;If you write a relative path in a Template Haskell splice you should use the &lt;code&gt;makeRelativeToProject&lt;/code&gt; function so that your library works correctly with multiple home units.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;A similar function already exists in the &lt;a href=&quot;https://hackage.haskell.org/package/file-embed-0.0.15.0/docs/Data-FileEmbed.html#v:makeRelativeToProject&quot;&gt;&lt;code&gt;file-embed&lt;/code&gt; library&lt;/a&gt;. The function in &lt;code&gt;template-haskell&lt;/code&gt; implements this function in a more robust manner by honouring the &lt;code&gt;-working-dir&lt;/code&gt; flag rather than searching the file system.&lt;/p&gt; &lt;h2 id=&quot;closure-property-for-home-units&quot;&gt;Closure Property for Home Units&lt;/h2&gt; &lt;p&gt;For tools or libraries using the GHC API there is one very important closure property which must be adhered to:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Any dependency which is not a home unit must not (transitively) depend on a home unit.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;For example, if you have three packages &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt;, then if &lt;code&gt;p&lt;/code&gt; depends on &lt;code&gt;q&lt;/code&gt; which depends on &lt;code&gt;r&lt;/code&gt; then it is illegal to load both &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; as home units but not &lt;code&gt;q&lt;/code&gt;, because &lt;code&gt;q&lt;/code&gt; is a dependency of the home unit &lt;code&gt;p&lt;/code&gt; which depends on another home unit &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you are using GHC by the command line then this property is checked, but if you are using the GHC API then you need to check this property yourself. If you get it wrong you will probably get some very confusing errors about overlapping instances.&lt;/p&gt; &lt;h2 id=&quot;limitations-of-multiple-home-units&quot;&gt;Limitations of Multiple Home Units&lt;/h2&gt; &lt;p&gt;There are a few limitations of the initial implementation which will be smoothed out on user demand.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.2.1/docs/html/users_guide/packages.html#thinning-and-renaming-modules&quot;&gt;Package thinning/renaming&lt;/a&gt; syntax is not supported (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20888&quot;&gt;#20888&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;More complicated &lt;a href=&quot;https://cabal.readthedocs.io/en/3.6/cabal-package.html#pkg-field-library-reexported-modules&quot;&gt;reexports/renaming&lt;/a&gt; are not yet supported.&lt;/li&gt; &lt;li&gt;It’s more common to run into existing linker bugs when loading a large number of packages in a session (for example &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20674&quot;&gt;#20674&lt;/a&gt;, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20689&quot;&gt;#20689&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Backpack is not yet supported when using multiple home units (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20890&quot;&gt;#20890&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;Dependency chasing can be quite slow with a large number of modules and packages (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20891&quot;&gt;#20891&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;Loading wired-in packages as home units is currently not supported (this only really affects GHC developers attempting to load &lt;code&gt;template-haskell&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Barely any normal GHCi features are supported (&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/issues/20889&quot;&gt;#20889&lt;/a&gt;). It would be good to support enough for &lt;a href=&quot;https://github.com/ndmitchell/ghcid&quot;&gt;&lt;code&gt;ghcid&lt;/code&gt;&lt;/a&gt; to work correctly.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Despite these limitations, the implementation works already for nearly all packages. It has been testing on large dependency closures, including the whole of &lt;a href=&quot;https://ghc.gitlab.haskell.org/head.hackage/&quot;&gt;&lt;code&gt;head.hackage&lt;/code&gt;&lt;/a&gt; which is a total of 4784 modules from 452 packages.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;With the first iteration of this implementation the necessary foundational aspects have been implemented to allow GHC API clients such as HLS to load multiple home units at once. The next steps are for the maintainers of build tools such as Cabal and Stack to modify their &lt;code&gt;repl&lt;/code&gt; commands to support the new interface.&lt;/p&gt; &lt;p&gt;Well-Typed is able to work on GHC, HLS, Cabal and other core Haskell infrastructure thanks to funding from various sponsors. If your company is interested in contributing to this work, sponsoring maintenance efforts, or funding the implementation of other features, please &lt;a href=&quot;mailto:info@well-typed.com&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;",
"source":"Planet Haskell",
"PubDate":"2022-01-07T00:00:00Z",
"URL":" https://well-typed.com/blog/2022/01/multiple-home-units "
}
,
